[{"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx":"1","C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts":"2","C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx":"3","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx":"4","C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx":"5","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx":"6","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx":"7","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx":"8","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx":"9","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx":"10","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx":"11","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx":"12","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx":"13","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx":"14","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx":"15","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx":"16","C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx":"17","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx":"18","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx":"19","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx":"20","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx":"21","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx":"22","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx":"23","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx":"24","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx":"25","C:\\Users\\acer\\Documents\\mega-soft\\src\\components\\WelcomeHeader\\index.tsx":"26","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\roleType.tsx":"27","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx":"28","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx":"29","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx":"30","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx":"31","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx":"32","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx":"33"},{"size":637,"mtime":1610944959237,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":2686,"mtime":1612267544244,"results":"37","hashOfConfig":"35"},{"size":212,"mtime":1611031594119,"results":"38","hashOfConfig":"35"},{"size":6559,"mtime":1611921041921,"results":"39","hashOfConfig":"35"},{"size":12566,"mtime":1612265745671,"results":"40","hashOfConfig":"35"},{"size":923,"mtime":1611926079293,"results":"41","hashOfConfig":"35"},{"size":12994,"mtime":1612265974054,"results":"42","hashOfConfig":"35"},{"size":13209,"mtime":1612154555025,"results":"43","hashOfConfig":"35"},{"size":22574,"mtime":1612271363479,"results":"44","hashOfConfig":"35"},{"size":22839,"mtime":1611895645961,"results":"45","hashOfConfig":"35"},{"size":21921,"mtime":1612177380390,"results":"46","hashOfConfig":"35"},{"size":20556,"mtime":1612154555050,"results":"47","hashOfConfig":"35"},{"size":536,"mtime":1611916514309,"results":"48","hashOfConfig":"35"},{"size":2861,"mtime":1612266639894,"results":"49","hashOfConfig":"35"},{"size":1961,"mtime":1612157381886,"results":"50","hashOfConfig":"35"},{"size":2548,"mtime":1611747265015,"results":"51","hashOfConfig":"35"},{"size":4990,"mtime":1612163126444,"results":"52","hashOfConfig":"35"},{"size":468,"mtime":1611837747887,"results":"53","hashOfConfig":"35"},{"size":832,"mtime":1611030790303,"results":"54","hashOfConfig":"35"},{"size":443,"mtime":1611820350797,"results":"55","hashOfConfig":"35"},{"size":459,"mtime":1612154555075,"results":"56","hashOfConfig":"35"},{"size":872,"mtime":1611808946343,"results":"57","hashOfConfig":"35"},{"size":812,"mtime":1611815621575,"results":"58","hashOfConfig":"35"},{"size":790,"mtime":1611916486585,"results":"59","hashOfConfig":"35"},{"size":1844,"mtime":1611895645969,"results":"60","hashOfConfig":"35"},{"size":163,"mtime":1612154555074,"results":"61","hashOfConfig":"35"},{"size":13136,"mtime":1612265892053,"results":"62","hashOfConfig":"35"},{"size":9034,"mtime":1612265769874,"results":"63","hashOfConfig":"35"},{"size":2042,"mtime":1612262545171,"results":"64","hashOfConfig":"35"},{"size":15075,"mtime":1612264480257,"results":"65","hashOfConfig":"35"},{"size":14259,"mtime":1612271655245,"results":"66","hashOfConfig":"35"},{"size":9503,"mtime":1612267936100,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1jqg13p",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx",[],["143","144"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx",["145","146","147","148","149","150","151","152"],"import * as React from \"react\";\r\nimport {\r\n  Nav,\r\n  INavLink,\r\n  INavStyles,\r\n  INavLinkGroup,\r\n} from \"office-ui-fabric-react/lib/Nav\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport { useHistory, matchPath } from \"react-router-dom\";\r\n\r\nimport hrms_logo from \"./assets/img/hrms_logo.gif\";\r\nimport logo_nuage from \"./assets/img/logo_nuage.png\";\r\nimport { fetchNavigationBar } from \"./redux/actions/navigation\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./redux/reducers\";\r\n\r\ninitializeIcons();\r\n\r\nconst navLinkGroups: INavLinkGroup[] = [\r\n  {\r\n    links: [\r\n      {\r\n        name: \"Appraisal\",\r\n        url: \"\",\r\n        key: \"key01\",\r\n        // icon: \"UpgradeAnalysis\",\r\n        links: [\r\n          {\r\n            name: \"Setup\",\r\n            url: \"/\",\r\n            icon: \"Settings\",\r\n            key: \"key02\",\r\n          },\r\n          // {\r\n          //   name: \"Ratings\",\r\n          //   url: \"/apprisal/rating\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key03\",\r\n          // },\r\n          // {\r\n          //   name: \"Periods\",\r\n          //   url: \"/apprisal/periods\",\r\n          //   icon: \"Timer\",\r\n          //   key: \"key04\",\r\n          // },\r\n          {\r\n            name: \"Goal Setting\",\r\n            url: \"/appraisal/goalsetting\",\r\n            icon: \"6PointStar\",\r\n            key: \"key05\",\r\n          },\r\n          // {\r\n          //   name: \"Self Assessment\",\r\n          //   url: \"\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key06\",\r\n          // },\r\n          // {\r\n          //   name: \"Development Plan\",\r\n          //   url: \"/apprisal/developmentPlan\",\r\n          //   icon: \"TestPlan\",\r\n          //   key: \"key07\",\r\n          // },\r\n          // {\r\n          //   name: \"Release Appraisal\",\r\n          //   url: \"/apprisal/releaseApprisal\",\r\n          //   icon: \"ReleaseGate\",\r\n          //   key: \"key08\",\r\n          // },\r\n          // {\r\n          //   name: \"Market Bench Marketing\",\r\n          //   url: \"/apprisal/marketBenchMarketing\",\r\n          //   icon: \"Market\",\r\n          //   key: \"key09\",\r\n          // },\r\n        ],\r\n        isExpanded: true,\r\n      },\r\n      {\r\n        name: \"Manage\",\r\n        url: \"\",\r\n        key: \"key10\",\r\n        // icon:'MedicationAdmin',\r\n        links: [\r\n          {\r\n            name: \"Team Goal Setting\",\r\n            url: \"/manage/teamGoalSetting\",\r\n            icon: \"Settings\",\r\n            key: \"key11\",\r\n          },\r\n          {\r\n            name: \"Team assess\",\r\n            url: \"/manage/teamAssess\",\r\n            icon: \"AssessmentGroup\",\r\n            key: \"key12\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n      {\r\n        name: \"Confirmation\",\r\n        url: \"\",\r\n        key: \"key13\",\r\n        expandAriaLabel: \"Expand Admin section\",\r\n        collapseAriaLabel: \"Collapse admin section\",\r\n        links: [\r\n          {\r\n            name: \"Confirmation Status\",\r\n            url: \"/confirmation/status\",\r\n            icon: \"SplitObject\",\r\n            key: \"key14\",\r\n          },\r\n          {\r\n            name: \"Release\",\r\n            url: \"/confirmation/release\",\r\n            key: \"key15\",\r\n            icon: \"ReleaseGate\",\r\n          },\r\n          {\r\n            name: \"Approval\",\r\n            url: \"/confirmation/approval\",\r\n            key: \"key16\",\r\n            icon: \"DocumentApproval\",\r\n          },\r\n          {\r\n            name: \"Letter\",\r\n            url: \"/confirmation/letter\",\r\n            key: \"key17\",\r\n            icon: \"DietPlanNotebook\",\r\n          },\r\n          {\r\n            name: \"Probation Letter\",\r\n            url: \"/confirmation/probationLetter\",\r\n            key: \"key18\",\r\n            icon: \"QuickNote\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst navStyles: Partial<INavStyles> = {\r\n  root: {\r\n    // overflowY: \"auto\",\r\n    // width: 208,\r\n    height: \"100%\",\r\n  },\r\n  link: {\r\n    width: \"200px\",\r\n  },\r\n  linkText: {\r\n    color: \"#FFF\",\r\n    // fontSize: 12,\r\n    selectors: {\r\n      \"&:hover\": {\r\n        color: \"#FFF\",\r\n      },\r\n    },\r\n  },\r\n  chevronIcon: {\r\n    color: \"#FFF\",\r\n  },\r\n  compositeLink: {\r\n    selectors: {\r\n      \"&.is-selected\": {\r\n        background: \"#29416f\",\r\n      },\r\n      \"&:hover\": {\r\n        \".ms-Button\": {\r\n          background: \"#29416f\",\r\n        },\r\n        \".ms-Nav-linkText\": {\r\n          // color: \"#FFF\", // your real styling here\r\n        },\r\n        \".ms-Icon\": {\r\n          color: \"#FFF\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nfunction Navigation() {\r\n  // const { children } = props;\r\n  const dispatch = useDispatch();\r\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  // console.log(\"roleType?????=>\", roleType);\r\n\r\n  const navigation = useSelector(\r\n    (state: RootState) => state.navigationData.navigationData\r\n  );\r\n  // console.log(\"navigation data=>\", navigation.links);\r\n\r\n  useEffect((): void => {\r\n    dispatch(fetchNavigationBar(doctype, roleType ? roleType : \"Employee\"));\r\n  }, [doctype, roleType]);\r\n\r\n  let history = useHistory();\r\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\r\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\r\n    setSelectedNavKey(item?.key || \"\");\r\n  };\r\n  React.useEffect(() => {\r\n    navLinkGroups[0].links.map((item) => {\r\n      if (item.links) {\r\n        item.links.map((subItem) => {\r\n          if (\r\n            matchPath(history.location.pathname, {\r\n              path: subItem.url,\r\n              exact: true,\r\n            })\r\n          ) {\r\n            setSelectedNavKey(subItem?.key || \"\");\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        if (\r\n          matchPath(history.location.pathname, {\r\n            path: item.url,\r\n            exact: true,\r\n          })\r\n        ) {\r\n          setSelectedNavKey(item?.key || \"\");\r\n          return;\r\n        }\r\n      }\r\n    });\r\n  }, [history.location.pathname]);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"main-logo\">\r\n        <img src={logo_nuage} />\r\n      </div>\r\n      <div className=\"footer-logo\">\r\n        <img src={hrms_logo} />\r\n      </div>\r\n      <Nav\r\n        onLinkClick={onLinkClick}\r\n        selectedKey={selectedNavKey}\r\n        ariaLabel=\"Nav basic example\"\r\n        styles={navStyles}\r\n        groups={navigation.links}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx",["153","154"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx",["155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx",["175","176","177"],"import {\r\n  Checkbox,\r\n  DatePicker,\r\n  Dropdown,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  ITextFieldStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  PrimaryButton,\r\n  Separator,\r\n  Stack,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nconst stackTokens = { childrenGap: 10 };\r\n\r\nconst textfelidStyle: Partial<ITextFieldStyles> = {\r\n  root: {\r\n    \".ms-TextField-wrapper\": {\r\n      borderRadius: \"10px\",\r\n    },\r\n\r\n    \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n      borderRadius: \"10px\",\r\n    },\r\n  },\r\n};\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"HR\" },\r\n  { key: \"key4\", text: \"Management\" },\r\n];\r\n\r\nconst controlClass = mergeStyleSets({\r\n  control: {\r\n    // margin: \"0 0 15px 0\",\r\n    // maxWidth: \"150px\",\r\n  },\r\n});\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\nconst datePickerStyle: Partial<IDatePickerStyles> = {\r\n  icon: {\r\n    color: \"rgb(111 144 220)\",\r\n  },\r\n};\r\n\r\nfunction AppraisalDetail(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n\r\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"key1\", text: \"Employee\" },\r\n  //   { key: \"key2\", text: \"Manager\" },\r\n  //   { key: \"key3\", text: \"HR content\" },\r\n  // ];\r\n\r\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n  //   key: \"\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setReviewSearch(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters)\r\n    ).then(response =>{\r\n      setAppraisalDetail(response.data[0]);\r\n    })\r\n  }, []);\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Appraisal Details\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  console.log(\"local data data=>\", appraisalDetail);\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              disabled={true}\r\n              placeholder=\"ID\"\r\n              value={appraisalDetail.id}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              // onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              disabled={true}\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={appraisalDetail.appraisal_description}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              // onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              disabled={true}\r\n              label=\"Review From\"\r\n              // value={updateData.review_from}\r\n              className={`${controlClass.control} flexGrow`}\r\n              // firstDayOfWeek={firstDayOfWeek}\r\n              // strings={DayPickerStrings}\r\n              value={new Date(appraisalDetail.review_from)}\r\n              // onSelectDate={(date) =>\r\n              //   setUpdateData({ ...updateData, review_from: date })\r\n              // }\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              disabled={true}\r\n              label=\"Appraisal To\"\r\n              value={new Date(appraisalDetail.appraisal_to)}\r\n              className={`${controlClass.control} flexGrow`}\r\n              // firstDayOfWeek={firstDayOfWeek}\r\n              // strings={DayPickerStrings}\r\n              // onSelectDate={(date) =>\r\n              //   setUpdateData({ ...updateData, appraisal_to: date })\r\n              // }\r\n              styles={datePickerStyle}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              disabled={true}\r\n              selectedKey={\r\n                reviewFrequencyOptions.find(\r\n                  (item) => item.text === appraisalDetail.review_frequency\r\n                )?.key\r\n              }\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              // onChange={(ev, item) =>\r\n              //   setUpdateData({ ...updateData, review_frequency: item?.text })\r\n              // }\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            disabled={true}\r\n            selectedKey={\r\n              typeOptions.find((item) => item.text === appraisalDetail.type)\r\n                ?.key\r\n            }\r\n            label=\"Type\"\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            // onChange={(ev, item) =>\r\n            //   setUpdateData({ ...appraisalDetail, type: item?.text })\r\n            // }\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            disabled={true}\r\n            selectedKey={\r\n              formateTypeOptions.find(\r\n                (item) => item.text === appraisalDetail.format_type\r\n              )?.key\r\n            }\r\n            label=\"Format Type\"\r\n            className=\"type-input\"\r\n            // onChange={(ev, item) =>\r\n            //   setUpdateData({ ...updateData, format_type: item?.text })\r\n            // }\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={appraisalDetail.appraisal_owner}\r\n            styles={textfelidStyle}\r\n            name=\"appraisal_owner\"\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={appraisalDetail.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={appraisalDetail.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={appraisalDetail.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.kra_settings_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.assessment_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.assessment_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.assessment_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.assessment_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            {/* <Dropdown\r\n              selectedKey={\"key1\"}\r\n              options={rolesOption}\r\n              onChange={handleRoles}\r\n              className=\"rolesDropDown\"\r\n              styles={dropdownStyles}\r\n              style={{ marginLeft: \"2rem\" }}\r\n            /> */}\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()} </div>\r\n        <div className=\"right-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AppraisalDetail);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx",["178","179","180","181","182","183","184","185","186"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx",["187","188","189","190","191"],"import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  ITextFieldStyles,\r\n} from \"office-ui-fabric-react/lib/TextField\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport \"./style.css\";\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Separator,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n  // { key: \"key4\", text: \"Management\" },\r\n];\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\n// interface ParamTypes {\r\n//   id: string\r\n// }\r\n\r\nfunction AddAppraisal(props: any) {\r\n  // const params = useParams<ParamTypes>();\r\n  // console.log(\"id => \", params.id);\r\n  const stackTokens = { childrenGap: 10 };\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      borderRadius: \"10px\",\r\n      \".ms-TextField-wrapper\": {\r\n        // borderRadius: \"10px\",\r\n      },\r\n\r\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n        // borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    icon: {\r\n      color: \"#344f84\",\r\n    },\r\n  };\r\n\r\n  const [claimsData, setClaimsData] = useState({\r\n    id: \"\",\r\n    description: \"\",\r\n    owner: \"\",\r\n    kraSettingGoal: false,\r\n    kraSettingCompetencies: false,\r\n    kraSettingDevelopmentPlan: false,\r\n    kraSettingSummary: false,\r\n    assessmentGoal: false,\r\n    assessmentCompetencies: false,\r\n    assessmentDevelopmentPlan: false,\r\n    assessmentSummary: false,\r\n  });\r\n\r\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeType = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setSelectedType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n  // console.log(\"type==>\", selectedType.text )\r\n\r\n  const onChangeReviewFrequency = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewFrequency(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Add Appraisal\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  const [dateReview, setDateReview] = useState<Date | undefined>();\r\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\r\n\r\n  const reviewFromDate = (date: Date | null | undefined): void => {\r\n    setDateReview(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const appraisalToDate = (date: Date | null | undefined): void => {\r\n    setdDateAppraisal(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  // // const rolesOption: IDropdownOption[] = [\r\n  // //   { key: \"employee\", text: \"Employee\" },\r\n  // //   { key: \"manager\", text: \"Manager\" },\r\n  // //   { key: \"hrContent\", text: \"HR content\" },\r\n  // // ];\r\n\r\n  // const [roles, setRoles] = useState<IDropdownOption>({\r\n  //   key: \"employee\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setRoles(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n  // const dispatch = useDispatch();\r\n\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\r\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\r\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\r\n  const [errMsgType, setErrMsgType] = useState(\"\");\r\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\r\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\r\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const handleAddApprisal = () => {\r\n    if (claimsData.id === \"\") {\r\n      setErrMsg(\"ID is required\");\r\n    }\r\n    if (claimsData.description === \"\") {\r\n      setErrMsgDescription(\"Description is required\");\r\n    }\r\n    if (claimsData.owner === \"\") {\r\n      setErrMsgOwner(\"Owner is required\");\r\n    }\r\n    if (formateType.text === \"\") {\r\n      setErrMsgFormatType(\"Select format Type\");\r\n    }\r\n    if (reviewFrequency.text === \"\") {\r\n      setErrMsgReviewFrequency(\"Select review Frequency\");\r\n    }\r\n    if (selectedType.text === \"\") {\r\n      setErrMsgType(\"Select type\");\r\n    }\r\n    if (dateReview === null) {\r\n      setErrMsgReviewDate(\"Select review date\");\r\n    }\r\n    const addQuery = {\r\n      id: claimsData.id,\r\n      appraisal_description: claimsData.description,\r\n      description: \"22\",\r\n      format_type: formateType.text,\r\n      review_frequency: reviewFrequency.text,\r\n      type: selectedType.text,\r\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\r\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\r\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\r\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\r\n      assessment_tab_goals: claimsData.assessmentGoal,\r\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\r\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\r\n      assessment_tab_summary: claimsData.assessmentSummary,\r\n      route: \"appraisal/BB00002\",\r\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\r\n      appraisal_owner: claimsData.owner,\r\n    };\r\n    // console.log(\"addQueary=>\", addQuery);\r\n    add_apprisal(addQuery).then((response) => {\r\n      console.log(\"response=>\", response.data);\r\n      if (response?.status === 200) {\r\n        setSuccessModal(true);\r\n        // history.push(\"/\");\r\n      } else {\r\n        // console.log(\"failed==>\", failedModal);\r\n        setFailedModal(true);\r\n      }\r\n\r\n      // else {\r\n      //   console.log(\"then error msg btnClick==>\", response);\r\n      // }\r\n    });\r\n    // .catch((err) => {\r\n    //   console.log(\"Error in btnClick=>\", err);\r\n    // });\r\n  };\r\n\r\n  const renderForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              required\r\n              placeholder=\"ID\"\r\n              value={claimsData.id}\r\n              errorMessage={errMsg}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={claimsData.description}\r\n              errorMessage={errMsgDescription}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"Review From\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={dateReview}\r\n              onSelectDate={reviewFromDate}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"Appraisal To\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeekAppraisal}\r\n              strings={DayPickerStringsAppraisal}\r\n              onSelectDate={appraisalToDate}\r\n              styles={datePickerStyle}\r\n              value={dateAppraisal}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              errorMessage={errMsgReviewFrequency}\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              onChange={onChangeReviewFrequency}\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            required\r\n            label=\"Type\"\r\n            errorMessage={errMsgType}\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            required\r\n            label=\"Format Type\"\r\n            errorMessage={errMsgFormatType}\r\n            className=\"type-input\"\r\n            onChange={onChangeFormateType}\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            required\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={claimsData.owner}\r\n            // styles={textfelidStyle}\r\n            errorMessage={errMsgOwner}\r\n            name=\"owner\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={claimsData.kraSettingCompetencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingCompetencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={claimsData.kraSettingGoal}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingGoal\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={claimsData.kraSettingDevelopmentPlan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingDevelopmentPlan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={claimsData.kraSettingSummary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingSummary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={claimsData.assessmentGoal}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentGoal\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={claimsData.assessmentCompetencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentCompetencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={claimsData.assessmentDevelopmentPlan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentSummary\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={claimsData.assessmentSummary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentSummary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Success</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setSuccessModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  Appraisal Added Successfully\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"OK\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content\">\r\n                  Somthing went wrong. Please try again\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Go Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Add Appraisal\"\r\n                allowDisabledFocus\r\n                onClick={handleAddApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            {/* <Dropdown\r\n              options={rolesOption}\r\n              onChange={handleRoles}\r\n              selectedKey={roles ? roles.key : \"employee\"}\r\n              className=\"rolesDropDown\"\r\n              styles={dropdownStyles}\r\n              style={{ marginLeft: \"2rem\" }}\r\n            /> */}\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderForm()}</div>\r\n        <div className=\"right-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AddAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx",["192","193","194","195"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  DetailsList,\r\n  DetailsRow,\r\n  IColumn,\r\n  IDetailsListProps,\r\n  IDetailsListStyles,\r\n  IDetailsRowStyles,\r\n} from \"office-ui-fabric-react/lib/DetailsList\";\r\nimport \"office-ui-fabric-react/dist/css/fabric.css\";\r\nimport {\r\n  PrimaryButton,\r\n  getTheme,\r\n  TextField,\r\n  Dropdown,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  Link,\r\n  Spinner,\r\n  SpinnerSize,\r\n  Modal,\r\n  IconButton,\r\n  IModalStyles,\r\n  IIconProps,\r\n} from \"office-ui-fabric-react\";\r\nimport {\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\r\nimport Header from \"../../Header\";\r\n// import Panel from \"../../components/Panel\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport \"./style.css\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { fetchAppraisalData } from \"../../redux/actions/apprisal\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { delete_appraisal } from \"../../redux/actions/apprisal\";\r\n// import { roleType } from \"../../redux/actions/roleType\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction Appraisal(props: any) {\r\n  // const [hasMoreRecord, setHasMoreRecord] = useState(true);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [limitPageLength, setLimitPageLength] = useState(5);\r\n  const [orderBy, setOrderBy] = useState(\"asc\");\r\n  const [orderByField, setOrderByField] = useState(\"id\");\r\n  const [filtersById, setFiltersById] = useState(\"\");\r\n  const [filtersByDescription, setFiltersByDescription] = useState(\"\");\r\n  const [filtersByReviewFreq, setFiltersByReviewFreq] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const appraisal = useSelector((state: RootState) => state.appraisal);\r\n  const { appraisalList, isLoading, count, total_count } = appraisal;\r\n\r\n  const params = useParams<ParamTypes>();\r\n\r\n  // console.log(\"data apppp=>\", appraisalList);\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    if (filtersByDescription) {\r\n      filters.push([\"description\", \"like\", filtersByDescription]);\r\n    }\r\n    if (filtersByReviewFreq) {\r\n      filters.push([\"review_frequency\", \"=\", filtersByReviewFreq]);\r\n    }\r\n    dispatch(\r\n      fetchAppraisalData(\r\n        limitStart,\r\n        limitPageLength,\r\n        `${orderByField} ${orderBy}`,\r\n        JSON.stringify(filters)\r\n      )\r\n    );\r\n    // fetchAppraisalData(\r\n    //   limitStart,\r\n    //   limitPageLength,\r\n    //   `${orderByField} ${orderBy}`,\r\n    //   JSON.stringify(filters)\r\n    // ).then((response: any) => {\r\n    //   // setList(response.data);\r\n    //   // if (response.data.length == limitPageLength) {\r\n    //   //   setHasMoreRecord(true);\r\n    //   // } else {\r\n    //   //   setHasMoreRecord(false);\r\n    //   // }\r\n    // })\r\n    // console.log(\"filters==>\", filters)\r\n  }, [\r\n    limitStart,\r\n    limitPageLength,\r\n    orderBy,\r\n    filtersById,\r\n    filtersByDescription,\r\n    filtersByReviewFreq,\r\n  ]);\r\n\r\n  // const params = useParams<ParamTypes>();\r\n  // console.log(\"id => \", params.id);\r\n\r\n  const columns: IColumn[] = [\r\n    {\r\n      key: \"01\",\r\n      name: \"ID\",\r\n      fieldName: \"id\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSorted: true,\r\n      className: \"idColumn\",\r\n      isSortedDescending: false,\r\n      sortAscendingAriaLabel: \"Sorted A to Z\",\r\n      isRowHeader: true,\r\n      onColumnClick: _onColumnClick,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"03\",\r\n    //   name: \"Name\",\r\n    //   fieldName: \"name\",\r\n    //   minWidth: 10,\r\n    //   maxWidth: 110,\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   onColumnClick: _onColumnClick,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"04\",\r\n      name: \"Description\",\r\n      fieldName: \"appraisal_description\",\r\n      minWidth: 100,\r\n      maxWidth: 200,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Review From\",\r\n      fieldName: \"review_from\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"06\",\r\n      name: \"Appraisal To\",\r\n      fieldName: \"appraisal_to\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"07\",\r\n    //   name: \"Owner\",\r\n    //   fieldName: \"owner\",\r\n    //   minWidth: 10,\r\n    //   maxWidth: 170,\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   isRowHeader: true,\r\n    //   onColumnClick: _onColumnClick,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"08\",\r\n      name: \"Review Frequency\",\r\n      fieldName: \"review_frequency\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"02\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 110,\r\n      maxWidth: 110,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              viewAppraisal(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              updateAppriasal(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              deleteAppraisal(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [showDelete, setShowDelete] = useState(false);\r\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const [deleteItemId, setDeleteItemId] = useState(null);\r\n\r\n  const deleteAppraisal = (item: any) => {\r\n    setDeleteItemId(item.id);\r\n    setShowDelete(true);\r\n  };\r\n\r\n  const handleDeleteAppraisal = () => {\r\n    delete_appraisal(deleteItemId).then((response) => {\r\n      console.log(\"response=>\", response);\r\n      setShowDelete(false);\r\n      setShowDeleteSuccess(true);\r\n      setDeleteItemId(null);\r\n    });\r\n  };\r\n\r\n  const viewAppraisal = (item: any) => {\r\n    history.push(`/appraisal/view/${item.id}`);\r\n  };\r\n\r\n  const updateAppriasal = (item: any) => {\r\n    // localStorage.setItem('apprisal_data', JSON.stringify(item));\r\n    history.push(`/appraisal/update/${item.id}`);\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {};\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\", onClick: _onBreadcrumbItemClicked },\r\n    { text: \"Appraisal\", key: \"d2\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n\r\n  const handleSearchClick = () => {\r\n    setFiltersById(`${searchById}%`);\r\n    setFiltersByDescription(`${searchByDescription}%`);\r\n    setFiltersByReviewFreq(`${reviewSearch?.key || \"\"}`);\r\n    setLimitSTart(0);\r\n    setCurentPage(0);\r\n  };\r\n\r\n  function _onColumnClick(\r\n    ev?: React.MouseEvent<HTMLElement>,\r\n    column?: IColumn\r\n  ): void {\r\n    // console.log('column', column)\r\n    if (column?.fieldName === orderByField) {\r\n      if (orderBy === \"asc\") {\r\n        setOrderBy(\"desc\");\r\n      } else {\r\n        setOrderBy(\"asc\");\r\n      }\r\n    } else {\r\n      setOrderByField(column?.fieldName || \"id\");\r\n    }\r\n  }\r\n\r\n  const controlStyles = {\r\n    root: {\r\n      margin: \"0 10px 20px 0\",\r\n      maxWidth: \"300px\",\r\n      // borderRadius: \"20px\",\r\n    },\r\n\r\n    wrapper: {\r\n      \".ms-TextField-fieldGroup fieldGroup-91\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const [currentPage, setCurentPage] = useState(0);\r\n\r\n  const [searchById, setSearchById] = useState(\"\");\r\n  const [searchByDescription, setSearchByDescription] = useState(\"\");\r\n  // const [appraisalToSearch, setAppraisalToSearch] = useState(\"\");\r\n  // const [role, setRole] = useState<IDropdownOption>({\r\n  //   key: \"employee\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const itemSearch = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchById(text || \"\");\r\n    // if(text === \"\" && searchById !== \"\") {\r\n    //   setFiltersById(\"\");\r\n    //   setLimitSTart(0);\r\n    //   setCurentPage(0)\r\n    // }\r\n  };\r\n\r\n  const itemSearchDescription = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchByDescription(text || \"\");\r\n    // if(text === \"\" && searchById !== \"\") {\r\n    //   setFiltersById(\"\");\r\n    //   setLimitSTart(0);\r\n    //   setCurentPage(0)\r\n    // }\r\n  };\r\n\r\n  const itemSearchReview = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setRole(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  // const itemSearchApprisalTo = (\r\n  //   ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  //   text?: string\r\n  // ): void => {\r\n  //   setAppraisalToSearch(text || \"\");\r\n  //   // if(text === \"\" && searchById !== \"\") {\r\n  //   //   setFiltersById(\"\");\r\n  //   //   setLimitSTart(0);\r\n  //   //   setCurentPage(0)\r\n  //   // }\r\n  // };\r\n\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      backgroundColor: \"#344f84\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const searchOptions: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Yearly\", text: \"Yearly\" },\r\n    { key: \"Monthly\", text: \"Monthly\" },\r\n  ];\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"employee\", text: \"Employee\" },\r\n  //   { key: \"manager\", text: \"Manager\" },\r\n  //   { key: \"hrContact\", text: \"HR Contact\" },\r\n  // ];\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const history = useHistory();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const renderRow: IDetailsListProps[\"onRenderRow\"] = (props) => {\r\n    const customStyles: Partial<IDetailsRowStyles> = {};\r\n    if (props) {\r\n      if (props.itemIndex % 2 === 0) {\r\n        // Every other row renders with a different background color\r\n        customStyles.root = { backgroundColor: theme.palette.themeLighterAlt };\r\n      }\r\n\r\n      return <DetailsRow {...props} styles={customStyles} />;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderNoData = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"center\",\r\n          marginTop: \"20px\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <PrimaryButton\r\n          text=\"New Appraisal\"\r\n          iconProps={{ iconName: \"Add\" }}\r\n          allowDisabledFocus\r\n          onClick={() => {\r\n            history.push(\"/addApprisal\");\r\n          }}\r\n          style={{ marginLeft: \"auto\", alignSelf: \"center\" }}\r\n          disabled={false}\r\n          checked={false}\r\n        />\r\n        <Text\r\n          style={{\r\n            color: \"#aaa\",\r\n            textAlign: \"center\",\r\n            padding: 50,\r\n            fontSize: 30,\r\n          }}\r\n        >\r\n          No Appraisal Data Found\r\n        </Text>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // console.log(\"appraisal data=>>\", appraisalList);\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"searchBarClass\">\r\n          <TextField\r\n            label=\"ID\"\r\n            onChange={itemSearch}\r\n            placeholder=\"Enter ID\"\r\n            className=\"searchInput\"\r\n            styles={controlStyles}\r\n          />\r\n          <TextField\r\n            label=\"Description\"\r\n            className=\"searchInput\"\r\n            onChange={itemSearchDescription}\r\n            placeholder=\"Enter Description\"\r\n            styles={controlStyles}\r\n          />\r\n          <Dropdown\r\n            label=\"Review Frequency\"\r\n            placeholder=\"Select\"\r\n            options={searchOptions}\r\n            className=\"reviewFrequency\"\r\n            onChange={itemSearchReview}\r\n            style={{ padding: \"0px\" }}\r\n            styles={dropdownStyles}\r\n          />\r\n          <PrimaryButton\r\n            iconProps={{ iconName: \"Search\" }}\r\n            onClick={handleSearchClick}\r\n            style={{\r\n              marginLeft: \"10px\",\r\n              alignSelf: \"center\",\r\n              marginTop: \"8px\",\r\n            }}\r\n          />\r\n          <PrimaryButton\r\n            text=\"New Appraisal\"\r\n            iconProps={{ iconName: \"Add\" }}\r\n            allowDisabledFocus\r\n            onClick={() => {\r\n              history.push(\"/addApprisal\");\r\n            }}\r\n            style={{\r\n              marginLeft: \"auto\",\r\n              alignSelf: \"center\",\r\n              marginTop: \"8px\",\r\n            }}\r\n            disabled={false}\r\n            checked={false}\r\n          />\r\n          {/* <TextField\r\n                onChange={itemSearchApprisalTo}\r\n                placeholder= \"Appraisal To\"\r\n                styles={controlStyles}\r\n              /> */}\r\n        </div>\r\n        {isLoading ? (\r\n          <Spinner\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              padding: \"50px\",\r\n              color: \"#344f84\",\r\n            }}\r\n            size={SpinnerSize.large}\r\n          />\r\n        ) : appraisalList.length === 0 ? (\r\n          renderNoData()\r\n        ) : (\r\n          <DetailsList\r\n            styles={listStyle}\r\n            items={appraisalList}\r\n            className=\"detail-list\"\r\n            onRenderRow={renderRow}\r\n            columns={columns}\r\n            selectionMode={0}\r\n          />\r\n        )}\r\n\r\n        <div className=\"pagination-style\">\r\n          <Pagination\r\n            format=\"buttons\"\r\n            // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n            // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n            selectedPageIndex={currentPage}\r\n            // pageCount={hasMoreRecord ? currentPage + 2 : currentPage + 1}\r\n            pageCount={Math.ceil(total_count / limitPageLength)}\r\n            // itemsCount\r\n            itemsPerPage={limitPageLength}\r\n            // itemsPerPage={appraisalList.count}\r\n            // pageRangeDisplayed= {currentPage}\r\n            // totalItemCount={limitPageLength * 2}\r\n            totalItemCount={total_count}\r\n            // numberOfPageButton={2}\r\n            // lastPageIconProps={{\r\n            //   iconName: \"DoubleChevronRight\",\r\n            //   style: { display: \"none\" },\r\n            // }}\r\n            // firstPageIconProps={{\r\n            //   iconName: \"ChevronRight\",\r\n            //   style: { display: \"none\" },\r\n            // }}\r\n            onPageChange={(page) => {\r\n              setLimitSTart(page * limitPageLength);\r\n              setCurentPage(page);\r\n            }}\r\n          />\r\n          <div>\r\n            <Modal\r\n              titleAriaId={\"Title\"}\r\n              isOpen={showDelete}\r\n              isBlocking={false}\r\n              styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n            >\r\n              <div className=\"modal-header\">\r\n                <div className=\"modal-title\">Delete</div>\r\n                <IconButton\r\n                  styles={iconButtonStyles}\r\n                  iconProps={cancelIcon}\r\n                  ariaLabel=\"Close popup modal\"\r\n                  onClick={() => {\r\n                    setShowDelete(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"modal-content-success\">\r\n                Are you sure you want to delete this item?\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  marginTop: \"30px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  text=\"Delete\"\r\n                  allowDisabledFocus\r\n                  onClick={handleDeleteAppraisal}\r\n                  disabled={false}\r\n                  checked={false}\r\n                />\r\n                <PrimaryButton\r\n                  text=\"Cancel\"\r\n                  allowDisabledFocus\r\n                  onClick={() => {\r\n                    setShowDelete(false);\r\n                  }}\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  disabled={false}\r\n                  checked={false}\r\n                />\r\n              </div>\r\n            </Modal>\r\n            <Modal\r\n              titleAriaId={\"Title\"}\r\n              isOpen={showDeleteSuccess}\r\n              isBlocking={false}\r\n              styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n            >\r\n              <div className=\"modal-header\">\r\n                <div className=\"modal-title\">Success</div>\r\n                <IconButton\r\n                  styles={iconButtonStyles}\r\n                  iconProps={cancelIcon}\r\n                  ariaLabel=\"Close popup modal\"\r\n                  onClick={() => {\r\n                    setShowDeleteSuccess(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"modal-content-success\">\r\n                Item successfully Deleted.\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  marginTop: \"30px\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  text=\"Cancel\"\r\n                  allowDisabledFocus\r\n                  onClick={() => {\r\n                    setShowDeleteSuccess(false);\r\n                  }}\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  disabled={false}\r\n                  checked={false}\r\n                />\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  // console.log(\"data=>\", appraisal);\r\n  return (\r\n    <div className=\"view\">\r\n      <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            {/* <Dropdown\r\n              options={rolesOption}\r\n              onChange={handleRoles}\r\n              selectedKey={role ? role.key : \"employee\"}\r\n              // defaultSelectedKey={roles ? roles.key : \"employee\"}\r\n              className=\"rolesDropDown\"\r\n              styles={dropdownStyles}\r\n              style={{ marginLeft: \"2rem\" }}\r\n            /> */}\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()}</div>\r\n        <div className=\"right-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(Appraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx",["196","197","198","199","200"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  ITextFieldStyles,\r\n} from \"office-ui-fabric-react/lib/TextField\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport \"./style.css\";\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Separator,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n  // { key: \"key4\", text: \"Management\" },\r\n];\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction UpdateAppraisal(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const stackTokens = { childrenGap: 10 };\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n\r\n  const [updateData, setUpdateData]: any = useState({});\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters)\r\n    ).then(response =>{\r\n      setUpdateData(response.data[0]);\r\n    })\r\n  }, []);\r\n\r\n  // console.log(\"upadetdata==>\", updateData);\r\n\r\n  // const appraisalList = useSelector((state: RootState) => state.appraisal.appraisalList) || [];\r\n  //   const updateData = appraisalList.find(item => item.id === params.appraisalId);\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      \".ms-TextField-wrapper\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n\r\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   marginRight: \"10px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  // const [dateReview, setDateReview] = useState<Date | null | undefined>(\r\n  //   new Date(updateData.review_from)\r\n  // );\r\n  // const [dateAppraisal, setdDateAppraisal] = useState<Date | null | undefined>(\r\n  //   new Date(updateData.appraisal_to)\r\n  // );\r\n\r\n  // const reviewFromDate = (date: Date | null | undefined): void => {\r\n  //   const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  //   // console.log(\"date==>\", reviewFrequencyDate);\r\n  //   setDateReview(reviewFrequencyDate);\r\n  // };\r\n  // const appraisalToDate = (date: Date | null | undefined): void => {\r\n  //   const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  //   // console.log(\"date==>\", reviewFrequencyDate);\r\n  //   setdDateAppraisal(appraisalDate);\r\n  // };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"key1\", text: \"HR\" },\r\n  //   { key: \"key2\", text: \"Manager\" },\r\n  //   { key: \"key3\", text: \"Employee\" },\r\n  // ];\r\n\r\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n  //   key: \"\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setReviewSearch(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n  // const dispatch = useDispatch();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const handleUpdateApprisal = () => {\r\n    const updateQuery = {\r\n      ...updateData,\r\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\r\n      description: \"22\",\r\n      route: \"appraisal/BB00002\",\r\n    };\r\n    // console.log(\"updateQuery=>\", updateQuery);\r\n    edit_appraisal(updateQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      if (response?.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n    // .catch((err) => {\r\n    //   console.log(\"Error in btnClick=>\", err);\r\n    // });\r\n  };\r\n\r\n  const renderUpdateForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              disabled\r\n              placeholder=\"ID\"\r\n              value={updateData.id}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={updateData.appraisal_description}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Review From\"\r\n              // value={updateData.review_from}\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={new Date(updateData.review_from)}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, review_from: date })\r\n              }\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Appraisal To\"\r\n              value={new Date(updateData.appraisal_to)}\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, appraisal_to: date })\r\n              }\r\n              styles={datePickerStyle}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              selectedKey={\r\n                reviewFrequencyOptions.find(\r\n                  (item) => item.text === updateData.review_frequency\r\n                )?.key\r\n              }\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, review_frequency: item?.text })\r\n              }\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            required\r\n            selectedKey={\r\n              typeOptions.find((item) => item.text === updateData.type)?.key\r\n            }\r\n            label=\"Type\"\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            onChange={(ev, item) =>\r\n              setUpdateData({ ...updateData, type: item?.text })\r\n            }\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            required\r\n            selectedKey={\r\n              formateTypeOptions.find(\r\n                (item) => item.text === updateData.format_type\r\n              )?.key\r\n            }\r\n            label=\"Format Type\"\r\n            className=\"type-input\"\r\n            onChange={(ev, item) =>\r\n              setUpdateData({ ...updateData, format_type: item?.text })\r\n            }\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            required\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={updateData.appraisal_owner}\r\n            styles={textfelidStyle}\r\n            name=\"appraisal_owner\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.kra_settings_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.assessment_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.assessment_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.assessment_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.assessment_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Success</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  Appraisal Updated Successfully\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"OK\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content\">\r\n                  Somthing went wrong. Please try again\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Go Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Update\"\r\n                allowDisabledFocus\r\n                onClick={handleUpdateApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            {/* <Dropdown\r\n              options={rolesOption}\r\n              onChange={handleRoles}\r\n              className=\"rolesDropDown\"\r\n              styles={dropdownStyles}\r\n              style={{ marginLeft: \"2rem\" }}\r\n            /> */}\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderUpdateForm()}</div>\r\n        <div className=\"right-container\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx",["201","202","203"],"import * as React from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IDividerAsProps,\r\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\r\nimport { IContextualMenuProps } from \"office-ui-fabric-react\";\r\nimport { TooltipHost } from \"office-ui-fabric-react/lib/Tooltip\";\r\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\r\nimport \"./Header.css\";\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"action01\",\r\n      text: \"Action 1\",\r\n      //   iconProps: { iconName: 'Mail' },\r\n    },\r\n    {\r\n      key: \"action02\",\r\n      text: \"Action 2\",\r\n      //   iconProps: { iconName: 'Calendar' },\r\n    },\r\n  ],\r\n};\r\nfunction _onBreadcrumbItemClicked(\r\n  ev?: React.MouseEvent<HTMLElement>,\r\n  item?: IBreadcrumbItem\r\n): void {\r\n  console.log(`Breadcrumb item with key \"${item?.key}\" has been clicked.`);\r\n}\r\nconst itemsWithHeading: IBreadcrumbItem[] = [\r\n  {\r\n    text: \"Performance\",\r\n    key: \"Files\",\r\n    onClick: _onBreadcrumbItemClicked,\r\n    href: \"\",\r\n  },\r\n  { text: \"Appraisal\", key: \"d1\", isCurrentItem: true },\r\n];\r\nfunction _getCustomOverflowIcon(): JSX.Element {\r\n  return <Icon iconName={\"ChevronDown\"} />;\r\n}\r\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\r\n  const tooltipText = dividerProps.item ? dividerProps.item.text : \"\";\r\n  return (\r\n    <TooltipHost\r\n      content={`Show ${tooltipText} contents`}\r\n      calloutProps={{ gapSpace: 0 }}\r\n    >\r\n      <span aria-hidden=\"true\" style={{ cursor: \"pointer\", padding: 5 }}>\r\n        /\r\n      </span>\r\n    </TooltipHost>\r\n  );\r\n}\r\n\r\nconst breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n  root: {\r\n    margin: \"0px\",\r\n    padding: \"0px\",\r\n    marginTop: \"-10px\",\r\n  },\r\n  itemLink: {\r\n    fontSize: \"22px\",\r\n  },\r\n};\r\n\r\nfunction Header(props: { item?: IBreadcrumbItem[]; styles: any }) {\r\n  // const _alertClicked = () => {\r\n  //   console.log(\"clicked==>\")\r\n  // }\r\n  // const horizontalStackProps: IStackProps = {\r\n  //     horizontal: true,\r\n  //     tokens: { childrenGap: 100, },\r\n  // };\r\n  // const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Breadcrumb\r\n        // items={itemsWithHeading}\r\n        items={props.item || []}\r\n        styles={props.styles}\r\n        maxDisplayedItems={5}\r\n        ariaLabel=\"With custom rendered divider and overflow icon\"\r\n        dividerAs={_getCustomDivider}\r\n        onRenderOverflowIcon={_getCustomOverflowIcon}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx",["204"],"import axios from \"axios\";\r\nimport accessToken from \"../../apiBase.json\";\r\n\r\nexport const addApprisal = (item: any) => {\r\n  return {\r\n    type: \"ADD_APPRISAL\",\r\n    payload: item,\r\n  };\r\n};\r\n\r\nexport const fetchAppraisalData = (\r\n  limit_start = 0,\r\n  limit_page_length = 10,\r\n  order_by = \"id asc\",\r\n  filters: any\r\n) => async (dispatch: any): Promise<any> => {\r\n  try {\r\n    dispatch({\r\n      type: \"FETCH_APPRAISAL_LIST_START\",\r\n    });\r\n    const response = await axios({\r\n      url: `http://52.146.0.154/api/resource/Appraisal`,\r\n      params: {\r\n        limit_start,\r\n        limit_page_length,\r\n        order_by,\r\n        filters,\r\n        fields: JSON.stringify([\r\n          \"name\",\r\n          \"id\",\r\n          \"appraisal_description\",\r\n          \"review_from\",\r\n          \"appraisal_to\",\r\n          \"review_frequency\",\r\n          \"type\",\r\n          \"format_type\",\r\n          \"format_type\",\r\n          \"appraisal_owner\",\r\n          \"kra_settings_tab_goals\",\r\n          \"kra_settings_tab_competencies\",\r\n          \"kra_settings_tab_development_plan\",\r\n          \"kra_settings_tab_summary\",\r\n          \"assessment_tab_goals\",\r\n          \"assessment_tab_competencies\",\r\n          \"assessment_tab_development_plan\",\r\n          \"assessment_tab_summary\",\r\n        ]),\r\n      },\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\r\n      },\r\n    });\r\n    const responseBody = await response.data;\r\n    // console.log(\"api response =>\", responseBody);\r\n    dispatch({\r\n      type: \"FETCH_APPRAISAL_LIST_SUCCESS\",\r\n      payload: responseBody,\r\n    });\r\n    return responseBody;\r\n  } catch (error) {\r\n    // console.log(\"error in getting data\", error);\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n};\r\n\r\nexport const fetchAppraisalDataById = async (\r\n  limit_start = 0,\r\n  limit_page_length = 10,\r\n  order_by = \"id asc\",\r\n  filters: any\r\n) => {\r\n  try {\r\n    const response = await axios({\r\n      url: `http://52.146.0.154/api/resource/Appraisal`,\r\n      params: {\r\n        limit_start,\r\n        limit_page_length,\r\n        order_by,\r\n        filters,\r\n        fields: JSON.stringify([\r\n          \"name\",\r\n          \"id\",\r\n          \"appraisal_description\",\r\n          \"review_from\",\r\n          \"appraisal_to\",\r\n          \"review_frequency\",\r\n          \"type\",\r\n          \"format_type\",\r\n          \"format_type\",\r\n          \"appraisal_owner\",\r\n          \"kra_settings_tab_goals\",\r\n          \"kra_settings_tab_competencies\",\r\n          \"kra_settings_tab_development_plan\",\r\n          \"kra_settings_tab_summary\",\r\n          \"assessment_tab_goals\",\r\n          \"assessment_tab_competencies\",\r\n          \"assessment_tab_development_plan\",\r\n          \"assessment_tab_summary\",\r\n        ]),\r\n      },\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\r\n      },\r\n    });\r\n    const responseBody = await response.data;\r\n    return responseBody;\r\n  } catch (error) {\r\n    // console.log(\"error in getting data\", error);\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n};\r\n\r\nexport const add_apprisal = async (data: any) => {\r\n  try {\r\n    const response = await axios({\r\n      url: `http://52.146.0.154/api/resource/Appraisal`,\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \"token 5ccbc7af363c163:b6060f97664d556\",\r\n      },\r\n      data: JSON.stringify(data),\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.log(\"error in catch block=>\", JSON.stringify(error));\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n};\r\n\r\nexport const edit_appraisal = async (data: any) => {\r\n  try {\r\n    const response = await axios({\r\n      url: `http://52.146.0.154/api/resource/Appraisal/${data.id}`,\r\n      method: \"put\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\r\n      },\r\n      data: JSON.stringify(data),\r\n    });\r\n    // console.log(\"api response ==>\", response)\r\n    return await response;\r\n  } catch (error) {\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n};\r\n\r\nexport const delete_appraisal = async (data: any) => {\r\n  try {\r\n    const response = await axios({\r\n      url: `http://52.146.0.154/api/resource/Appraisal/${data}`,\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, DELETE\",\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\r\n      },\r\n      data: JSON.stringify(data),\r\n    });\r\n    console.log(\"delete api response ==>\", response);\r\n    return await response;\r\n  } catch (error) {\r\n    return {\r\n      ...error,\r\n    };\r\n  }\r\n};\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\components\\WelcomeHeader\\index.tsx",["205","206","207"],"import * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport logo_ms from \"../../assets/img/logo_ms.png\";\r\nimport {\r\n  Dropdown,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  Link,\r\n} from \"office-ui-fabric-react\";\r\n\r\nimport \"./styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setRoleType } from \"../../redux/actions/roleType\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst rolesOption: IDropdownOption[] = [\r\n  { key: \"employee\", text: \"Employee\" },\r\n  { key: \"manager\", text: \"Manager\" },\r\n  { key: \"hrContact\", text: \"HR Contact\" },\r\n];\r\n\r\nfunction WelcomeHeader(props: { children: any }) {\r\n  const { children } = props;\r\n  const roleType = useSelector(\r\n    (state: RootState) => state.roleType.roleType\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  // console.log(\"role.text===>\", role.text);\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const handleRoles = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    dispatch(setRoleType(item?.text));\r\n  };\r\n\r\n  return (\r\n    <div className=\"welcome-header\">\r\n      <div style={{ display: \"flex\", }}>\r\n        {children}\r\n        <div>\r\n          <Dropdown\r\n            options={rolesOption}\r\n            onChange={handleRoles}\r\n            selectedKey={rolesOption.find(item => item.text === roleType)?.key}\r\n            className=\"rolesDropDown\"\r\n            styles={dropdownStyles}\r\n            style={{ marginLeft: \"2rem\", marginTop:\"10px\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div style={{ display: \"flex\", padding: \"10px\" }}>\r\n        <Link>Log Out</Link>\r\n        <img src={logo_ms} className=\"ms-logo\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WelcomeHeader;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\roleType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx",["208","209","210","211","212","213","214","215","216","217","218"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx",["219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx",["233","234","235","236","237","238","239","240","241","242","243","244","245","246"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx",["247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx",["263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","severity":1,"message":"286","line":189,"column":19,"nodeType":"287","messageId":"288","endLine":189,"endColumn":29},{"ruleId":"289","severity":1,"message":"290","line":200,"column":6,"nodeType":"291","endLine":200,"endColumn":25,"suggestions":"292"},{"ruleId":"293","severity":1,"message":"294","line":208,"column":39,"nodeType":"295","messageId":"296","endLine":208,"endColumn":41},{"ruleId":"293","severity":1,"message":"294","line":210,"column":34,"nodeType":"295","messageId":"296","endLine":210,"endColumn":36},{"ruleId":"293","severity":1,"message":"297","line":218,"column":13,"nodeType":"298","messageId":"299","endLine":218,"endColumn":20},{"ruleId":"293","severity":1,"message":"297","line":229,"column":11,"nodeType":"298","messageId":"299","endLine":229,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":237,"column":9,"nodeType":"302","endLine":237,"endColumn":33},{"ruleId":"300","severity":1,"message":"301","line":240,"column":9,"nodeType":"302","endLine":240,"endColumn":32},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"289","severity":1,"message":"304","line":58,"column":6,"nodeType":"291","endLine":58,"endColumn":8,"suggestions":"305"},{"ruleId":"285","severity":1,"message":"286","line":25,"column":19,"nodeType":"287","messageId":"288","endLine":25,"endColumn":29},{"ruleId":"285","severity":1,"message":"306","line":26,"column":23,"nodeType":"287","messageId":"288","endLine":26,"endColumn":36},{"ruleId":"285","severity":1,"message":"307","line":27,"column":17,"nodeType":"287","messageId":"288","endLine":27,"endColumn":25},{"ruleId":"285","severity":1,"message":"308","line":28,"column":10,"nodeType":"287","messageId":"288","endLine":28,"endColumn":14},{"ruleId":"285","severity":1,"message":"309","line":28,"column":16,"nodeType":"287","messageId":"288","endLine":28,"endColumn":23},{"ruleId":"285","severity":1,"message":"310","line":30,"column":27,"nodeType":"287","messageId":"288","endLine":30,"endColumn":45},{"ruleId":"285","severity":1,"message":"311","line":31,"column":10,"nodeType":"287","messageId":"288","endLine":31,"endColumn":20},{"ruleId":"285","severity":1,"message":"312","line":35,"column":25,"nodeType":"287","messageId":"288","endLine":35,"endColumn":34},{"ruleId":"285","severity":1,"message":"313","line":35,"column":49,"nodeType":"287","messageId":"288","endLine":35,"endColumn":54},{"ruleId":"285","severity":1,"message":"314","line":38,"column":10,"nodeType":"287","messageId":"288","endLine":38,"endColumn":21},{"ruleId":"285","severity":1,"message":"315","line":38,"column":23,"nodeType":"287","messageId":"288","endLine":38,"endColumn":38},{"ruleId":"289","severity":1,"message":"290","line":43,"column":6,"nodeType":"291","endLine":43,"endColumn":45,"suggestions":"316"},{"ruleId":"285","severity":1,"message":"317","line":45,"column":10,"nodeType":"287","messageId":"288","endLine":45,"endColumn":15},{"ruleId":"285","severity":1,"message":"318","line":50,"column":10,"nodeType":"287","messageId":"288","endLine":50,"endColumn":16},{"ruleId":"285","severity":1,"message":"319","line":55,"column":10,"nodeType":"287","messageId":"288","endLine":55,"endColumn":16},{"ruleId":"285","severity":1,"message":"320","line":63,"column":9,"nodeType":"287","messageId":"288","endLine":63,"endColumn":39},{"ruleId":"285","severity":1,"message":"321","line":108,"column":9,"nodeType":"287","messageId":"288","endLine":108,"endColumn":40},{"ruleId":"285","severity":1,"message":"322","line":120,"column":9,"nodeType":"287","messageId":"288","endLine":120,"endColumn":19},{"ruleId":"285","severity":1,"message":"323","line":244,"column":9,"nodeType":"287","messageId":"288","endLine":244,"endColumn":20},{"ruleId":"285","severity":1,"message":"324","line":256,"column":9,"nodeType":"287","messageId":"288","endLine":256,"endColumn":23},{"ruleId":"285","severity":1,"message":"325","line":67,"column":7,"nodeType":"287","messageId":"288","endLine":67,"endColumn":47},{"ruleId":"285","severity":1,"message":"325","line":114,"column":9,"nodeType":"287","messageId":"288","endLine":114,"endColumn":49},{"ruleId":"289","severity":1,"message":"326","line":140,"column":6,"nodeType":"291","endLine":140,"endColumn":8,"suggestions":"327"},{"ruleId":"285","severity":1,"message":"328","line":8,"column":3,"nodeType":"287","messageId":"288","endLine":8,"endColumn":8},{"ruleId":"285","severity":1,"message":"329","line":29,"column":8,"nodeType":"287","messageId":"288","endLine":29,"endColumn":18},{"ruleId":"285","severity":1,"message":"330","line":30,"column":8,"nodeType":"287","messageId":"288","endLine":30,"endColumn":25},{"ruleId":"285","severity":1,"message":"313","line":54,"column":10,"nodeType":"287","messageId":"288","endLine":54,"endColumn":15},{"ruleId":"285","severity":1,"message":"331","line":56,"column":19,"nodeType":"287","messageId":"288","endLine":56,"endColumn":29},{"ruleId":"285","severity":1,"message":"332","line":58,"column":10,"nodeType":"287","messageId":"288","endLine":58,"endColumn":19},{"ruleId":"289","severity":1,"message":"333","line":75,"column":6,"nodeType":"291","endLine":75,"endColumn":45,"suggestions":"334"},{"ruleId":"289","severity":1,"message":"333","line":93,"column":6,"nodeType":"291","endLine":93,"endColumn":45,"suggestions":"335"},{"ruleId":"289","severity":1,"message":"336","line":111,"column":6,"nodeType":"291","endLine":111,"endColumn":43,"suggestions":"337"},{"ruleId":"285","severity":1,"message":"325","line":55,"column":7,"nodeType":"287","messageId":"288","endLine":55,"endColumn":47},{"ruleId":"285","severity":1,"message":"338","line":71,"column":9,"nodeType":"287","messageId":"288","endLine":71,"endColumn":50},{"ruleId":"285","severity":1,"message":"339","line":365,"column":10,"nodeType":"287","messageId":"288","endLine":365,"endColumn":26},{"ruleId":"285","severity":1,"message":"340","line":366,"column":10,"nodeType":"287","messageId":"288","endLine":366,"endColumn":29},{"ruleId":"285","severity":1,"message":"341","line":366,"column":31,"nodeType":"287","messageId":"288","endLine":366,"endColumn":53},{"ruleId":"285","severity":1,"message":"310","line":54,"column":27,"nodeType":"287","messageId":"288","endLine":54,"endColumn":45},{"ruleId":"285","severity":1,"message":"313","line":62,"column":37,"nodeType":"287","messageId":"288","endLine":62,"endColumn":42},{"ruleId":"285","severity":1,"message":"342","line":64,"column":9,"nodeType":"287","messageId":"288","endLine":64,"endColumn":15},{"ruleId":"289","severity":1,"message":"343","line":100,"column":6,"nodeType":"291","endLine":107,"endColumn":4,"suggestions":"344"},{"ruleId":"285","severity":1,"message":"325","line":56,"column":7,"nodeType":"287","messageId":"288","endLine":56,"endColumn":47},{"ruleId":"289","severity":1,"message":"326","line":92,"column":6,"nodeType":"291","endLine":92,"endColumn":8,"suggestions":"345"},{"ruleId":"285","severity":1,"message":"346","line":171,"column":26,"nodeType":"287","messageId":"288","endLine":171,"endColumn":43},{"ruleId":"285","severity":1,"message":"347","line":182,"column":10,"nodeType":"287","messageId":"288","endLine":182,"endColumn":21},{"ruleId":"285","severity":1,"message":"348","line":209,"column":9,"nodeType":"287","messageId":"288","endLine":209,"endColumn":28},{"ruleId":"285","severity":1,"message":"349","line":13,"column":7,"nodeType":"287","messageId":"288","endLine":13,"endColumn":38},{"ruleId":"285","severity":1,"message":"350","line":33,"column":7,"nodeType":"287","messageId":"288","endLine":33,"endColumn":42},{"ruleId":"285","severity":1,"message":"351","line":59,"column":7,"nodeType":"287","messageId":"288","endLine":59,"endColumn":49},{"ruleId":"285","severity":1,"message":"352","line":2,"column":8,"nodeType":"287","messageId":"288","endLine":2,"endColumn":19},{"ruleId":"285","severity":1,"message":"353","line":2,"column":10,"nodeType":"287","messageId":"288","endLine":2,"endColumn":19},{"ruleId":"285","severity":1,"message":"354","line":2,"column":21,"nodeType":"287","messageId":"288","endLine":2,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":61,"column":9,"nodeType":"302","endLine":61,"endColumn":50},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"285","severity":1,"message":"355","line":7,"column":3,"nodeType":"287","messageId":"288","endLine":7,"endColumn":17},{"ruleId":"285","severity":1,"message":"356","line":39,"column":10,"nodeType":"287","messageId":"288","endLine":39,"endColumn":25},{"ruleId":"285","severity":1,"message":"357","line":39,"column":27,"nodeType":"287","messageId":"288","endLine":39,"endColumn":45},{"ruleId":"285","severity":1,"message":"358","line":40,"column":10,"nodeType":"287","messageId":"288","endLine":40,"endColumn":24},{"ruleId":"285","severity":1,"message":"359","line":40,"column":26,"nodeType":"287","messageId":"288","endLine":40,"endColumn":43},{"ruleId":"285","severity":1,"message":"360","line":46,"column":10,"nodeType":"287","messageId":"288","endLine":46,"endColumn":16},{"ruleId":"285","severity":1,"message":"361","line":47,"column":10,"nodeType":"287","messageId":"288","endLine":47,"endColumn":18},{"ruleId":"289","severity":1,"message":"304","line":61,"column":6,"nodeType":"291","endLine":61,"endColumn":8,"suggestions":"362"},{"ruleId":"285","severity":1,"message":"363","line":118,"column":9,"nodeType":"287","messageId":"288","endLine":118,"endColumn":23},{"ruleId":"285","severity":1,"message":"364","line":122,"column":9,"nodeType":"287","messageId":"288","endLine":122,"endColumn":25},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"285","severity":1,"message":"355","line":7,"column":3,"nodeType":"287","messageId":"288","endLine":7,"endColumn":17},{"ruleId":"285","severity":1,"message":"365","line":16,"column":3,"nodeType":"287","messageId":"288","endLine":16,"endColumn":13},{"ruleId":"285","severity":1,"message":"366","line":22,"column":3,"nodeType":"287","messageId":"288","endLine":22,"endColumn":8},{"ruleId":"285","severity":1,"message":"360","line":44,"column":10,"nodeType":"287","messageId":"288","endLine":44,"endColumn":16},{"ruleId":"285","severity":1,"message":"361","line":45,"column":10,"nodeType":"287","messageId":"288","endLine":45,"endColumn":18},{"ruleId":"289","severity":1,"message":"304","line":55,"column":6,"nodeType":"291","endLine":55,"endColumn":8,"suggestions":"367"},{"ruleId":"285","severity":1,"message":"368","line":58,"column":9,"nodeType":"287","messageId":"288","endLine":58,"endColumn":31},{"ruleId":"285","severity":1,"message":"369","line":59,"column":9,"nodeType":"287","messageId":"288","endLine":59,"endColumn":25},{"ruleId":"285","severity":1,"message":"370","line":70,"column":9,"nodeType":"287","messageId":"288","endLine":70,"endColumn":42},{"ruleId":"285","severity":1,"message":"371","line":159,"column":32,"nodeType":"287","messageId":"288","endLine":159,"endColumn":55},{"ruleId":"285","severity":1,"message":"372","line":160,"column":23,"nodeType":"287","messageId":"288","endLine":160,"endColumn":37},{"ruleId":"285","severity":1,"message":"373","line":161,"column":26,"nodeType":"287","messageId":"288","endLine":161,"endColumn":43},{"ruleId":"285","severity":1,"message":"374","line":162,"column":32,"nodeType":"287","messageId":"288","endLine":162,"endColumn":55},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"285","severity":1,"message":"355","line":7,"column":3,"nodeType":"287","messageId":"288","endLine":7,"endColumn":17},{"ruleId":"285","severity":1,"message":"375","line":8,"column":3,"nodeType":"287","messageId":"288","endLine":8,"endColumn":18},{"ruleId":"285","severity":1,"message":"376","line":12,"column":3,"nodeType":"287","messageId":"288","endLine":12,"endColumn":13},{"ruleId":"285","severity":1,"message":"377","line":30,"column":8,"nodeType":"287","messageId":"288","endLine":30,"endColumn":14},{"ruleId":"285","severity":1,"message":"378","line":45,"column":9,"nodeType":"287","messageId":"288","endLine":45,"endColumn":17},{"ruleId":"285","severity":1,"message":"331","line":48,"column":19,"nodeType":"287","messageId":"288","endLine":48,"endColumn":29},{"ruleId":"285","severity":1,"message":"360","line":61,"column":10,"nodeType":"287","messageId":"288","endLine":61,"endColumn":16},{"ruleId":"285","severity":1,"message":"361","line":62,"column":10,"nodeType":"287","messageId":"288","endLine":62,"endColumn":18},{"ruleId":"289","severity":1,"message":"379","line":81,"column":6,"nodeType":"291","endLine":81,"endColumn":8,"suggestions":"380"},{"ruleId":"285","severity":1,"message":"381","line":106,"column":9,"nodeType":"287","messageId":"288","endLine":106,"endColumn":52},{"ruleId":"285","severity":1,"message":"382","line":120,"column":9,"nodeType":"287","messageId":"288","endLine":120,"endColumn":21},{"ruleId":"285","severity":1,"message":"363","line":138,"column":9,"nodeType":"287","messageId":"288","endLine":138,"endColumn":23},{"ruleId":"285","severity":1,"message":"364","line":142,"column":9,"nodeType":"287","messageId":"288","endLine":142,"endColumn":25},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"285","severity":1,"message":"378","line":40,"column":9,"nodeType":"287","messageId":"288","endLine":40,"endColumn":17},{"ruleId":"285","severity":1,"message":"331","line":43,"column":19,"nodeType":"287","messageId":"288","endLine":43,"endColumn":29},{"ruleId":"285","severity":1,"message":"383","line":47,"column":10,"nodeType":"287","messageId":"288","endLine":47,"endColumn":18},{"ruleId":"285","severity":1,"message":"384","line":47,"column":20,"nodeType":"287","messageId":"288","endLine":47,"endColumn":31},{"ruleId":"289","severity":1,"message":"379","line":64,"column":6,"nodeType":"291","endLine":64,"endColumn":8,"suggestions":"385"},{"ruleId":"285","severity":1,"message":"381","line":89,"column":9,"nodeType":"287","messageId":"288","endLine":89,"endColumn":52},{"ruleId":"285","severity":1,"message":"382","line":103,"column":9,"nodeType":"287","messageId":"288","endLine":103,"endColumn":21},{"ruleId":"285","severity":1,"message":"386","line":159,"column":23,"nodeType":"287","messageId":"288","endLine":159,"endColumn":37},{"ruleId":"285","severity":1,"message":"387","line":160,"column":22,"nodeType":"287","messageId":"288","endLine":160,"endColumn":35},{"ruleId":"285","severity":1,"message":"388","line":161,"column":26,"nodeType":"287","messageId":"288","endLine":161,"endColumn":43},{"ruleId":"285","severity":1,"message":"389","line":162,"column":25,"nodeType":"287","messageId":"288","endLine":162,"endColumn":41},{"ruleId":"285","severity":1,"message":"390","line":163,"column":27,"nodeType":"287","messageId":"288","endLine":163,"endColumn":45},{"ruleId":"285","severity":1,"message":"391","line":164,"column":21,"nodeType":"287","messageId":"288","endLine":164,"endColumn":33},{"ruleId":"285","severity":1,"message":"392","line":166,"column":10,"nodeType":"287","messageId":"288","endLine":166,"endColumn":18},{"ruleId":"285","severity":1,"message":"393","line":171,"column":9,"nodeType":"287","messageId":"288","endLine":171,"endColumn":25},{"ruleId":"285","severity":1,"message":"394","line":2,"column":19,"nodeType":"287","messageId":"288","endLine":2,"endColumn":30},{"ruleId":"285","severity":1,"message":"303","line":2,"column":32,"nodeType":"287","messageId":"288","endLine":2,"endColumn":43},{"ruleId":"285","severity":1,"message":"395","line":6,"column":10,"nodeType":"287","messageId":"288","endLine":6,"endColumn":19},{"ruleId":"285","severity":1,"message":"396","line":9,"column":3,"nodeType":"287","messageId":"288","endLine":9,"endColumn":11},{"ruleId":"285","severity":1,"message":"365","line":12,"column":3,"nodeType":"287","messageId":"288","endLine":12,"endColumn":13},{"ruleId":"285","severity":1,"message":"397","line":13,"column":3,"nodeType":"287","messageId":"288","endLine":13,"endColumn":20},{"ruleId":"285","severity":1,"message":"398","line":15,"column":3,"nodeType":"287","messageId":"288","endLine":15,"endColumn":13},{"ruleId":"285","severity":1,"message":"399","line":16,"column":3,"nodeType":"287","messageId":"288","endLine":16,"endColumn":15},{"ruleId":"285","severity":1,"message":"400","line":18,"column":3,"nodeType":"287","messageId":"288","endLine":18,"endColumn":17},{"ruleId":"285","severity":1,"message":"366","line":19,"column":3,"nodeType":"287","messageId":"288","endLine":19,"endColumn":8},{"ruleId":"285","severity":1,"message":"331","line":43,"column":19,"nodeType":"287","messageId":"288","endLine":43,"endColumn":29},{"ruleId":"289","severity":1,"message":"379","line":61,"column":6,"nodeType":"291","endLine":61,"endColumn":8,"suggestions":"401"},{"ruleId":"285","severity":1,"message":"386","line":118,"column":23,"nodeType":"287","messageId":"288","endLine":118,"endColumn":37},{"ruleId":"285","severity":1,"message":"387","line":119,"column":22,"nodeType":"287","messageId":"288","endLine":119,"endColumn":35},{"ruleId":"285","severity":1,"message":"388","line":120,"column":26,"nodeType":"287","messageId":"288","endLine":120,"endColumn":43},{"ruleId":"285","severity":1,"message":"389","line":121,"column":25,"nodeType":"287","messageId":"288","endLine":121,"endColumn":41},{"ruleId":"285","severity":1,"message":"390","line":122,"column":27,"nodeType":"287","messageId":"288","endLine":122,"endColumn":45},{"ruleId":"285","severity":1,"message":"391","line":123,"column":21,"nodeType":"287","messageId":"288","endLine":123,"endColumn":33},"no-native-reassign",["402"],"no-negated-in-lhs",["403"],"@typescript-eslint/no-unused-vars","'setDoctype' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["404"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["405"],"'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'count' is assigned a value but never used.","'employeData' is assigned a value but never used.","'setEmployeeData' is assigned a value but never used.",["406"],"'roles' is assigned a value but never used.","'period' is assigned a value but never used.","'status' is assigned a value but never used.","'rolesOption' is assigned a value but never used.","'periodOption' is assigned a value but never used.","'operations' is assigned a value but never used.","'handleRoles' is assigned a value but never used.","'onChangePeriod' is assigned a value but never used.","'dropdownStyles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["407"],"'Label' is defined but never used.","'jobHistory' is defined but never used.","'JobHistoryDetails' is defined but never used.","'setOrderBy' is assigned a value but never used.","'goalCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filtersById'. Either include it or remove the dependency array.",["408"],["409"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["410"],"'textfelidStyle' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["411"],["412"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'menuProps' is assigned a value but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'accessToken' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'add_JobHistory' is defined but never used.","'employeeDetails' is assigned a value but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.",["413"],"'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'IconButton' is defined but never used.","'Modal' is defined but never used.",["414"],"'cancelIcon' is assigned a value but never used.","'iconButtonStyles' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'setErrMsgResponsibility' is assigned a value but never used.","'setErrMsgPlace' is assigned a value but never used.","'setErrMsgPosition' is assigned a value but never used.","'setErrMsgQualifications' is assigned a value but never used.","'fetchJobHistory' is defined but never used.","'DatePicker' is defined but never used.","'moment' is defined but never used.","'roleType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["415"],"'datePickerStyle' is assigned a value but never used.","'controlClass' is assigned a value but never used.","'goalData' is assigned a value but never used.","'setGoalData' is assigned a value but never used.",["416"],"'setErrMsgOrder' is assigned a value but never used.","'setErrMsgGoal' is assigned a value but never used.","'setErrMsgGoalType' is assigned a value but never used.","'setErrMsgMeasure' is assigned a value but never used.","'setErrMsgWeightage' is assigned a value but never used.","'setErrMsgKra' is assigned a value but never used.","'goalType' is assigned a value but never used.","'onChangeGoalType' is assigned a value but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","'getTheme' is defined but never used.","'IDatePickerStyles' is defined but never used.","'IIconProps' is defined but never used.","'IModalStyles' is defined but never used.","'mergeStyleSets' is defined but never used.",["417"],"no-global-assign","no-unsafe-negation",{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"424","fix":"434"},{"desc":"420","fix":"435"},{"desc":"420","fix":"436"},{"desc":"437","fix":"438"},{"desc":"437","fix":"439"},{"desc":"437","fix":"440"},"Update the dependencies array to be: [dispatch, doctype, roleType]",{"range":"441","text":"442"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"443","text":"444"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, dispatch]",{"range":"445","text":"446"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"447","text":"448"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById]",{"range":"449","text":"450"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, filtersById]",{"range":"451","text":"452"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"453","text":"454"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, dispatch, orderByField]",{"range":"455","text":"456"},{"range":"457","text":"448"},{"range":"458","text":"444"},{"range":"459","text":"444"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"460","text":"461"},{"range":"462","text":"461"},{"range":"463","text":"461"},[5161,5180],"[dispatch, doctype, roleType]",[1738,1740],"[filtersById, roleType]",[1607,1646],"[doctype, limit_start, limit, roleType, dispatch]",[3447,3449],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[2641,2680],"[doctype, limit_start, limit, roleType, filtersById]",[3161,3200],"[roleType, limitStart, limitPageLength, filtersById]",[3682,3719],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[3269,3399],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, dispatch, orderByField]",[2503,2505],[1896,1898],[1597,1599],[2293,2295],"[filtersById, limitPageLength, limit_start, orderBy]",[1879,1881],[1638,1640]]