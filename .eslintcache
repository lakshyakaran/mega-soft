[{"/home/pratik/Documents/mega-soft/src/index.tsx":"1","/home/pratik/Documents/mega-soft/src/reportWebVitals.ts":"2","/home/pratik/Documents/mega-soft/src/App.tsx":"3","/home/pratik/Documents/mega-soft/src/redux/index.tsx":"4","/home/pratik/Documents/mega-soft/src/Navigation.tsx":"5","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx":"6","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx":"7","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx":"8","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx":"9","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx":"10","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx":"11","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx":"12","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx":"13","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx":"14","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx":"15","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx":"16","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx":"17","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx":"18","/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx":"19","/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx":"20","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx":"21","/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx":"22","/home/pratik/Documents/mega-soft/src/Header.tsx":"23","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx":"24","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx":"25","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx":"26","/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx":"27","/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx":"28","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx":"29","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx":"30","/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx":"31","/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx":"32","/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx":"33","/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx":"34","/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx":"35","/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx":"36","/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx":"37","/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx":"38","/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx":"39"},{"size":615,"mtime":1610818112350,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":1610466480732,"results":"42","hashOfConfig":"41"},{"size":4416,"mtime":1612699609055,"results":"43","hashOfConfig":"41"},{"size":205,"mtime":1611071583172,"results":"44","hashOfConfig":"41"},{"size":6912,"mtime":1612594486255,"results":"45","hashOfConfig":"41"},{"size":21807,"mtime":1612700878174,"results":"46","hashOfConfig":"41"},{"size":19687,"mtime":1612701010737,"results":"47","hashOfConfig":"41"},{"size":12541,"mtime":1612700912591,"results":"48","hashOfConfig":"41"},{"size":11982,"mtime":1612700974388,"results":"49","hashOfConfig":"41"},{"size":26660,"mtime":1612700929143,"results":"50","hashOfConfig":"41"},{"size":12173,"mtime":1612700987117,"results":"51","hashOfConfig":"41"},{"size":12731,"mtime":1612701030542,"results":"52","hashOfConfig":"41"},{"size":8856,"mtime":1612700998253,"results":"53","hashOfConfig":"41"},{"size":14593,"mtime":1612700849925,"results":"54","hashOfConfig":"41"},{"size":13868,"mtime":1612701676156,"results":"55","hashOfConfig":"41"},{"size":9269,"mtime":1612700951408,"results":"56","hashOfConfig":"41"},{"size":2700,"mtime":1612698693842,"results":"57","hashOfConfig":"41"},{"size":24793,"mtime":1612702371535,"results":"58","hashOfConfig":"41"},{"size":11903,"mtime":1612594486255,"results":"59","hashOfConfig":"41"},{"size":1431,"mtime":1612594486323,"results":"60","hashOfConfig":"41"},{"size":550,"mtime":1612371881774,"results":"61","hashOfConfig":"41"},{"size":18029,"mtime":1612594486315,"results":"62","hashOfConfig":"41"},{"size":2453,"mtime":1611762788465,"results":"63","hashOfConfig":"41"},{"size":4904,"mtime":1612632446889,"results":"64","hashOfConfig":"41"},{"size":1890,"mtime":1612194106806,"results":"65","hashOfConfig":"41"},{"size":2756,"mtime":1612284026335,"results":"66","hashOfConfig":"41"},{"size":2935,"mtime":1612371881774,"results":"67","hashOfConfig":"41"},{"size":895,"mtime":1612371881774,"results":"68","hashOfConfig":"41"},{"size":1138,"mtime":1612699564390,"results":"69","hashOfConfig":"41"},{"size":2826,"mtime":1612594486319,"results":"70","hashOfConfig":"41"},{"size":4696,"mtime":1612594486255,"results":"71","hashOfConfig":"41"},{"size":584,"mtime":1612372890972,"results":"72","hashOfConfig":"41"},{"size":750,"mtime":1611997864766,"results":"73","hashOfConfig":"41"},{"size":434,"mtime":1612083638780,"results":"74","hashOfConfig":"41"},{"size":419,"mtime":1611848900136,"results":"75","hashOfConfig":"41"},{"size":772,"mtime":1611848900136,"results":"76","hashOfConfig":"41"},{"size":442,"mtime":1611848900136,"results":"77","hashOfConfig":"41"},{"size":831,"mtime":1611767967117,"results":"78","hashOfConfig":"41"},{"size":793,"mtime":1610987455768,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1fk01iq",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160","usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/home/pratik/Documents/mega-soft/src/index.tsx",[],["180","181"],"/home/pratik/Documents/mega-soft/src/reportWebVitals.ts",[],"/home/pratik/Documents/mega-soft/src/App.tsx",["182","183","184","185","186"],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\nimport Appraisal from \"./Views/Appraisal\";\nimport AddAppraisal from \"./Views/AddAppraisal\";\nimport UpdateAppraisal from \"./Views/UpdateAppraisal\";\nimport AppraisalDetail from \"./Views/AppraisalDetail\";\nimport GoalSetting from \"./Views/GoalSetting\";\nimport EmployeeDetails from \"./Views/EmployeeDetails\";\nimport JobHistory from \"./Views/JobHistory\";\nimport UpdateJobHistory from \"./Views/UpdateJobHistory\";\nimport JobHistoryDetails from \"./Views/JobHistoryDetails\";\nimport AddGoals from \"./Views/AddGoals\";\nimport UpdateGoals from \"./Views/UpdateGoals\";\nimport GoalDetails from \"./Views/GoalDetails\";\nimport Login from \"./Views/Login\";\n\nimport { validateLogin, login } from \"./redux/actions/auth\";\n\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\n\nconst getQueryParms = (variable: string) => {\n        var query = window.location.search.substring(1);\n        console.log(query)//\"app=article&act=news_content&aid=160990\"\n        var vars = query.split(\"&\");\n        console.log(vars) //[ 'app=article', 'act=news_content', 'aid=160990' ]\n        for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    console.log(pair)//[ 'app', 'article' ][ 'act', 'news_content' ][ 'aid', '160990' ] \n        if(pair[0] == variable){return pair[1];}\n         }\n         return(false);\n}\n\nfunction App(props: any) {\n  // console.log(\"props==>\", props.Auth.isLoggedIn);\n  const dispatch = useDispatch();\n  const auth = useSelector((state: RootState) => state.Auth);\n\n  useEffect(() => {\n    dispatch(validateLogin());\n  }, []);\n\n  useEffect(() => {\n    const stateValue = getQueryParms(\"state\")\n    const sessionStateValue = getQueryParms(\"session_state\")\n    if(stateValue && sessionStateValue) {\n      dispatch(login(sessionStateValue, stateValue))\n    }\n  }, [])\n\n  if (auth.isLoading) {\n    return null;\n  }\n\n  return (\n    <BrowserRouter>\n      {auth.isLoggedIn == true ? (\n      <Switch>\n        <div className=\"page-wrapper\">\n          <Navigation />\n          {/* <Route exact path=\"/\" component={Login} /> */}\n          <Route exact path=\"/home\" component={Appraisal} />\n          <Route exact path=\"/addApprisal\" component={AddAppraisal} />\n          {/* <Route exact path=\"/appraisal/add\" component={Form} /> */}\n          <Route\n            exact\n            path=\"/appraisal/update/:appraisalId\"\n            component={UpdateAppraisal}\n          />\n          <Route\n            exact\n            path=\"/appraisal/view/:appraisalId\"\n            component={AppraisalDetail}\n          />\n          <Route exact path=\"/appraisal/goalsetting\" component={GoalSetting} />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/:employeeId/:appraisalId\"\n            component={EmployeeDetails}\n          />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/jobhistory/updateJobHistory/:name\"\n            component={UpdateJobHistory}\n          />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/:name\"\n            component={JobHistoryDetails}\n          />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/jobhistory/:employeeId/:appraisalId\"\n            component={JobHistory}\n          />\n\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/addgoal/:employeeId/:appraisalId\"\n            component={AddGoals}\n          />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/goals/updategoal/:name\"\n            component={UpdateGoals}\n          />\n          <Route\n            exact\n            path=\"/appraisal/goalsetting/view/goal/goaldetail/:name\"\n            component={GoalDetails}\n          />\n          <Route path=\"/*\" render={() => <Redirect to=\"/home\" />} />\n          <Route path=\"/appraisal/goalsetting*\" render={() => <Redirect to=\"/appraisal/goalsetting\" />} />\n        </div>\n      </Switch>\n      ) : (\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/*\" render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      )}\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/home/pratik/Documents/mega-soft/src/redux/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Navigation.tsx",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import * as React from \"react\";\nimport {\n  Nav,\n  INavLink,\n  INavStyles,\n  INavLinkGroup,\n} from \"office-ui-fabric-react/lib/Nav\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { useHistory, matchPath } from \"react-router-dom\";\n\nimport hrms_logo from \"./assets/img/hrms_logo.gif\";\nimport logo_nuage from \"./assets/img/logo_nuage.png\";\nimport {\n  fetchNavigationBar,\n  sideNavigationData,\n} from \"./redux/actions/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport SideNavigation from \"./SideNavigation\";\nimport MainHeader from \"./SideNavigation/MainHeader\";\n\ninitializeIcons();\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Appraisal\",\n        url: \"\",\n        key: \"key01\",\n        // icon: \"UpgradeAnalysis\",\n        links: [\n          {\n            name: \"Setup\",\n            url: \"/\",\n            icon: \"Settings\",\n            key: \"key02\",\n          },\n          // {\n          //   name: \"Ratings\",\n          //   url: \"/apprisal/rating\",\n          //   icon: \"6PointStar\",\n          //   key: \"key03\",\n          // },\n          // {\n          //   name: \"Periods\",\n          //   url: \"/apprisal/periods\",\n          //   icon: \"Timer\",\n          //   key: \"key04\",\n          // },\n          {\n            name: \"Goal Setting\",\n            url: \"/appraisal/goalsetting\",\n            icon: \"6PointStar\",\n            key: \"key05\",\n          },\n          // {\n          //   name: \"Self Assessment\",\n          //   url: \"\",\n          //   icon: \"6PointStar\",\n          //   key: \"key06\",\n          // },\n          // {\n          //   name: \"Development Plan\",\n          //   url: \"/apprisal/developmentPlan\",\n          //   icon: \"TestPlan\",\n          //   key: \"key07\",\n          // },\n          // {\n          //   name: \"Release Appraisal\",\n          //   url: \"/apprisal/releaseApprisal\",\n          //   icon: \"ReleaseGate\",\n          //   key: \"key08\",\n          // },\n          // {\n          //   name: \"Market Bench Marketing\",\n          //   url: \"/apprisal/marketBenchMarketing\",\n          //   icon: \"Market\",\n          //   key: \"key09\",\n          // },\n        ],\n        isExpanded: true,\n      },\n      {\n        name: \"Manage\",\n        url: \"\",\n        key: \"key10\",\n        // icon:'MedicationAdmin',\n        links: [\n          {\n            name: \"Team Goal Setting\",\n            url: \"/manage/teamGoalSetting\",\n            icon: \"Settings\",\n            key: \"key11\",\n          },\n          {\n            name: \"Team assess\",\n            url: \"/manage/teamAssess\",\n            icon: \"AssessmentGroup\",\n            key: \"key12\",\n          },\n        ],\n        isExpanded: false,\n      },\n      {\n        name: \"Confirmation\",\n        url: \"\",\n        key: \"key13\",\n        expandAriaLabel: \"Expand Admin section\",\n        collapseAriaLabel: \"Collapse admin section\",\n        links: [\n          {\n            name: \"Confirmation Status\",\n            url: \"/confirmation/status\",\n            icon: \"SplitObject\",\n            key: \"key14\",\n          },\n          {\n            name: \"Release\",\n            url: \"/confirmation/release\",\n            key: \"key15\",\n            icon: \"ReleaseGate\",\n          },\n          {\n            name: \"Approval\",\n            url: \"/confirmation/approval\",\n            key: \"key16\",\n            icon: \"DocumentApproval\",\n          },\n          {\n            name: \"Letter\",\n            url: \"/confirmation/letter\",\n            key: \"key17\",\n            icon: \"DietPlanNotebook\",\n          },\n          {\n            name: \"Probation Letter\",\n            url: \"/confirmation/probationLetter\",\n            key: \"key18\",\n            icon: \"QuickNote\",\n          },\n        ],\n        isExpanded: false,\n      },\n    ],\n  },\n];\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    // overflowY: \"auto\",\n    // width: 208,\n    height: \"100%\",\n  },\n  link: {\n    width: \"200px\",\n  },\n  linkText: {\n    color: \"#FFF\",\n    // fontSize: 12,\n    selectors: {\n      \"&:hover\": {\n        color: \"#FFF\",\n      },\n    },\n  },\n  chevronIcon: {\n    color: \"#FFF\",\n  },\n  compositeLink: {\n    selectors: {\n      \"&.is-selected\": {\n        background: \"#29416f\",\n      },\n      \"&:hover\": {\n        \".ms-Button\": {\n          background: \"#29416f\",\n        },\n        \".ms-Nav-linkText\": {\n          // color: \"#FFF\", // your real styling here\n        },\n        \".ms-Icon\": {\n          color: \"#FFF\",\n        },\n      },\n    },\n  },\n};\n\nfunction Navigation() {\n  // const { children } = props;\n  const dispatch = useDispatch();\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [navData, setNavData]: any = useState();\n  // console.log(\"navData?????=>\", navData);\n\n  const navigation = useSelector(\n    (state: RootState) => state.navigationData.navigationData\n  );\n  // console.log(\"navigation data=>\", navigation.links);\n\n  useEffect((): void => {\n    dispatch(fetchNavigationBar(doctype, roleType ? roleType : \"Employee\"));\n  }, [doctype, roleType]);\n\n  // useEffect((): void => {\n  //   sideNavigationData(doctype).then((response) => {\n  //     console.log(\"side nav response\", response.message);\n  //     setNavData(response.message);\n  //   });\n  // }, [doctype]);\n\n  let history = useHistory();\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\n    setSelectedNavKey(item?.key || \"\");\n  };\n  React.useEffect(() => {\n    navLinkGroups[0].links.map((item) => {\n      if (item.links) {\n        item.links.map((subItem) => {\n          if (\n            matchPath(history.location.pathname, {\n              path: subItem.url,\n              exact: true,\n            })\n          ) {\n            setSelectedNavKey(subItem?.key || \"\");\n            return;\n          }\n        });\n      } else {\n        if (\n          matchPath(history.location.pathname, {\n            path: item.url,\n            exact: true,\n          })\n        ) {\n          setSelectedNavKey(item?.key || \"\");\n          return;\n        }\n      }\n    });\n  }, [history.location.pathname]);\n  return (\n    <div id=\"main-wrapper\">\n      <MainHeader />\n      <div className=\"sidebar left-sidebar\">\n        {/* <div className=\"main-logo\">\n          <img src={logo_nuage} />\n        </div> */}\n        <div className=\"footer-logo\">\n          <img src={hrms_logo} />\n        </div>\n        {/* <Nav\n          onLinkClick={onLinkClick}\n          selectedKey={selectedNavKey}\n          ariaLabel=\"Nav basic example\"\n          styles={navStyles}\n          groups={navigation.links}\n        /> */}\n        <SideNavigation />\n        {/* <div dangerouslySetInnerHTML={{ __html: navData }} /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;\n","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx",["203","204","205","206","207","208","209","210","211","212","213"],"import React, { useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\n// interface ParamTypes {\n//   id: string\n// }\n\nfunction AddAppraisal(props: any) {\n  // const params = useParams<ParamTypes>();\n  // console.log(\"id => \", params.id);\n  const stackTokens = { childrenGap: 10 };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      borderRadius: \"10px\",\n      \".ms-TextField-wrapper\": {\n        // borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        // borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    icon: {\n      color: \"#344f84\",\n    },\n  };\n\n  const [claimsData, setClaimsData] = useState({\n    id: \"\",\n    description: \"\",\n    owner: \"\",\n    kraSettingGoal: false,\n    kraSettingCompetencies: false,\n    kraSettingDevelopmentPlan: false,\n    kraSettingSummary: false,\n    assessmentGoal: false,\n    assessmentCompetencies: false,\n    assessmentDevelopmentPlan: false,\n    assessmentSummary: false,\n  });\n\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeType = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setSelectedType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n  // console.log(\"type==>\", selectedType.text )\n\n  const onChangeReviewFrequency = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setReviewFrequency(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Add Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n\n  const [dateReview, setDateReview] = useState<Date | undefined>();\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\n\n  const reviewFromDate = (date: Date | null | undefined): void => {\n    setDateReview(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const appraisalToDate = (date: Date | null | undefined): void => {\n    setdDateAppraisal(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // // const rolesOption: IDropdownOption[] = [\n  // //   { key: \"employee\", text: \"Employee\" },\n  // //   { key: \"manager\", text: \"Manager\" },\n  // //   { key: \"hrContent\", text: \"HR content\" },\n  // // ];\n\n  // const [roles, setRoles] = useState<IDropdownOption>({\n  //   key: \"employee\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setRoles(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\n  const [errMsgType, setErrMsgType] = useState(\"\");\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleAddApprisal = () => {\n    if (claimsData.id === \"\") {\n      setErrMsg(\"ID is required\");\n    }\n    if (claimsData.description === \"\") {\n      setErrMsgDescription(\"Description is required\");\n    }\n    if (claimsData.owner === \"\") {\n      setErrMsgOwner(\"Owner is required\");\n    }\n    if (formateType.text === \"\") {\n      setErrMsgFormatType(\"Select format Type\");\n    }\n    if (reviewFrequency.text === \"\") {\n      setErrMsgReviewFrequency(\"Select review Frequency\");\n    }\n    if (selectedType.text === \"\") {\n      setErrMsgType(\"Select type\");\n    }\n    if (dateReview === null) {\n      setErrMsgReviewDate(\"Select review date\");\n    }\n    const addQuery = {\n      id: claimsData.id,\n      appraisal_description: claimsData.description,\n      description: \"22\",\n      format_type: formateType.text,\n      review_frequency: reviewFrequency.text,\n      type: selectedType.text,\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\n      assessment_tab_goals: claimsData.assessmentGoal,\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\n      assessment_tab_summary: claimsData.assessmentSummary,\n      route: \"appraisal/BB00002\",\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\n      appraisal_owner: claimsData.owner,\n    };\n    // console.log(\"addQueary=>\", addQuery);\n    add_apprisal(addQuery).then((response) => {\n      console.log(\"response=>\", response.data);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n        // history.push(\"/home\");\n      } else {\n        // console.log(\"failed==>\", failedModal);\n        setFailedModal(true);\n      }\n\n      // else {\n      //   console.log(\"then error msg btnClick==>\", response);\n      // }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              required\n              placeholder=\"ID\"\n              value={claimsData.id}\n              errorMessage={errMsg}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={claimsData.description}\n              errorMessage={errMsgDescription}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              isRequired={true}\n              label=\"Review From\"\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={dateReview}\n              onSelectDate={reviewFromDate}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"Appraisal To\"\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeekAppraisal}\n              strings={DayPickerStringsAppraisal}\n              onSelectDate={appraisalToDate}\n              styles={datePickerStyle}\n              value={dateAppraisal}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgReviewFrequency}\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              onChange={onChangeReviewFrequency}\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            required\n            label=\"Type\"\n            errorMessage={errMsgType}\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            onChange={onChangeType}\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            required\n            label=\"Format Type\"\n            errorMessage={errMsgFormatType}\n            className=\"type-input\"\n            onChange={onChangeFormateType}\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            required\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={claimsData.owner}\n            // styles={textfelidStyle}\n            errorMessage={errMsgOwner}\n            name=\"owner\"\n            onChange={onChangeInput}\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={claimsData.kraSettingCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={claimsData.kraSettingGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={claimsData.kraSettingDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingDevelopmentPlan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.kraSettingSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={claimsData.assessmentGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={claimsData.assessmentCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={claimsData.assessmentDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.assessmentSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setSuccessModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal Added Successfully\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">\n                  Somthing went wrong. Please try again\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add Appraisal\"\n                allowDisabledFocus\n                onClick={handleAddApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(AddAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx",["214","215","216","217","218","219","220","221","222","223","224"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { useParams } from \"react-router-dom\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nfunction UpdateAppraisal(props: any) {\n  const params = useParams<ParamTypes>();\n  const stackTokens = { childrenGap: 10 };\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [updateData, setUpdateData]: any = useState({});\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setUpdateData(response.data[0]);\n    });\n  }, []);\n\n  // console.log(\"upadetdata==>\", updateData);\n\n  // const appraisalList = useSelector((state: RootState) => state.appraisal.appraisalList) || [];\n  //   const updateData = appraisalList.find(item => item.id === params.appraisalId);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      \".ms-TextField-wrapper\": {\n        borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   marginRight: \"10px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n\n  // const [dateReview, setDateReview] = useState<Date | null | undefined>(\n  //   new Date(updateData.review_from)\n  // );\n  // const [dateAppraisal, setdDateAppraisal] = useState<Date | null | undefined>(\n  //   new Date(updateData.appraisal_to)\n  // );\n\n  // const reviewFromDate = (date: Date | null | undefined): void => {\n  //   const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setDateReview(reviewFrequencyDate);\n  // };\n  // const appraisalToDate = (date: Date | null | undefined): void => {\n  //   const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setdDateAppraisal(appraisalDate);\n  // };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // const rolesOption: IDropdownOption[] = [\n  //   { key: \"key1\", text: \"HR\" },\n  //   { key: \"key2\", text: \"Manager\" },\n  //   { key: \"key3\", text: \"Employee\" },\n  // ];\n\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n  //   key: \"\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setReviewSearch(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleUpdateApprisal = () => {\n    const updateQuery = {\n      ...updateData,\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\n      description: \"22\",\n      route: \"appraisal/BB00002\",\n    };\n    // console.log(\"updateQuery=>\", updateQuery);\n    edit_appraisal(updateQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderUpdateForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              disabled\n              placeholder=\"ID\"\n              value={updateData.id}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={updateData.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              isRequired\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={new Date(updateData.review_from)}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, review_from: date })\n              }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired\n              label=\"Appraisal To\"\n              value={new Date(updateData.appraisal_to)}\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, appraisal_to: date })\n              }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === updateData.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, review_frequency: item?.text })\n              }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            required\n            selectedKey={\n              typeOptions.find((item) => item.text === updateData.type)?.key\n            }\n            label=\"Type\"\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            onChange={(ev, item) =>\n              setUpdateData({ ...updateData, type: item?.text })\n            }\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            required\n            selectedKey={\n              formateTypeOptions.find(\n                (item) => item.text === updateData.format_type\n              )?.key\n            }\n            label=\"Format Type\"\n            className=\"type-input\"\n            onChange={(ev, item) =>\n              setUpdateData({ ...updateData, format_type: item?.text })\n            }\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            required\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={updateData.appraisal_owner}\n            styles={textfelidStyle}\n            name=\"appraisal_owner\"\n            onChange={onChangeInput}\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={updateData.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={updateData.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.kra_settings_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.assessment_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={updateData.assessment_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={updateData.assessment_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.assessment_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal Updated Successfully\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">\n                  Somthing went wrong. Please try again\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            \n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderUpdateForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(UpdateAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx",["225","226","227","228","229","230","231","232","233"],"import {\n  Checkbox,\n  DatePicker,\n  Dropdown,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  ITextFieldStyles,\n  Label,\n  mergeStyleSets,\n  PrimaryButton,\n  Separator,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nconst stackTokens = { childrenGap: 10 };\n\nconst textfelidStyle: Partial<ITextFieldStyles> = {\n  root: {\n    \".ms-TextField-wrapper\": {\n      borderRadius: \"10px\",\n    },\n\n    \".ms-TextField-fieldGroup fieldGroup-195\": {\n      borderRadius: \"10px\",\n    },\n  },\n};\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"HR\" },\n  { key: \"key4\", text: \"Management\" },\n];\n\nconst controlClass = mergeStyleSets({\n  control: {\n    // margin: \"0 0 15px 0\",\n    // maxWidth: \"150px\",\n  },\n});\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\nconst datePickerStyle: Partial<IDatePickerStyles> = {\n  icon: {\n    color: \"rgb(111 144 220)\",\n  },\n};\n\nfunction AppraisalDetail(props: any) {\n  const params = useParams<ParamTypes>();\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\n\n  // const rolesOption: IDropdownOption[] = [\n  //   { key: \"key1\", text: \"Employee\" },\n  //   { key: \"key2\", text: \"Manager\" },\n  //   { key: \"key3\", text: \"HR content\" },\n  // ];\n\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n  //   key: \"\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setReviewSearch(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n    },\n  };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setAppraisalDetail(response.data[0]);\n    });\n  }, []);\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Appraisal Details\", key: \"d3\", as: \"h4\" },\n  ];\n\n  console.log(\"local data data=>\", appraisalDetail);\n\n  const renderData = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              disabled={true}\n              placeholder=\"ID\"\n              value={appraisalDetail.id}\n              name=\"id\"\n              label=\"Id\"\n              // onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              disabled={true}\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={appraisalDetail.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              disabled={true}\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow`}\n              // firstDayOfWeek={firstDayOfWeek}\n              // strings={DayPickerStrings}\n              value={new Date(appraisalDetail.review_from)}\n              // onSelectDate={(date) =>\n              //   setUpdateData({ ...updateData, review_from: date })\n              // }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              disabled={true}\n              label=\"Appraisal To\"\n              value={new Date(appraisalDetail.appraisal_to)}\n              className={`${controlClass.control} flexGrow`}\n              // firstDayOfWeek={firstDayOfWeek}\n              // strings={DayPickerStrings}\n              // onSelectDate={(date) =>\n              //   setUpdateData({ ...updateData, appraisal_to: date })\n              // }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              disabled={true}\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === appraisalDetail.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              // onChange={(ev, item) =>\n              //   setUpdateData({ ...updateData, review_frequency: item?.text })\n              // }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            disabled={true}\n            selectedKey={\n              typeOptions.find((item) => item.text === appraisalDetail.type)\n                ?.key\n            }\n            label=\"Type\"\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            // onChange={(ev, item) =>\n            //   setUpdateData({ ...appraisalDetail, type: item?.text })\n            // }\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            disabled={true}\n            selectedKey={\n              formateTypeOptions.find(\n                (item) => item.text === appraisalDetail.format_type\n              )?.key\n            }\n            label=\"Format Type\"\n            className=\"type-input\"\n            // onChange={(ev, item) =>\n            //   setUpdateData({ ...updateData, format_type: item?.text })\n            // }\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            disabled={true}\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={appraisalDetail.appraisal_owner}\n            styles={textfelidStyle}\n            name=\"appraisal_owner\"\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                disabled={true}\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={appraisalDetail.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n              />\n              <Checkbox\n                disabled={true}\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={appraisalDetail.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n              />\n              <Checkbox\n                disabled={true}\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={appraisalDetail.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.kra_settings_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.assessment_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={updateData.assessment_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={updateData.assessment_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.assessment_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            ></div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            \n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderData()} </div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AppraisalDetail);\n","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport {\n  DetailsList,\n  Dropdown,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IDetailsListStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  PrimaryButton,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\nimport { RootState } from \"../../redux/reducers\";\nimport { Pagination } from \"@uifabric/experiments\";\n\nfunction GoalSetting(props: any) {\n  const dispatch = useDispatch();\n\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start, setLimitStart] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [role, setRole] = useState(\"Employee\");\n  const [currentPage, setCurentPage] = useState(0);\n  const [limitPageLength, setLimitPageLength] = useState(3);\n  const [limitStart, setLimitSTart] = useState(0);\n\n  const employee = useSelector((state: RootState) => state.employeeList);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const { employeeList, isLoading, total_count, count } = employee;\n  // console.log(\"employeeList=> \", employeeList);\n\n  const [employeData, setEmployeeData]: any = useState({});\n  // console.log(\"employee data=>\", employeeList);\n\n  useEffect((): void => {\n    dispatch(fetchEmployeeData(doctype, limit_start, limit, roleType));\n  }, [doctype, limit_start, limit, roleType]);\n\n  const [roles, setRoles] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [period, setPeriod] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [status, setStatus] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n  const history = useHistory();\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const rolesOption: IDropdownOption[] = [\n    { key: \"employee\", text: \"Employee\" },\n    { key: \"manager\", text: \"Manager\" },\n    { key: \"hrContact\", text: \"HR Contact\" },\n  ];\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 250,\n      border: \"0px\",\n    },\n  };\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      backgroundColor: \"#344f84\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const periodOption: IDropdownOption[] = [\n    { key: \"key1\", text: \"2017-2018\" },\n    { key: \"key2\", text: \"2018-2019\" },\n    { key: \"key3\", text: \"2019-2020\" },\n  ];\n  const statusOption: IDropdownOption[] = [\n    { key: \"key1\", text: \"Pending with Employee\" },\n    { key: \"key2\", text: \"Pending with Reviewer\" },\n    { key: \"key3\", text: \"Pending Counter Signing\" },\n    { key: \"key4\", text: \"Complete\" },\n  ];\n\n  const operations = [\n    {\n      sno: \"01\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n  ];\n\n  const columns: IColumn[] = [\n    // {\n    //   key: \"01\",\n    //   name: \"S.No\",\n    //   fieldName: \"sno\",\n    //   minWidth: 50,\n    //   maxWidth: 50,\n    //   isSorted: true,\n    //   className: \"idColumn\",\n    //   isSortedDescending: false,\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\n    //   isRowHeader: true,\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\n    //   isResizable: false,\n    // },\n    {\n      key: \"02\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 110,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <PrimaryButton\n            text=\"KRA Setting\"\n            allowDisabledFocus\n            onClick={() => {\n              handleKraData(item);\n            }}\n            className=\"action-btn\"\n            style={{\n              padding: \"0px\",\n              fontSize: \"0.75rem\",\n              height: \"24px\",\n              borderRadius: \"3px\",\n            }}\n            disabled={false}\n            checked={false}\n          />\n        </div>\n      ),\n    },\n\n    {\n      key: \"03\",\n      name: \"Employee ID\",\n      fieldName: \"employee_id\",\n      minWidth: 50,\n      maxWidth: 90,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Employee Name\",\n      fieldName: \"employee_name\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    // {\n    //   key: \"05\",\n    //   name: \"Manager ID\",\n    //   fieldName: \"manager_id\",\n    //   minWidth: 50,\n    //   maxWidth: 100,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    // },\n    {\n      key: \"06\",\n      name: \"Manager Name\",\n      fieldName: \"manager_name\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Status\",\n      fieldName: \"status\",\n      minWidth: 50,\n      maxWidth: 170,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Appraisal Type\",\n      fieldName: \"appraisal_type\",\n      minWidth: 50,\n      maxWidth: 260,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n  ];\n\n  const handleKraData = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/${item.employee_id}/${item.appraisal_id}`\n    );\n    // history.push(\"/appraisal/goalsetting/view\");\n  };\n\n  const handleRoles = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setRoles(\n      item || {\n        key: \"employee\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangePeriod = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setPeriod(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeStatus = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setStatus(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    // { text: \"Employee\", key: \"d3\", as: \"h4\" },\n    { text: \"Goal Setting\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            \n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          <div\n            style={{\n              display: \"flex\",\n              // justifyContent: \"space-between\",\n              marginBottom: \"10px\",\n            }}\n          >\n            <Dropdown\n              label=\"Status\"\n              placeholder=\"Select\"\n              options={statusOption}\n              className=\"reviewFrequency\"\n              onChange={onChangeStatus}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            />\n            <PrimaryButton\n              iconProps={{ iconName: \"Search\" }}\n              style={{\n                marginLeft: \"20px\",\n                alignSelf: \"center\",\n                marginTop: \"28px\",\n              }}\n            />\n            {/* <Dropdown\n              label=\"Period\"\n              placeholder=\"Select\"\n              options={periodOption}\n              className=\"reviewFrequency\"\n              onChange={onChangePeriod}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            /> */}\n          </div>\n          <DetailsList\n            styles={listStyle}\n            items={employeeList}\n            className=\"detail-list\"\n            columns={columns}\n            selectionMode={0}\n          />\n          <div className=\"pagination-style\">\n            <Pagination\n              format=\"buttons\"\n              // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              selectedPageIndex={currentPage}\n              pageCount={Math.ceil(total_count / limitPageLength)}\n              itemsPerPage={limitPageLength}\n              totalItemCount={total_count}\n              onPageChange={(page) => {\n                setLimitSTart(page * limitPageLength);\n                setCurentPage(page);\n              }}\n            />\n          </div>\n          {/* <div style={{ marginTop: \"10px\" }}>\n            <PrimaryButton\n              text=\"Export\"\n              allowDisabledFocus\n              disabled={false}\n              checked={false}\n            />\n            <PrimaryButton\n              text=\"Back\"\n              allowDisabledFocus\n              disabled={false}\n              checked={false}\n            />\n          </div> */}\n        </div>\n        {/* <div className=\"right-container\">\n          <div className=\"stepper\">\n            <ul className=\"progress\">\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Provide your job history</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Perform goal setting</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Update training needs</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider grey\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Create development plan</span>\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalSetting);\n","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279"],"import {\n  DetailsList,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IDetailsListStyles,\n  ITextFieldStyles,\n  Label,\n  Link,\n  Pivot,\n  PivotItem,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { fetchJobHistory } from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport jobHistory from \"../../redux/reducers/jobHistory\";\nimport JobHistoryDetails from \"../JobHistoryDetails\";\nimport { fetchGoalData } from \"../../redux/actions/goal\";\nimport { fetchDevelopmentPlan } from \"../../redux/actions/developmentPlan\";\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction EmployeeDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [doctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start] = useState(0);\n  const [limit] = useState(10);\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByApprisal] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n\n  const [employeeData, setEmployeeData]: any = useState({});\n  const history = useHistory();\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n\n  const [currentPage, setCurentPage] = useState(0);\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [limitPageLengthGoal] = useState(5);\n  const [limitStart, setLimitSTart] = useState(0);\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\n\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\n  const [count, setCount] = useState(0);\n\n  const [totalCount, setTotalCount] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [limitPageLengthDevelopment] = useState(5);\n  const [developmentData, setDevelopmentData]: any = useState({});\n\n  const [goalData, setGoalData]: any = useState({});\n  const [goalCount, setGoalCount] = useState(0);\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\n  const [tariningPlan, setTrainingPlan] = useState([\n    {\n      development: \"\",\n      remark: \"\",\n    },\n    {\n      development: \"\",\n      remark: \"\",\n    },\n    {\n      development: \"\",\n      remark: \"\",\n    },\n    {\n      development: \"\",\n      remark: \"\",\n    },\n    {\n      development: \"\",\n      remark: \"\",\n    },\n  ]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    if (filtersByApprisal) {\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\n    }\n    fetchEmployeeDataByID(\n      doctype,\n      limit_start,\n      limit,\n      roleType,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setEmployeeData(response.data[0]);\n    });\n  }, [doctype, limit_start, limit, roleType]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(\n      roleType,\n      JSON.stringify(filters),\n      limitStart,\n      limitPageLength\n    ).then((response) => {\n      // console.log(\"response of job history=>\", response);\n      setEmployeeDetails(response.data);\n      setCount(response.count);\n      setTotalCount(response.total_count);\n    });\n  }, [roleType, limitStart, limitPageLength]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limitStartGoal,\n      limitPageLengthGoal,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data);\n      setGoalCount(response.count);\n      setGoalTotalCount(response.total_count);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchDevelopmentPlan(\n      limitStartDevelopment,\n      limitPageLengthDevelopment,\n      orderByDevelopment,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Development===>\", response);\n      setDevelopmentData(response.data);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const updateJobhistory = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\n    );\n  };\n\n  const jobHistoryDetails = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\n    );\n  };\n\n  const handleDevelopemntChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setTrainingPlan(\n      tariningPlan.map((item, i) =>\n        index === i\n          ? {\n              ...item,\n              development: value || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const columnsJobHistory: IColumn[] = [\n    // {\n    //   key: \"02\",\n    //   name: \"Appraisal ID\",\n    //   fieldName: \"appraisal_id\",\n    //   minWidth: 50,\n    //   maxWidth: 90,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    // },\n    // {\n    //   key: \"03\",\n    //   name: \"Employee ID\",\n    //   fieldName: \"employee_id\",\n    //   minWidth: 50,\n    //   maxWidth: 80,\n    //   isRowHeader: true,\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\n    //   isResizable: false,\n    // },\n    {\n      key: \"06\",\n      name: \"Position Held\",\n      fieldName: \"position_held\",\n      minWidth: 50,\n      maxWidth: 120,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"05\",\n      name: \"Place of Posting\",\n      fieldName: \"place_of_posting\",\n      minWidth: 50,\n      maxWidth: 110,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"From Date\",\n      fieldName: \"from_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"To Date\",\n      fieldName: \"to_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Key Responsibilities\",\n      fieldName: \"key_responsibilities\",\n      minWidth: 60,\n      maxWidth: 350,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 100,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              jobHistoryDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              updateJobhistory(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#344f84\" }} />\n          </Link>\n          <Link className=\"link-icons\" onClick={() => {}}>\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const columnsTraning: IColumn[] = [\n    {\n      key: \"1\",\n      name: \"S.No.\",\n      fieldName: \"serial_no\",\n      minWidth: 20,\n      maxWidth: 40,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      // onRender: (item, index) => (index || 0) + 1,\n    },\n    {\n      key: \"02\",\n      name: \"Development Plan/Training Needs\",\n      fieldName: \"development_plan\",\n      minWidth: 60,\n      maxWidth: 550,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            rows={3}\n            value={item.development_plan}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleDevelopemntChange(index, text)}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n    {\n      key: \"03\",\n      name: \"Remark by Appraiser\",\n      fieldName: \"reviewer_remarks\",\n      minWidth: 80,\n      maxWidth: 350,\n      isRowHeader: true,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            readOnly={true}\n            multiline\n            rows={3}\n            value={item.reviewer_remarks}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const columnsGoal: IColumn[] = [\n    {\n      key: \"02\",\n      name: \"S.No.\",\n      fieldName: \"order_no\",\n      minWidth: 20,\n      maxWidth: 50,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"11\",\n      name: \"Goal ID\",\n      fieldName: \"name\",\n      minWidth: 40,\n      maxWidth: 60,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"03\",\n      name: \"KRA\",\n      fieldName: \"kra\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"\",\n      fieldName: \"goal_type\",\n      minWidth: 10,\n      maxWidth: 30,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item) => (\n        <div>\n          {item.goal_type == \"Sub-Goal\" ? (\n            <Link\n              className=\"link-icons\"\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <ArrowRightIcon style={{ color: \"#344f84\", fontSize: \"30px\" }} />\n            </Link>\n          ) : (\n            <Link\n              className=\"link-icons\"\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <RadioButtonUncheckedIcon\n                style={{\n                  color: \"#344f84\",\n                  fontSize: \"10px\",\n                  marginLeft: \"25px\",\n                }}\n              />\n            </Link>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"05\",\n      name: \"Goal\",\n      fieldName: \"goal\",\n      minWidth: 50,\n      maxWidth: 280,\n      isMultiline: true,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"06\",\n      name: \"Measure\",\n      fieldName: \"measure\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Weightage\",\n      fieldName: \"weightage\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Target\",\n      fieldName: \"target\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"Threshold\",\n      fieldName: \"threshold\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"10\",\n      name: \"Stretch\",\n      fieldName: \"stretch\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 80,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              goalDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              updateGoals(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#344f84\" }} />\n          </Link>\n          <Link className=\"link-icons\" onClick={() => {}}>\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const operations = [\n    {\n      sno: \"01\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n    {\n      sno: \"02\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n  ];\n\n  const updateGoals = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\n  };\n\n  const goalDetails = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\n  };\n\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      marginTop: \"10px\",\n      backgroundColor: \"#344f84\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistory = () => {\n    return (\n      <div>\n        <div>\n          <DetailsList\n            styles={listStyle}\n            items={employeeDetails}\n            className=\"detail-list\"\n            columns={columnsJobHistory}\n            selectionMode={0}\n          />\n          <div className=\"pagination-style\">\n            <Pagination\n              format=\"buttons\"\n              // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              selectedPageIndex={currentPage}\n              pageCount={Math.ceil(totalCount / limitPageLength)}\n              itemsPerPage={limitPageLength}\n              totalItemCount={totalCount}\n              onPageChange={(page) => {\n                setLimitSTart(page * limitPageLength);\n                setCurentPage(page);\n              }}\n            />\n          </div>\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/jobhistory/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  const renderGoals = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <DetailsList\n          styles={listStyle}\n          items={goalData}\n          className=\"detail-list\"\n          columns={columnsGoal}\n          selectionMode={0}\n        />\n        <div className=\"pagination-style\">\n          <Pagination\n            format=\"buttons\"\n            // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n            // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n            selectedPageIndex={currentPageGoal}\n            pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\n            itemsPerPage={limitPageLengthGoal}\n            totalItemCount={goalTotalCount}\n            onPageChange={(pageGoal) => {\n              setLimitSTartGoal(pageGoal * limitPageLengthGoal);\n              setCurentPageGoal(pageGoal);\n            }}\n          />\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  const renderTrainingDevelopment = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <DetailsList\n          styles={listStyle}\n          items={developmentData}\n          className=\"detail-list\"\n          columns={columnsTraning}\n          selectionMode={0}\n        />\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Save\"\n              allowDisabledFocus\n              onClick={() => {\n                console.log(\"tariningPlan=> \", tariningPlan);\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  const renderEmployeeDetails = () => {\n    return (\n      <div>\n        <div className=\"card\">\n          <div className=\"row-jobHistory\">\n            <TextField\n              readOnly={true}\n              value={employeeData.employee_id}\n              placeholder=\"Employee ID\"\n              label=\"Employee Id\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // value={jobHistory[0].employee_id}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.employee_name}\n              placeholder=\"Employee Name\"\n              label=\"Employee Name\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.designation}\n              placeholder=\"Designation\"\n              label=\"Designation\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n          </div>\n          <div className=\"row-jobHistory\">\n            <TextField\n              readOnly={true}\n              value={employeeData.location}\n              placeholder=\"Location\"\n              label=\"Location\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.department}\n              placeholder=\"Department\"\n              label=\"Department\"\n              name=\"id\"\n              // onChange={onChangeInput}\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.date_of_joining}\n              placeholder=\"Date of Joining\"\n              label=\"Date of Joining\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n          </div>\n          <div className=\"row-jobHistory\">\n            <TextField\n              readOnly={true}\n              // value={employeeData.date_of_joining}\n              placeholder=\"Reporting Officer\"\n              label=\"Reporting Officer\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.reviewer_name}\n              placeholder=\"Reviewer\"\n              label=\"Reviewer\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.counter_signing_name}\n              placeholder=\"Counter signing\"\n              label=\"Counter signing\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n          </div>\n          {/* <Separator /> */}\n        </div>\n        <div style={{ marginTop: \"10px\" }} className=\"card\">\n          <Pivot>\n            <PivotItem\n              headerButtonProps={{\n                \"data-order\": 1,\n                \"data-title\": \"My Files Title\",\n              }}\n              headerText=\"Job History\"\n            >\n              {renderJobHistory()}\n            </PivotItem>\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\n            <PivotItem headerText=\"Training/ Development Plan\">\n              {renderTrainingDevelopment()}\n            </PivotItem>\n          </Pivot>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderEmployeeDetails()}</div>\n        {/* <div className=\"right-container\">\n          <div className=\"stepper\">\n            <ul className=\"progress\">\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Provide your job history</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Perform goal setting</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Update training needs</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider grey\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Create development plan</span>\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(EmployeeDetails);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx",["280","281","282","283","284","285","286","287"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n}\n\nfunction JobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      setEmployeeDetails(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleAddJobHistory = () => {\n    if (jobHistoryData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryData.place === \"\") {\n      setErrMsgPlace(\"Place of posting is required\");\n    }\n    if (jobHistoryData.position === \"\") {\n      setErrMsgPosition(\"Position held is required\");\n    }\n    if (jobHistoryData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const addQuery = {\n      appraisal_id: employeeDetails.appraisal_id,\n      employee_id: employeeDetails.employee_id,\n      key_responsibilities: jobHistoryData.responsibilities,\n      place_of_posting: jobHistoryData.place,\n      position_held: jobHistoryData.position,\n      qualifications: jobHistoryData.qualifications,\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\n    };\n    add_JobHistory(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryData.position}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryData.place}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"place\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              onSelectDate={onchangeFromDate}\n              value={fromDate}\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              onSelectDate={onchangeToDate}\n              value={toDate}\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryData.responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">Job History Added.</div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={handleAddJobHistory}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  name: string;\n}\n\nfunction UpdateJobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"name\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryUpdateData({\n      ...jobHistoryUpdateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const jobHistoryClicked = () => {\n    history.goBack();\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleUpdateJobHistory = () => {\n    if (jobHistoryUpdateData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryUpdateData.place === \"\") {\n      setErrMsgPlace(\"Place of Posting is required\");\n    }\n    if (jobHistoryUpdateData.position === \"\") {\n      setErrMsgPosition(\"Position Held is required\");\n    }\n    if (jobHistoryUpdateData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const updateQuery = {\n      ...jobHistoryUpdateData,\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\n    };\n    update_JobHistory(updateQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryUpdateData.position_held}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position_held\"\n            onChange={onChangeInput}\n          />\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryUpdateData.place_of_posting}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"place_of_posting\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              value={new Date(jobHistoryUpdateData.from_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  from_date: date,\n                })\n              }\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              value={new Date(jobHistoryUpdateData.to_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  to_date: date,\n                })\n              }\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryUpdateData.key_responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"key_responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryUpdateData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">Job History Updated.</div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Update\"\n              allowDisabledFocus\n              onClick={handleUpdateJobHistory}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateJobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n  fetchJobHistoryByName,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nfunction JobHistoryDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\n      (response) => {\n        setEmployeeDetails(response.data[0]);\n      }\n    );\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details\">\n          <TextField\n            disabled={true}\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={employeeDetails.position_held}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              required\n              disabled={true}\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={employeeDetails.place_of_posting}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"place\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              disabled={true}\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              onSelectDate={onchangeFromDate}\n              value={new Date(employeeDetails.from_date)}\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              disabled={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow`}\n              onSelectDate={onchangeToDate}\n              value={new Date(employeeDetails.to_date)}\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            disabled={true}\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={employeeDetails.key_responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            disabled={true}\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={employeeDetails.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Back\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistoryDetails);\n","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\nimport { add_goals, fetchGoalData } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction AddGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [goalInputData, setGoalInputData] = useState({\n    goal: \"\",\n    goal_type: \"\",\n    kra: \"\",\n    measure: \"\",\n    order_no: \"\",\n    parent_goal_id: \"\",\n    stretch: \"\",\n    target: \"\",\n    threshold: \"\",\n    weightage: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalInputData({\n      ...goalInputData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Add Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleAddJobHistory = () => {\n    if (goalInputData.order_no === \"\") {\n      setErrMsgOrder(\"Order number is required\");\n    }\n    if (goalInputData.kra === \"\") {\n      setErrMsgKra(\"KRA is required\");\n    }\n    if (goalInputData.goal === \"\") {\n      setErrMsgGoal(\"Goal is required\");\n    }\n    if (goalInputData.measure === \"\") {\n      setErrMsgMeasure(\"Measure is required\");\n    }\n    if (goalInputData.weightage === \"\") {\n      setErrMsgWeightage(\"Weightage is required\");\n    }\n    if (goalType.text === \"\") {\n      setErrMsgGoalType(\"Select goal type\");\n    }\n    const addQuery = {\n      appraisal_id: params.appraisalId,\n      employee_id: params.employeeId,\n      goal_type: goalType.text,\n      goal: goalInputData.goal,\n      kra: goalInputData.kra,\n      order_no: goalInputData.order_no,\n      measure: goalInputData.measure,\n      parent_goal_id: goalInputData.parent_goal_id,\n      stretch: goalInputData.stretch,\n      target: goalInputData.target,\n      threshold: goalInputData.threshold,\n      weightage: goalInputData.weightage,\n    };\n    add_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"goal-details\">\n          <TextField\n            disabled={true}\n            label=\"ID\"\n            // value={goalData.name}\n            placeholder=\"New\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgOrder}\n            label=\"Order Number\"\n            value={goalInputData.order_no}\n            placeholder=\"Enter order number\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"order_no\"\n            onChange={onChangeInput}\n          />\n          <Dropdown\n            required\n            errorMessage={errMsgGoalType}\n            label=\"Goal Type\"\n            placeholder=\"Select goal type\"\n            className=\"flexGrow\"\n            onChange={onChangeGoalType}\n            options={goalOptions}\n            // styles={dropdownStyles}\n          />\n          <TextField\n            disabled={goalType.text === \"Goal\" ? true : false}\n            label=\"Parent Goal\"\n            value={goalInputData.parent_goal_id}\n            placeholder=\"Enter parent goal ID \"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"parent_goal_id\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\"></div>\n        <div>\n          <TextField\n            required\n            errorMessage={errMsgKra}\n            label=\"KRA\"\n            value={goalInputData.kra}\n            placeholder=\"Enter KRA\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"kra\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgGoal}\n            label=\"Goal\"\n            value={goalInputData.goal}\n            placeholder=\"Enter Goal\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"goal\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            required\n            errorMessage={errMsgMeasure}\n            label=\"Measure\"\n            value={goalInputData.measure}\n            placeholder=\"Enter Measure\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"measure\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgWeightage}\n            label=\"Weightage\"\n            value={goalInputData.weightage}\n            placeholder=\"Enter Weightage\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"weightage\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            label=\"Target\"\n            value={goalInputData.target}\n            placeholder=\"Enter Target\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"target\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            label=\"Threshold\"\n            value={goalInputData.threshold}\n            placeholder=\"Enter Threshold\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"threshold\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            label=\"Stretch\"\n            value={goalInputData.stretch}\n            placeholder=\"Enter Stretch\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"stretch\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal successfully Added.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={handleAddJobHistory}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AddGoals);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { fetchGoalData, fetchGoalDataName, update_goals } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction UpdateGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [filtersByName] = useState(params.name);\n  \n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n  const [updateGoalData, setUpdateGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response:any) => {\n      // console.log(\"response of Goal===>\", response.data);\n      setUpdateGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateGoalData({\n      ...updateGoalData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Update Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleUpdateGoal = () => {\n    // if (goalInputData.order_no === \"\") {\n    //   setErrMsgOrder(\"Order number is required\");\n    // }\n    // if (goalInputData.kra === \"\") {\n    //   setErrMsgKra(\"KRA is required\");\n    // }\n    // if (goalInputData.goal === \"\") {\n    //   setErrMsgGoal(\"Goal is required\");\n    // }\n    // if (goalInputData.measure === \"\") {\n    //   setErrMsgMeasure(\"Measure is required\");\n    // }\n    // if (goalInputData.weightage === \"\") {\n    //   setErrMsgWeightage(\"Weightage is required\");\n    // }\n    // if (goalType.text === \"\") {\n    //   setErrMsgGoalType(\"Select goal type\");\n    // }\n    const addQuery = {\n      ...updateGoalData,\n    };\n    update_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"goal-details\">\n          <TextField\n            readOnly={true}\n            label=\"ID\"\n            value={params.name}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgOrder}\n            label=\"Order Number\"\n            value={updateGoalData.order_no}\n            placeholder=\"Enter order number\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"order_no\"\n            onChange={onChangeInput}\n          />\n          <Dropdown\n            required\n            errorMessage={errMsgGoalType}\n            label=\"Goal Type\"\n            placeholder=\"Select goal type\"\n            className=\"flexGrow\"\n            selectedKey={\n              goalOptions.find((item) => item.text === updateGoalData.goal_type)\n                ?.key\n            }\n            onChange={(ev, item) =>\n              setUpdateGoalData({\n                ...updateGoalData,\n                goal_type: item?.text,\n              })\n            }\n            options={goalOptions}\n            // styles={dropdownStyles}\n          />\n          <TextField\n            disabled={updateGoalData.goal_type === \"Goal\" ? true : false}\n            label=\"Parent Goal\"\n            value={updateGoalData.parent_goal_id}\n            placeholder=\"Enter KRA\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"parent_goal_id\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\"></div>\n        <div>\n          <TextField\n            required\n            errorMessage={errMsgKra}\n            label=\"KRA\"\n            value={updateGoalData.kra}\n            placeholder=\"Enter KRA\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"kra\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\"></div>\n          <TextField\n            required\n            errorMessage={errMsgGoal}\n            label=\"Goal\"\n            value={updateGoalData.goal}\n            placeholder=\"Enter Goal\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"goal\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            required\n            errorMessage={errMsgMeasure}\n            label=\"Measure\"\n            value={updateGoalData.measure}\n            placeholder=\"Enter Measure\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"measure\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgWeightage}\n            label=\"Weightage\"\n            value={updateGoalData.weightage}\n            placeholder=\"Enter Weightage\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"weightage\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            label=\"Target\"\n            value={updateGoalData.target}\n            placeholder=\"Enter Target\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"target\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            label=\"Threshold\"\n            value={updateGoalData.threshold}\n            placeholder=\"Enter Threshold\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"threshold\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            label=\"Stretch\"\n            value={updateGoalData.stretch}\n            placeholder=\"Enter Stretch\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"stretch\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal successfully Updated.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Update\"\n              allowDisabledFocus\n              onClick={handleUpdateGoal}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateGoals);\n\n","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx",["372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { fetchGoalData, fetchGoalDataName } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction GoalDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const [limitPageLength] = useState(5);\n  //   console.log(params.name);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n\n  const [goalDetails, setGoalDetails]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response.data);\n      setGoalDetails(response.data[0]);\n    });\n  }, []);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalDetails({\n      ...goalDetails,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"goal-details\">\n          <TextField\n            disabled={true}\n            label=\"ID\"\n            value={params.name}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            disabled={true}\n            errorMessage={errMsgOrder}\n            label=\"Order Number\"\n            value={goalDetails.order_no}\n            placeholder=\"Enter order number\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"order_no\"\n            onChange={onChangeInput}\n          />\n          <Dropdown\n            disabled={true}\n            errorMessage={errMsgGoalType}\n            label=\"Goal Type\"\n            placeholder=\"Select goal type\"\n            className=\"flexGrow\"\n            selectedKey={\n              goalOptions.find((item) => item.text === goalDetails.goal_type)\n                ?.key\n            }\n            // onChange={(ev, item) =>\n            //   setUpdateGoalData({\n            //     ...updateGoalData,\n            //     goal_type: item?.text,\n            //   })\n            // }\n            options={goalOptions}\n            // styles={dropdownStyles}\n          />\n          <TextField\n            disabled={true}\n            label=\"Parent Goal\"\n            value={goalDetails.parent_goal_id}\n            placeholder=\"Enter KRA\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"parent_goal_id\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\"></div>\n        <div>\n          <TextField\n            disabled={true}\n            errorMessage={errMsgKra}\n            label=\"KRA\"\n            value={goalDetails.kra}\n            placeholder=\"Enter KRA\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"kra\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\"></div>\n          <TextField\n            disabled={true}\n            errorMessage={errMsgGoal}\n            label=\"Goal\"\n            value={goalDetails.goal}\n            placeholder=\"Enter Goal\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"goal\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            disabled={true}\n            errorMessage={errMsgMeasure}\n            label=\"Measure\"\n            value={goalDetails.measure}\n            placeholder=\"Enter Measure\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"measure\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            disabled={true}\n            errorMessage={errMsgWeightage}\n            label=\"Weightage\"\n            value={goalDetails.weightage}\n            placeholder=\"Enter Weightage\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"weightage\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            disabled={true}\n            label=\"Target\"\n            value={goalDetails.target}\n            placeholder=\"Enter Target\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"target\"\n            onChange={onChangeInput}\n          />\n        </div>\n        <div className=\"goal-details\">\n          <TextField\n            label=\"Threshold\"\n            disabled={true}\n            value={goalDetails.threshold}\n            placeholder=\"Enter Threshold\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"threshold\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            label=\"Stretch\"\n            disabled={true}\n            value={goalDetails.stretch}\n            placeholder=\"Enter Stretch\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"stretch\"\n            onChange={onChangeInput}\n          />\n        </div>\n\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Back\"\n              allowDisabledFocus\n              onClick={() => {\n                history.goBack();\n              }}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalDetails);\n","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx",["398","399","400","401","402"],"import {\n  ITextFieldStyles,\n  PrimaryButton,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/actions/auth\";\nimport logo_ms from \"../../assets/img/logo_ms.png\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      width: \"300px\",\n    },\n  };\n\n  // const handleLogin = () => {\n  //   login().then((response) => {\n  //     if (response.message == true) {\n  //       dispatch(auth('uayuyauyuyauyuay', {}));\n  //     }\n  //   });\n  // };\n\n  // const handleLogin = () => {\n  //    window.open( 'https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/auth?redirect_uri=http%3A%2F%2Flocalhost%3A3000&state=eyJzaXRlIjogImh0dHA6Ly81Mi4xNDYuMC4xNTQ6ODAwMSIsICJ0b2tlbiI6ICIzNWQxYTc3MDk4MGNiODY3Yzg2ZjM3ZTllNDlkYWM3YTc2MTM4Y2FhYzM4YTI2OTc3MTQzNDhjYiIsICJyZWRpcmVjdF90byI6IG51bGx9&scope=openid&response_type=code&client_id=ms-hrms')}\n  // };\n\n  return (\n    <div className=\"login-header\">\n      <div\n        style={{\n          height: \"50px\",\n          backgroundColor: \"#f3eaea\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            padding: \"10px\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <img src={logo_ms} className=\"ms-logo\" />\n        </div>\n      </div>\n      <div\n        style={{\n          marginTop: \"10rem\",\n          justifyContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <TextField\n          label=\"Username\"\n          placeholder=\"Enter your Username\"\n          styles={textfelidStyle}\n          name=\"position\"\n          // onChange={onChangeInput}\n        />\n        <TextField\n          label=\"Password\"\n          placeholder=\"Enter Password\"\n          styles={textfelidStyle}\n          name=\"position\"\n          // onChange={onChangeInput}\n        />\n        <PrimaryButton\n          text=\"Login\"\n          style={{ marginTop: \"20px\" }}\n          allowDisabledFocus\n          onClick={() => {\n            window.open(\n              \"https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/auth?redirect_uri=http://localhost:3000/home&state=eyJzaXRlIjogImh0dHA6Ly81Mi4xNDYuMC4xNTQ6ODAwMSIsICJ0b2tlbiI6ICJmNzNmZTVhZDdhZjgyOWY2N2Q0MDNlNGM3NTdmNWIyYTdlYjk4MGUyMWU4MWQ3MDg5N2I2YzgwZiIsICJyZWRpcmVjdF90byI6IG51bGx9&scope=openid&response_type=code&client_id=ms-hrms\"\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(Login);\n","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx",["403","404","405","406","407","408","409","410","411","412","413","414","415"],"/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx",["416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434"],"import logo_text from \"../../src/assets/img/logo-text.png\";\nimport logo_icon from \"../../src/assets/img/logo-icon.png\";\nimport user1 from \"../../src/assets/img/1.jpg\";\nimport { useEffect } from \"react\";\nimport { initSideBar } from \"./sideBar\";\nimport { customSideBar } from \"./custom\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport { Link, Text } from \"office-ui-fabric-react\";\nimport { logout } from \"../redux/actions/auth\";\nimport { connect, useDispatch } from \"react-redux\";\n\nimport logo_ms from \"../assets/img/logo_ms.png\";\nimport logo_nuage from \"../assets/img/logo_nuage.png\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction MainHeader(props: any) {\n  useEffect(() => {\n    console.log(\"header page ==>\");\n    customSideBar();\n    initSideBar();\n  }, []);\n\n  const dispatch = useDispatch();\n\n  const handleCustomSidebar = () => {\n    console.log(\"clicked ==>\");\n    customSideBar();\n  };\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  const history = useHistory();\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n\n  return (\n    <header className=\"topbar\" data-navbarbg=\"skin5\">\n      <nav className=\"navbar top-navbar navbar-expand-md navbar-dark\">\n        <div className=\"navbar-header\" data-logobg=\"skin5\">\n          <a\n            className=\"nav-toggler waves-effect waves-light d-block d-md-none\"\n            href=\"#\"\n          >\n            <i className=\"ti-menu ti-close\"></i>\n          </a>\n          <a\n            className=\"navbar-brand\"\n            href=\"\"\n            onClick={() => {\n              history.push(\"/home\");\n            }}\n          >\n            <b className=\"logo-icon p-l-10\">\n              <img src={logo_icon} alt=\"homepage\" className=\"light-logo\" />\n            </b>\n            <span className=\"logo-text\">\n              <img src={logo_text} alt=\"homepage\" className=\"light-logo\" />\n            </span>\n          </a>\n          <a\n            className=\"topbartoggler d-block d-md-none waves-effect waves-light\"\n            href=\"#\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <i className=\"ti-more\"></i>\n          </a>\n        </div>\n        <div\n          className=\"navbar-collapse collapse\"\n          id=\"navbarSupportedContent\"\n          data-navbarbg=\"skin5\"\n        >\n          <ul className=\"navbar-nav float-left mr-auto\">\n            <li className=\"nav-item d-none d-md-block\">\n              <a\n                className=\"nav-link sidebartoggler waves-effect waves-light\"\n                href=\"#\"\n                data-sidebartype=\"mini-sidebar\"\n                // onClick={handleCustomSidebar}\n              >\n                <i className=\"mdi mdi-chevron-left font-24\"></i>\n              </a>\n            </li>\n            <div className=\"main-logo\">\n              <img src={logo_nuage} />\n            </div>\n            {/* <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle\"\n                href=\"#\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <span className=\"d-none d-md-block\">\n                  Create New <i className=\"fa fa-angle-down\"></i>\n                </span>\n                <span className=\"d-block d-md-none\">\n                  <i className=\"fa fa-plus\"></i>\n                </span>\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item search-box\">\n              {\" \"}\n              <a className=\"nav-link waves-effect waves-dark\" href=\"#\">\n                <i className=\"ti-search\"></i>\n              </a>\n              <form className=\"app-search position-absolute\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Search &amp; enter\"\n                />{\" \"}\n                <a className=\"srh-btn\">\n                  <i className=\"ti-close\"></i>\n                </a>\n              </form>\n            </li> */}\n          </ul>\n\n          <div className=\"mx-auto text-white-50\">\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n          <ul className=\"navbar-nav float-right ml-auto\">\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle waves-effect waves-dark\"\n                href=\"\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                {\" \"}\n                <i className=\"mdi mdi-bell font-24\"></i>\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle waves-effect waves-dark\"\n                href=\"\"\n                id=\"2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                {\" \"}\n                <i className=\"font-24 mdi mdi-comment-processing\"></i>\n              </a>\n              <div\n                className=\"dropdown-menu dropdown-menu-right mailbox animated bounceInDown\"\n                aria-labelledby=\"2\"\n              >\n                <ul className=\"list-style-none\">\n                  <li>\n                    <div className=\"\">\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-success btn-circle\">\n                            <i className=\"ti-calendar\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Event today</h5>\n                            <span className=\"mail-desc\">\n                              Just a reminder that event\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-info btn-circle\">\n                            <i className=\"ti-settings\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Settings</h5>\n                            <span className=\"mail-desc\">\n                              You can customize this template\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-primary btn-circle\">\n                            <i className=\"ti-user\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Pavan kumar</h5>\n                            <span className=\"mail-desc\">\n                              Just see the my admin!\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-danger btn-circle\">\n                            <i className=\"fa fa-link\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Luanch Admin</h5>\n                            <span className=\"mail-desc\">\n                              Just see the my new admin!\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </li>\n            <Link\n              className=\"link-icons px-2 nav-link\"\n              onClick={() => {\n                handleLogout();\n              }}\n            >\n              <PowerSettingsNewIcon />\n            </Link>\n            <img src={logo_ms} className=\"ms-logo-center\" />\n            {/* <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle text-muted waves-effect waves-dark pro-pic\"\n                href=\"\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <img\n                  src={user1}\n                  alt=\"user\"\n                  className=\"rounded-circle\"\n                  width=\"31\"\n                />\n              </a>\n              <div className=\"dropdown-menu dropdown-menu-right user-dd animated\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-user m-r-5 m-l-5\"></i> My Profile\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-wallet m-r-5 m-l-5\"></i> My Balance\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-email m-r-5 m-l-5\"></i> Inbox\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-settings m-r-5 m-l-5\"></i> Account Setting\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"fa fa-power-off m-r-5 m-l-5\"></i> Logout\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <div className=\"p-l-30 p-10\">\n                  <a href=\"#\" className=\"btn btn-sm btn-success btn-rounded\">\n                    View Profile\n                  </a>\n                </div>\n              </div>\n            </li> */}\n          </ul>\n        </div>\n      </nav>\n    </header>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(MainHeader);\n","/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx",["435","436","437","438","439"],"import { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { initSideBar } from \"./sideBar\";\nimport { customSideBar } from \"./custom\";\nimport { useHistory } from \"react-router-dom\";\nimport { sideNavigationData } from \"../redux/actions/navigation\";\n\nconst handleSideBar = () => {\n  initSideBar();\n};\n\nfunction SideNavigation() {\n  const [navData, setNavData]: any = useState();\n  const [doctype, setDoctype] = useState(\"Appraisal\");\n\n  // useEffect(() => {\n  //   initSideBar();\n  //   customSideBar();\n  // }, []);\n\n  function route2page(path: any) {\n    console.log(\"route==>\", path);\n    return true;\n  }\n\n  useEffect((): void => {\n    sideNavigationData(doctype).then((response) => {\n      console.log(\"side nav response\", response.message);\n      setNavData(response.message);\n      initSideBar();\n      customSideBar();\n    });\n  }, [doctype]);\n\n  const renderNavData = () => {\n    // return <div dangerouslySetInnerHTML={{ __html: navData }} />;\n    return { __html: navData };\n  };\n\n  const history = useHistory();\n  const handleGoalPage = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  return (\n    <aside className=\"left-sidebar\" data-sidebarbg=\"skin5\">\n      <div className=\"scroll-sidebar leftpanel-scrollbar\" id=\"style-scrollbar\">\n        <nav className=\"sidebar-nav\">\n          <div dangerouslySetInnerHTML={renderNavData()} />\n\n          {/* {renderNavData()} */}\n\n          {/* <button className=\"btn btn-link btn-nav-left\" id=\"nav_employee\">\n            Employee\n          </button>\n          <ul id=\"sidebarnav\" className=\"p-t-30 nav_Employee\">\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Appraisal</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/goalsetting');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi ti-settings\"></i>\n                    <span className=\"hide-menu\">Goal Setting</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/self-assessment');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-note-plus\"></i>\n                    <span className=\"hide-menu\">Self Assessment</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Confirmation</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/confirmation-letter');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Confirmation Letter</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/probation');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Probation</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n          </ul>\n          <button className=\"btn btn-link btn-nav-left\" id=\"nav_hr contact\">\n            HR Contact\n          </button>\n          <ul id=\"sidebarnav\" className=\"p-t-30 nav_HR Contact\">\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Appraisal</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/goalsetting');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi ti-settings\"></i>\n                    <span className=\"hide-menu\">Goal Setting</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/self-assessment');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-note-plus\"></i>\n                    <span className=\"hide-menu\">Self Assessment</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Confirmation</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/confirmation-letter');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Confirmation Letter</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/probation');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Probation</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n          </ul>\n          <button className=\"btn btn-link btn-nav-left\" id=\"nav_manager\">\n            Manager\n          </button>\n          <ul id=\"sidebarnav\" className=\"p-t-30 nav_Manager\">\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Appraisal</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/goalsetting');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi ti-settings\"></i>\n                    <span className=\"hide-menu\">Goal Setting</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/appraisal/self-assessment');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-note-plus\"></i>\n                    <span className=\"hide-menu\">Self Assessment</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n            <li className=\"sidebar-item\">\n              <a\n                className=\"sidebar-link has-arrow waves-effect waves-dark\"\n                href=\"#\"\n                aria-expanded=\"false\"\n              >\n                <i className=\"mdi mdi-chart-bar\"></i>\n                <span className=\"hide-menu\">Confirmation</span>\n              </a>\n              <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/confirmation-letter');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Confirmation Letter</span>\n                  </a>\n                </li>\n                <li className=\"sidebar-item\">\n                  <a\n                    className=\"sidebar-link  waves-effect waves-dark\"\n                    href=\"#\"\n                    // onClick=\"return route2page('/probation');\"\n                    aria-expanded=\"false\"\n                  >\n                    <i className=\"mdi mdi-chart-bar\"></i>\n                    <span className=\"hide-menu\">Probation</span>\n                  </a>\n                </li>\n              </ul>\n            </li>\n          </ul> */}\n        </nav>\n      </div>\n    </aside>\n\n    // <aside className=\"left-sidebar\" data-sidebarbg=\"skin5\">\n    //   <div className=\"scroll-sidebar\">\n    //     <nav className=\"sidebar-nav\">\n    //       <button className=\"btn btn-link btn-nav-left\" id=\"nav_employee\">\n    //         Employee\n    //       </button>\n    //       <ul id=\"sidebarnav\" className=\"p-t-30 nav_employee\">\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             href=\"#\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-chart-bar\"></i>\n    //             <span className=\"hide-menu\">Appraisal </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"ti-settings\"></i>\n    //                 <span className=\"hide-menu\" onClick={handleGoalPage}>\n    //                   Goal Settings\n    //                 </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\" href=\"#\">\n    //                 <i className=\"mdi mdi-note-plus\"></i>\n    //                 <span className=\"hide-menu\"> Self Assessment </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             href=\"#\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-face\"></i>\n    //             <span className=\"hide-menu\">Confirmation </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\" href=\"#\">\n    //                 <i className=\"mdi mdi-emoticon\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Status </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\" href=\"#\">\n    //                 <i className=\"mdi mdi-emoticon-cool\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Letter </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //       </ul>\n    //     </nav>\n    //   </div>\n    // </aside>\n\n    //       <button className=\"btn btn-link btn-nav-left\" id=\"nav_manager\">\n    //         Manager\n    //       </button>\n    //       <ul id=\"sidebarnav\" className=\"p-t-30 nav_manager\">\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-chart-bar\"></i>\n    //             <span className=\"hide-menu\">Appraisal </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"ti-settings\"></i>\n    //                 <span className=\"hide-menu\" onClick={handleGoalPage}>\n    //                   Goal Settings\n    //                 </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-note-plus\"></i>\n    //                 <span className=\"hide-menu\"> Self Assessment </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-face\"></i>\n    //             <span className=\"hide-menu\">Confirmation </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-emoticon\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Status </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-emoticon-cool\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Letter </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //       </ul>\n\n    //       <button className=\"btn btn-link btn-nav-left\" id=\"nav_hr_contact\">\n    //         HR Contact\n    //       </button>\n    //       <ul id=\"sidebarnav\" className=\"p-t-30 nav_hr_contact\">\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-chart-bar\"></i>\n    //             <span className=\"hide-menu\">Appraisal </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"ti-settings\"></i>\n    //                 <span className=\"hide-menu\" onClick={handleGoalPage}>\n    //                   Goal Settings\n    //                 </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-note-plus\"></i>\n    //                 <span className=\"hide-menu\"> Self Assessment </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //         <li className=\"sidebar-item\">\n    //           <a\n    //             className=\"sidebar-link has-arrow waves-effect waves-dark\"\n    //             aria-expanded=\"false\"\n    //           >\n    //             <i className=\"mdi mdi-face\"></i>\n    //             <span className=\"hide-menu\">Confirmation </span>\n    //           </a>\n    //           <ul aria-expanded=\"false\" className=\"collapse  first-level\">\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-emoticon\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Status </span>\n    //               </a>\n    //             </li>\n    //             <li className=\"sidebar-item\">\n    //               <a className=\"sidebar-link\">\n    //                 <i className=\"mdi mdi-emoticon-cool\"></i>\n    //                 <span className=\"hide-menu\"> Confirmation Letter </span>\n    //               </a>\n    //             </li>\n    //           </ul>\n    //         </li>\n    //       </ul>\n    //     </nav>\n    //   </div>\n    // </aside>\n  );\n}\n\nexport default SideNavigation;\n","/home/pratik/Documents/mega-soft/src/Header.tsx",["440","441","442"],"import * as React from \"react\";\nimport {\n  Breadcrumb,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDividerAsProps,\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\nimport { IContextualMenuProps } from \"office-ui-fabric-react\";\nimport { TooltipHost } from \"office-ui-fabric-react/lib/Tooltip\";\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\nimport \"./Header.css\";\n\nconst menuProps: IContextualMenuProps = {\n  items: [\n    {\n      key: \"action01\",\n      text: \"Action 1\",\n      //   iconProps: { iconName: 'Mail' },\n    },\n    {\n      key: \"action02\",\n      text: \"Action 2\",\n      //   iconProps: { iconName: 'Calendar' },\n    },\n  ],\n};\nfunction _onBreadcrumbItemClicked(\n  ev?: React.MouseEvent<HTMLElement>,\n  item?: IBreadcrumbItem\n): void {\n  console.log(`Breadcrumb item with key \"${item?.key}\" has been clicked.`);\n}\nconst itemsWithHeading: IBreadcrumbItem[] = [\n  {\n    text: \"Performance\",\n    key: \"Files\",\n    onClick: _onBreadcrumbItemClicked,\n    href: \"\",\n  },\n  { text: \"Appraisal\", key: \"d1\", isCurrentItem: true },\n];\nfunction _getCustomOverflowIcon(): JSX.Element {\n  return <Icon iconName={\"ChevronDown\"} />;\n}\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\n  const tooltipText = dividerProps.item ? dividerProps.item.text : \"\";\n  return (\n    <TooltipHost\n      content={`Show ${tooltipText} contents`}\n      calloutProps={{ gapSpace: 0 }}\n    >\n      <span aria-hidden=\"true\" style={{ cursor: \"pointer\", padding: 5 }}>\n        /\n      </span>\n    </TooltipHost>\n  );\n}\n\nconst breadCrumStyle: Partial<IBreadcrumbStyles> = {\n  root: {\n    margin: \"0px\",\n    padding: \"0px\",\n    marginTop: \"-10px\",\n  },\n  itemLink: {\n    fontSize: \"22px\",\n  },\n};\n\nfunction Header(props: { item?: IBreadcrumbItem[]; styles: any }) {\n  // const _alertClicked = () => {\n  //   console.log(\"clicked==>\")\n  // }\n  // const horizontalStackProps: IStackProps = {\n  //     horizontal: true,\n  //     tokens: { childrenGap: 100, },\n  // };\n  // const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\n\n  return (\n    <div className=\"header\">\n      <Breadcrumb\n        // items={itemsWithHeading}\n        items={props.item || []}\n        styles={props.styles}\n        maxDisplayedItems={5}\n        ariaLabel=\"With custom rendered divider and overflow icon\"\n        dividerAs={_getCustomDivider}\n        onRenderOverflowIcon={_getCustomOverflowIcon}\n      />\n    </div>\n  );\n}\n\nexport default Header;\n","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx",["443"],"import axios from \"axios\";\nimport accessToken from \"../../apiBase.json\";\n\nexport const addApprisal = (item: any) => {\n  return {\n    type: \"ADD_APPRISAL\",\n    payload: item,\n  };\n};\n\nexport const fetchAppraisalData = (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => async (dispatch: any): Promise<any> => {\n  try {\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_START\",\n    });\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\", \n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n    });\n    const responseBody = await response.data;\n    // console.log(\"api response =>\", responseBody);\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_SUCCESS\",\n      payload: responseBody,\n    });\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const fetchAppraisalDataById = async (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\"\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n    });\n    const responseBody = await response.data;\n    // console.log(\"api data by id\", responseBody)\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const add_apprisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \"token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    return response;\n  } catch (error) {\n    console.log(\"error in catch block=>\", JSON.stringify(error));\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const edit_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data.id}`,\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    // console.log(\"api response ==>\", response)\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const delete_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data}`,\n      method: \"DELETE\",\n      headers: {\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, DELETE\",\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    console.log(\"delete api response ==>\", response);\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx",["444"],"import axios from \"axios\";\n\nexport const validateLogin = () => {\n  const sessionState = sessionStorage.getItem('sessionState')\n  const state = sessionStorage.getItem('state')\n  const user = {}\n  if(sessionState && state) {\n    return {\n      type: \"LOGIN_SUCCESS\",\n      payload: user,\n    };\n  } else {\n    return {\n      type: \"LOGOUT_SUCCESS\",\n    };\n  }\n}\n\nexport const login = (sessionState: any, state: any) => {\n  sessionStorage.setItem('sessionState', sessionState)\n  sessionStorage.setItem('state', state)\n  return {\n    type: \"LOGIN_SUCCESS\",\n    payload: {},\n  };\n};\n\nexport const logout = () => {\n  sessionStorage.removeItem('sessionState')\n  return {\n    type: \"LOGOUT_SUCCESS\",\n  };\n};\n\n// export const login = async () => {\n//   const response = await axios({\n//     url: `http://52.146.0.154/api/method/megasoft_hrms.pm.ms_hrms_login`,\n//     method: \"GET\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Accept: \"application/json\",\n//       Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n//     },\n//   });\n//   const responseBody = await response.data;\n//   return responseBody;\n// };\n","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx",["445","446"],"/*\nTemplate Name: Admin Template\nAuthor: Wrappixel\n\nFile: js\n*/\n// ==============================================================\n// Auto select left navbar\n// ==============================================================\nimport $ from \"jquery\";\n\nexport const initSideBar = function () {\n  (\"use strict\");\n  var url = window.location + \"\";\n  var path = url.replace(\n    window.location.protocol + \"//\" + window.location.host + \"/\",\n    \"\"\n  );\n  var element = $(\"ul#sidebarnav a\").filter(function () {\n    // return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;\n    return true;\n  });\n  element.parentsUntil(\".sidebar-nav\").each(function (index) {\n    if ($(this).is(\"li\") && $(this).children(\"a\").length !== 0) {\n      $(this).children(\"a\").addClass(\"active\");\n      $(this).parent(\"ul#sidebarnav\").length === 0\n        ? $(this).addClass(\"active\")\n        : $(this).addClass(\"selected\");\n    } else if (!$(this).is(\"ul\") && $(this).children(\"a\").length === 0) {\n      $(this).addClass(\"selected\");\n    } else if ($(this).is(\"ul\")) {\n      $(this).addClass(\"in\");\n    }\n  });\n\n  element.addClass(\"active\");\n  $(\"#sidebarnav a\").on(\"click\", function (e) {\n    // console.log(\"side nav clicked==>\");\n\n    if (!$(this).hasClass(\"active\")) {\n      // hide any open menus and remove all other classes\n      $(\"ul\", $(this).parents(\"ul:first\")).removeClass(\"in\");\n      $(\"a\", $(this).parents(\"ul:first\")).removeClass(\"active\");\n\n      // open our new menu and add the open class\n      $(this).next(\"ul\").addClass(\"in\");\n      $(this).addClass(\"active\");\n    } else if ($(this).hasClass(\"active\")) {\n      $(this).removeClass(\"active\");\n      $(this).parents(\"ul:first\").removeClass(\"active\");\n      $(this).next(\"ul\").removeClass(\"in\");\n    }\n  });\n  $(\"#sidebarnav >li >a.has-arrow\").on(\"click\", function (e) {\n    e.preventDefault();\n  });\n\n  // JQuery function\n  $(\".nav_employee\").show();\n  $(\".nav_manager\").hide();\n  $(\".nav_hr_contact\").hide();\n\n  $(\"#nav_employee\").click(function () {\n    $(\".nav_employee\").show();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").hide();\n    // $(\"#nav_employee\").addClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n  });\n\n  $(\"#nav_manager\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").show();\n    $(\".nav_hr_contact\").hide();\n    // $(\"#nav_manager\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n  });\n\n  $(\"#nav_hr_contact\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").show();\n    // $(\"#nav_hr\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n  });\n};\n","/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx",["447","448"],"import $ from \"jquery\";\n\nexport const customSideBar = function () {\n  (\"use strict\");\n  console.log(\"inside customside bar==>\");\n\n  $(\".preloader\").fadeOut();\n  // ==============================================================\n  // Theme options\n  // ==============================================================\n  // ==============================================================\n  // sidebar-hover\n  // ==============================================================\n\n  $(\".left-sidebar\").hover(\n    function () {\n      $(\".navbar-header\").addClass(\"expand-logo\");\n    },\n    function () {\n      $(\".navbar-header\").removeClass(\"expand-logo\");\n    }\n  );\n  // this is for close icon when navigation open in mobile view\n  $(\".nav-toggler\").on(\"click\", function () {\n    $(\"#main-wrapper\").toggleClass(\"show-sidebar\");\n    $(\".nav-toggler i\").toggleClass(\"ti-menu\");\n  });\n  $(\".nav-lock\").on(\"click\", function () {\n    $(\"body\").toggleClass(\"lock-nav\");\n    $(\".nav-lock i\").toggleClass(\"mdi-toggle-switch-off\");\n    $(\"body, .page-wrapper\").trigger(\"resize\");\n  });\n  $(\".search-box a, .search-box .app-search .srh-btn\").on(\"click\", function () {\n    $(\".app-search\").toggle(200);\n    $(\".app-search input\").focus();\n  });\n\n  // ==============================================================\n  // Right sidebar options\n  // ==============================================================\n  console.log(\"custom side bar2==>\");\n  $(function () {\n    $(\".service-panel-toggle\").on(\"click\", function () {\n      $(\".customizer\").toggleClass(\"show-service-panel\");\n    });\n    $(\".page-wrapper\").on(\"click\", function () {\n      $(\".customizer\").removeClass(\"show-service-panel\");\n    });\n  });\n  // ==============================================================\n  // This is for the floating labels\n  // ==============================================================\n  //   $(\".floating-labels .form-control\")\n  //     .on(\"focus blur\", function (e) {\n  //       $(this)\n  //         .parents(\".form-group\")\n  //         .toggleClass(\"focused\", e.type === \"focus\" || this.value.length > 0);\n  //     })\n  //     .trigger(\"blur\");\n\n  // ==============================================================\n  //tooltip\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"tooltip\"]').tooltip();\n  //   });\n  // ==============================================================\n  //Popover\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"popover\"]').popover();\n  //   });\n\n  // ==============================================================\n  // Perfact scrollbar\n  // ==============================================================\n  //   $(\".message-center, .customizer-body, .scrollable\").perfectScrollbar({\n  //     wheelPropagation: !0,\n  //   });\n\n  /*var ps = new PerfectScrollbar('.message-body');\n      var ps = new PerfectScrollbar('.notifications');\n      var ps = new PerfectScrollbar('.scroll-sidebar');\n      var ps = new PerfectScrollbar('.customizer-body');*/\n\n  // ==============================================================\n  // Resize all elements\n  // ==============================================================\n  $(\"body, .page-wrapper\").trigger(\"resize\");\n  $(\".page-wrapper\").show();\n  // ==============================================================\n  // To do list\n  // ==============================================================\n  $(\".list-task li label\").click(function () {\n    $(this).toggleClass(\"task-done\");\n  });\n\n  //****************************\n  /* This is for the mini-sidebar if width is less then 1170*/\n  //****************************\n  console.log(\"custom side bar3==>\");\n  var setsidebartype = function () {\n    // var width = (window.innerWidth > 0) ? window.innerWidth : this.screen.width;\n    // if (width < 1170) {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    // } else {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    // }\n  };\n  // $(window).ready(setsidebartype);\n  // $(window).on(\"resize\", setsidebartype);\n  //****************************\n  /* This is for sidebartoggler*/\n  //****************************\n  $(\".sidebartoggler\").on(\"click\", function () {\n    console.log(\"Sidebar toggle inner function ==>\");\n    $(\"#main-wrapper\").toggleClass(\"mini-sidebar\");\n    if ($(\"#main-wrapper\").hasClass(\"mini-sidebar\")) {\n      $(\".sidebartoggler\").prop(\"checked\", !0);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    } else {\n      $(\".sidebartoggler\").prop(\"checked\", !1);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    }\n  });\n};\n","/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx",[],{"ruleId":"449","replacedBy":"450"},{"ruleId":"451","replacedBy":"452"},{"ruleId":"453","severity":1,"message":"454","line":1,"column":28,"nodeType":"455","messageId":"456","endLine":1,"endColumn":36},{"ruleId":"457","severity":1,"message":"458","line":32,"column":20,"nodeType":"459","messageId":"460","endLine":32,"endColumn":22},{"ruleId":"461","severity":1,"message":"462","line":44,"column":6,"nodeType":"463","endLine":44,"endColumn":8,"suggestions":"464"},{"ruleId":"461","severity":1,"message":"462","line":52,"column":6,"nodeType":"463","endLine":52,"endColumn":8,"suggestions":"465"},{"ruleId":"457","severity":1,"message":"458","line":60,"column":24,"nodeType":"459","messageId":"460","endLine":60,"endColumn":26},{"ruleId":"453","severity":1,"message":"466","line":3,"column":3,"nodeType":"455","messageId":"456","endLine":3,"endColumn":6},{"ruleId":"453","severity":1,"message":"467","line":12,"column":8,"nodeType":"455","messageId":"456","endLine":12,"endColumn":18},{"ruleId":"453","severity":1,"message":"468","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":21},{"ruleId":"453","severity":1,"message":"469","line":150,"column":7,"nodeType":"455","messageId":"456","endLine":150,"endColumn":37},{"ruleId":"453","severity":1,"message":"470","line":194,"column":19,"nodeType":"455","messageId":"456","endLine":194,"endColumn":29},{"ruleId":"453","severity":1,"message":"471","line":196,"column":10,"nodeType":"455","messageId":"456","endLine":196,"endColumn":17},{"ruleId":"453","severity":1,"message":"472","line":196,"column":19,"nodeType":"455","messageId":"456","endLine":196,"endColumn":29},{"ruleId":"453","severity":1,"message":"473","line":199,"column":9,"nodeType":"455","messageId":"456","endLine":199,"endColumn":19},{"ruleId":"461","severity":1,"message":"462","line":206,"column":6,"nodeType":"463","endLine":206,"endColumn":25,"suggestions":"474"},{"ruleId":"453","severity":1,"message":"475","line":216,"column":10,"nodeType":"455","messageId":"456","endLine":216,"endColumn":24},{"ruleId":"453","severity":1,"message":"476","line":217,"column":9,"nodeType":"455","messageId":"456","endLine":217,"endColumn":20},{"ruleId":"477","severity":1,"message":"478","line":221,"column":39,"nodeType":"479","messageId":"480","endLine":221,"endColumn":41},{"ruleId":"477","severity":1,"message":"478","line":223,"column":34,"nodeType":"479","messageId":"480","endLine":223,"endColumn":36},{"ruleId":"477","severity":1,"message":"481","line":231,"column":13,"nodeType":"482","messageId":"483","endLine":231,"endColumn":20},{"ruleId":"477","severity":1,"message":"481","line":242,"column":11,"nodeType":"482","messageId":"483","endLine":242,"endColumn":18},{"ruleId":"484","severity":1,"message":"485","line":255,"column":11,"nodeType":"486","endLine":255,"endColumn":34},{"ruleId":"453","severity":1,"message":"487","line":29,"column":8,"nodeType":"455","messageId":"456","endLine":29,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":30,"column":10,"nodeType":"455","messageId":"456","endLine":30,"endColumn":14},{"ruleId":"453","severity":1,"message":"489","line":55,"column":7,"nodeType":"455","messageId":"456","endLine":55,"endColumn":47},{"ruleId":"453","severity":1,"message":"490","line":71,"column":9,"nodeType":"455","messageId":"456","endLine":71,"endColumn":50},{"ruleId":"453","severity":1,"message":"491","line":320,"column":9,"nodeType":"455","messageId":"456","endLine":320,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":321,"column":9,"nodeType":"455","messageId":"456","endLine":321,"endColumn":16},{"ruleId":"453","severity":1,"message":"493","line":322,"column":9,"nodeType":"455","messageId":"456","endLine":322,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":323,"column":9,"nodeType":"455","messageId":"456","endLine":323,"endColumn":15},{"ruleId":"453","severity":1,"message":"495","line":365,"column":10,"nodeType":"455","messageId":"456","endLine":365,"endColumn":26},{"ruleId":"453","severity":1,"message":"496","line":366,"column":10,"nodeType":"455","messageId":"456","endLine":366,"endColumn":29},{"ruleId":"453","severity":1,"message":"497","line":366,"column":31,"nodeType":"455","messageId":"456","endLine":366,"endColumn":53},{"ruleId":"453","severity":1,"message":"487","line":30,"column":8,"nodeType":"455","messageId":"456","endLine":30,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":31,"column":10,"nodeType":"455","messageId":"456","endLine":31,"endColumn":14},{"ruleId":"453","severity":1,"message":"489","line":56,"column":7,"nodeType":"455","messageId":"456","endLine":56,"endColumn":47},{"ruleId":"461","severity":1,"message":"498","line":92,"column":6,"nodeType":"463","endLine":92,"endColumn":8,"suggestions":"499"},{"ruleId":"453","severity":1,"message":"500","line":171,"column":26,"nodeType":"455","messageId":"456","endLine":171,"endColumn":43},{"ruleId":"453","severity":1,"message":"501","line":182,"column":10,"nodeType":"455","messageId":"456","endLine":182,"endColumn":21},{"ruleId":"453","severity":1,"message":"502","line":209,"column":9,"nodeType":"455","messageId":"456","endLine":209,"endColumn":28},{"ruleId":"453","severity":1,"message":"491","line":254,"column":9,"nodeType":"455","messageId":"456","endLine":254,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":255,"column":9,"nodeType":"455","messageId":"456","endLine":255,"endColumn":16},{"ruleId":"453","severity":1,"message":"493","line":256,"column":9,"nodeType":"455","messageId":"456","endLine":256,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":257,"column":9,"nodeType":"455","messageId":"456","endLine":257,"endColumn":15},{"ruleId":"453","severity":1,"message":"487","line":21,"column":8,"nodeType":"455","messageId":"456","endLine":21,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":23,"column":10,"nodeType":"455","messageId":"456","endLine":23,"endColumn":14},{"ruleId":"453","severity":1,"message":"489","line":67,"column":7,"nodeType":"455","messageId":"456","endLine":67,"endColumn":47},{"ruleId":"453","severity":1,"message":"489","line":114,"column":9,"nodeType":"455","messageId":"456","endLine":114,"endColumn":49},{"ruleId":"453","severity":1,"message":"491","line":121,"column":9,"nodeType":"455","messageId":"456","endLine":121,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":122,"column":9,"nodeType":"455","messageId":"456","endLine":122,"endColumn":16},{"ruleId":"453","severity":1,"message":"493","line":123,"column":9,"nodeType":"455","messageId":"456","endLine":123,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":124,"column":9,"nodeType":"455","messageId":"456","endLine":124,"endColumn":15},{"ruleId":"461","severity":1,"message":"498","line":140,"column":6,"nodeType":"463","endLine":140,"endColumn":8,"suggestions":"503"},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":7},{"ruleId":"453","severity":1,"message":"470","line":25,"column":19,"nodeType":"455","messageId":"456","endLine":25,"endColumn":29},{"ruleId":"453","severity":1,"message":"504","line":26,"column":23,"nodeType":"455","messageId":"456","endLine":26,"endColumn":36},{"ruleId":"453","severity":1,"message":"505","line":27,"column":17,"nodeType":"455","messageId":"456","endLine":27,"endColumn":25},{"ruleId":"453","severity":1,"message":"506","line":28,"column":10,"nodeType":"455","messageId":"456","endLine":28,"endColumn":14},{"ruleId":"453","severity":1,"message":"507","line":28,"column":16,"nodeType":"455","messageId":"456","endLine":28,"endColumn":23},{"ruleId":"453","severity":1,"message":"508","line":30,"column":27,"nodeType":"455","messageId":"456","endLine":30,"endColumn":45},{"ruleId":"453","severity":1,"message":"509","line":31,"column":10,"nodeType":"455","messageId":"456","endLine":31,"endColumn":20},{"ruleId":"453","severity":1,"message":"510","line":35,"column":25,"nodeType":"455","messageId":"456","endLine":35,"endColumn":34},{"ruleId":"453","severity":1,"message":"511","line":35,"column":49,"nodeType":"455","messageId":"456","endLine":35,"endColumn":54},{"ruleId":"453","severity":1,"message":"512","line":38,"column":10,"nodeType":"455","messageId":"456","endLine":38,"endColumn":21},{"ruleId":"453","severity":1,"message":"513","line":38,"column":23,"nodeType":"455","messageId":"456","endLine":38,"endColumn":38},{"ruleId":"461","severity":1,"message":"462","line":43,"column":6,"nodeType":"463","endLine":43,"endColumn":45,"suggestions":"514"},{"ruleId":"453","severity":1,"message":"515","line":45,"column":10,"nodeType":"455","messageId":"456","endLine":45,"endColumn":15},{"ruleId":"453","severity":1,"message":"516","line":50,"column":10,"nodeType":"455","messageId":"456","endLine":50,"endColumn":16},{"ruleId":"453","severity":1,"message":"517","line":55,"column":10,"nodeType":"455","messageId":"456","endLine":55,"endColumn":16},{"ruleId":"453","severity":1,"message":"491","line":60,"column":9,"nodeType":"455","messageId":"456","endLine":60,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":61,"column":9,"nodeType":"455","messageId":"456","endLine":61,"endColumn":16},{"ruleId":"453","severity":1,"message":"518","line":63,"column":9,"nodeType":"455","messageId":"456","endLine":63,"endColumn":39},{"ruleId":"453","severity":1,"message":"493","line":94,"column":9,"nodeType":"455","messageId":"456","endLine":94,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":95,"column":9,"nodeType":"455","messageId":"456","endLine":95,"endColumn":15},{"ruleId":"453","severity":1,"message":"519","line":108,"column":9,"nodeType":"455","messageId":"456","endLine":108,"endColumn":40},{"ruleId":"453","severity":1,"message":"520","line":120,"column":9,"nodeType":"455","messageId":"456","endLine":120,"endColumn":19},{"ruleId":"453","severity":1,"message":"521","line":246,"column":9,"nodeType":"455","messageId":"456","endLine":246,"endColumn":20},{"ruleId":"453","severity":1,"message":"522","line":258,"column":9,"nodeType":"455","messageId":"456","endLine":258,"endColumn":23},{"ruleId":"453","severity":1,"message":"523","line":8,"column":3,"nodeType":"455","messageId":"456","endLine":8,"endColumn":8},{"ruleId":"453","severity":1,"message":"488","line":14,"column":3,"nodeType":"455","messageId":"456","endLine":14,"endColumn":7},{"ruleId":"453","severity":1,"message":"487","line":19,"column":8,"nodeType":"455","messageId":"456","endLine":19,"endColumn":21},{"ruleId":"453","severity":1,"message":"524","line":31,"column":8,"nodeType":"455","messageId":"456","endLine":31,"endColumn":18},{"ruleId":"453","severity":1,"message":"525","line":32,"column":8,"nodeType":"455","messageId":"456","endLine":32,"endColumn":25},{"ruleId":"453","severity":1,"message":"526","line":60,"column":33,"nodeType":"455","messageId":"456","endLine":60,"endColumn":57},{"ruleId":"453","severity":1,"message":"527","line":61,"column":30,"nodeType":"455","messageId":"456","endLine":61,"endColumn":51},{"ruleId":"453","severity":1,"message":"511","line":62,"column":10,"nodeType":"455","messageId":"456","endLine":62,"endColumn":15},{"ruleId":"453","severity":1,"message":"528","line":65,"column":19,"nodeType":"455","messageId":"456","endLine":65,"endColumn":29},{"ruleId":"453","severity":1,"message":"529","line":70,"column":10,"nodeType":"455","messageId":"456","endLine":70,"endColumn":19},{"ruleId":"461","severity":1,"message":"530","line":112,"column":6,"nodeType":"463","endLine":112,"endColumn":45,"suggestions":"531"},{"ruleId":"461","severity":1,"message":"532","line":130,"column":6,"nodeType":"463","endLine":130,"endColumn":45,"suggestions":"533"},{"ruleId":"461","severity":1,"message":"534","line":148,"column":6,"nodeType":"463","endLine":148,"endColumn":43,"suggestions":"535"},{"ruleId":"461","severity":1,"message":"536","line":164,"column":6,"nodeType":"463","endLine":164,"endColumn":43,"suggestions":"537"},{"ruleId":"453","severity":1,"message":"493","line":197,"column":9,"nodeType":"455","messageId":"456","endLine":197,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":198,"column":9,"nodeType":"455","messageId":"456","endLine":198,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":199,"column":9,"nodeType":"455","messageId":"456","endLine":199,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":200,"column":9,"nodeType":"455","messageId":"456","endLine":200,"endColumn":16},{"ruleId":"457","severity":1,"message":"458","line":439,"column":27,"nodeType":"459","messageId":"460","endLine":439,"endColumn":29},{"ruleId":"453","severity":1,"message":"520","line":561,"column":9,"nodeType":"455","messageId":"456","endLine":561,"endColumn":19},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":25,"column":3,"nodeType":"455","messageId":"456","endLine":25,"endColumn":7},{"ruleId":"461","severity":1,"message":"539","line":58,"column":6,"nodeType":"463","endLine":58,"endColumn":8,"suggestions":"540"},{"ruleId":"453","severity":1,"message":"493","line":157,"column":9,"nodeType":"455","messageId":"456","endLine":157,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":158,"column":9,"nodeType":"455","messageId":"456","endLine":158,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":159,"column":9,"nodeType":"455","messageId":"456","endLine":159,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":160,"column":9,"nodeType":"455","messageId":"456","endLine":160,"endColumn":16},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"541","line":7,"column":3,"nodeType":"455","messageId":"456","endLine":7,"endColumn":17},{"ruleId":"453","severity":1,"message":"488","line":26,"column":3,"nodeType":"455","messageId":"456","endLine":26,"endColumn":7},{"ruleId":"453","severity":1,"message":"542","line":39,"column":10,"nodeType":"455","messageId":"456","endLine":39,"endColumn":25},{"ruleId":"453","severity":1,"message":"543","line":39,"column":27,"nodeType":"455","messageId":"456","endLine":39,"endColumn":45},{"ruleId":"453","severity":1,"message":"544","line":40,"column":10,"nodeType":"455","messageId":"456","endLine":40,"endColumn":24},{"ruleId":"453","severity":1,"message":"545","line":40,"column":26,"nodeType":"455","messageId":"456","endLine":40,"endColumn":43},{"ruleId":"453","severity":1,"message":"546","line":46,"column":10,"nodeType":"455","messageId":"456","endLine":46,"endColumn":16},{"ruleId":"453","severity":1,"message":"547","line":47,"column":10,"nodeType":"455","messageId":"456","endLine":47,"endColumn":18},{"ruleId":"461","severity":1,"message":"539","line":61,"column":6,"nodeType":"463","endLine":61,"endColumn":8,"suggestions":"548"},{"ruleId":"453","severity":1,"message":"549","line":118,"column":9,"nodeType":"455","messageId":"456","endLine":118,"endColumn":23},{"ruleId":"453","severity":1,"message":"550","line":122,"column":9,"nodeType":"455","messageId":"456","endLine":122,"endColumn":25},{"ruleId":"453","severity":1,"message":"493","line":164,"column":9,"nodeType":"455","messageId":"456","endLine":164,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":165,"column":9,"nodeType":"455","messageId":"456","endLine":165,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":166,"column":9,"nodeType":"455","messageId":"456","endLine":166,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":167,"column":9,"nodeType":"455","messageId":"456","endLine":167,"endColumn":16},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"541","line":7,"column":3,"nodeType":"455","messageId":"456","endLine":7,"endColumn":17},{"ruleId":"453","severity":1,"message":"551","line":8,"column":3,"nodeType":"455","messageId":"456","endLine":8,"endColumn":18},{"ruleId":"453","severity":1,"message":"552","line":17,"column":3,"nodeType":"455","messageId":"456","endLine":17,"endColumn":13},{"ruleId":"453","severity":1,"message":"553","line":23,"column":3,"nodeType":"455","messageId":"456","endLine":23,"endColumn":8},{"ruleId":"453","severity":1,"message":"488","line":26,"column":3,"nodeType":"455","messageId":"456","endLine":26,"endColumn":7},{"ruleId":"453","severity":1,"message":"554","line":37,"column":10,"nodeType":"455","messageId":"456","endLine":37,"endColumn":21},{"ruleId":"453","severity":1,"message":"546","line":47,"column":10,"nodeType":"455","messageId":"456","endLine":47,"endColumn":16},{"ruleId":"453","severity":1,"message":"547","line":48,"column":10,"nodeType":"455","messageId":"456","endLine":48,"endColumn":18},{"ruleId":"461","severity":1,"message":"555","line":60,"column":6,"nodeType":"463","endLine":60,"endColumn":8,"suggestions":"556"},{"ruleId":"453","severity":1,"message":"557","line":63,"column":9,"nodeType":"455","messageId":"456","endLine":63,"endColumn":31},{"ruleId":"453","severity":1,"message":"558","line":64,"column":9,"nodeType":"455","messageId":"456","endLine":64,"endColumn":25},{"ruleId":"453","severity":1,"message":"559","line":75,"column":9,"nodeType":"455","messageId":"456","endLine":75,"endColumn":42},{"ruleId":"453","severity":1,"message":"493","line":159,"column":9,"nodeType":"455","messageId":"456","endLine":159,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":160,"column":9,"nodeType":"455","messageId":"456","endLine":160,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":161,"column":9,"nodeType":"455","messageId":"456","endLine":161,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":162,"column":9,"nodeType":"455","messageId":"456","endLine":162,"endColumn":16},{"ruleId":"453","severity":1,"message":"560","line":164,"column":32,"nodeType":"455","messageId":"456","endLine":164,"endColumn":55},{"ruleId":"453","severity":1,"message":"561","line":165,"column":23,"nodeType":"455","messageId":"456","endLine":165,"endColumn":37},{"ruleId":"453","severity":1,"message":"562","line":166,"column":26,"nodeType":"455","messageId":"456","endLine":166,"endColumn":43},{"ruleId":"453","severity":1,"message":"563","line":167,"column":32,"nodeType":"455","messageId":"456","endLine":167,"endColumn":55},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"541","line":7,"column":3,"nodeType":"455","messageId":"456","endLine":7,"endColumn":17},{"ruleId":"453","severity":1,"message":"551","line":8,"column":3,"nodeType":"455","messageId":"456","endLine":8,"endColumn":18},{"ruleId":"453","severity":1,"message":"564","line":12,"column":3,"nodeType":"455","messageId":"456","endLine":12,"endColumn":13},{"ruleId":"453","severity":1,"message":"488","line":27,"column":3,"nodeType":"455","messageId":"456","endLine":27,"endColumn":7},{"ruleId":"453","severity":1,"message":"565","line":30,"column":8,"nodeType":"455","messageId":"456","endLine":30,"endColumn":14},{"ruleId":"453","severity":1,"message":"566","line":46,"column":9,"nodeType":"455","messageId":"456","endLine":46,"endColumn":17},{"ruleId":"453","severity":1,"message":"528","line":49,"column":19,"nodeType":"455","messageId":"456","endLine":49,"endColumn":29},{"ruleId":"453","severity":1,"message":"546","line":62,"column":10,"nodeType":"455","messageId":"456","endLine":62,"endColumn":16},{"ruleId":"453","severity":1,"message":"547","line":63,"column":10,"nodeType":"455","messageId":"456","endLine":63,"endColumn":18},{"ruleId":"453","severity":1,"message":"567","line":66,"column":10,"nodeType":"455","messageId":"456","endLine":66,"endColumn":18},{"ruleId":"461","severity":1,"message":"568","line":82,"column":6,"nodeType":"463","endLine":82,"endColumn":8,"suggestions":"569"},{"ruleId":"453","severity":1,"message":"570","line":107,"column":9,"nodeType":"455","messageId":"456","endLine":107,"endColumn":52},{"ruleId":"453","severity":1,"message":"571","line":121,"column":9,"nodeType":"455","messageId":"456","endLine":121,"endColumn":21},{"ruleId":"453","severity":1,"message":"549","line":139,"column":9,"nodeType":"455","messageId":"456","endLine":139,"endColumn":23},{"ruleId":"453","severity":1,"message":"550","line":143,"column":9,"nodeType":"455","messageId":"456","endLine":143,"endColumn":25},{"ruleId":"453","severity":1,"message":"493","line":181,"column":9,"nodeType":"455","messageId":"456","endLine":181,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":182,"column":9,"nodeType":"455","messageId":"456","endLine":182,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":183,"column":9,"nodeType":"455","messageId":"456","endLine":183,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":184,"column":9,"nodeType":"455","messageId":"456","endLine":184,"endColumn":16},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"488","line":22,"column":3,"nodeType":"455","messageId":"456","endLine":22,"endColumn":7},{"ruleId":"453","severity":1,"message":"572","line":25,"column":10,"nodeType":"455","messageId":"456","endLine":25,"endColumn":23},{"ruleId":"453","severity":1,"message":"554","line":39,"column":10,"nodeType":"455","messageId":"456","endLine":39,"endColumn":21},{"ruleId":"453","severity":1,"message":"566","line":40,"column":9,"nodeType":"455","messageId":"456","endLine":40,"endColumn":17},{"ruleId":"453","severity":1,"message":"528","line":43,"column":19,"nodeType":"455","messageId":"456","endLine":43,"endColumn":29},{"ruleId":"453","severity":1,"message":"567","line":48,"column":10,"nodeType":"455","messageId":"456","endLine":48,"endColumn":18},{"ruleId":"453","severity":1,"message":"573","line":48,"column":20,"nodeType":"455","messageId":"456","endLine":48,"endColumn":31},{"ruleId":"461","severity":1,"message":"574","line":65,"column":6,"nodeType":"463","endLine":65,"endColumn":8,"suggestions":"575"},{"ruleId":"453","severity":1,"message":"570","line":90,"column":9,"nodeType":"455","messageId":"456","endLine":90,"endColumn":52},{"ruleId":"453","severity":1,"message":"571","line":104,"column":9,"nodeType":"455","messageId":"456","endLine":104,"endColumn":21},{"ruleId":"453","severity":1,"message":"493","line":155,"column":9,"nodeType":"455","messageId":"456","endLine":155,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":156,"column":9,"nodeType":"455","messageId":"456","endLine":156,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":157,"column":9,"nodeType":"455","messageId":"456","endLine":157,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":158,"column":9,"nodeType":"455","messageId":"456","endLine":158,"endColumn":16},{"ruleId":"453","severity":1,"message":"576","line":160,"column":23,"nodeType":"455","messageId":"456","endLine":160,"endColumn":37},{"ruleId":"453","severity":1,"message":"577","line":161,"column":22,"nodeType":"455","messageId":"456","endLine":161,"endColumn":35},{"ruleId":"453","severity":1,"message":"578","line":162,"column":26,"nodeType":"455","messageId":"456","endLine":162,"endColumn":43},{"ruleId":"453","severity":1,"message":"579","line":163,"column":25,"nodeType":"455","messageId":"456","endLine":163,"endColumn":41},{"ruleId":"453","severity":1,"message":"580","line":164,"column":27,"nodeType":"455","messageId":"456","endLine":164,"endColumn":45},{"ruleId":"453","severity":1,"message":"581","line":165,"column":21,"nodeType":"455","messageId":"456","endLine":165,"endColumn":33},{"ruleId":"453","severity":1,"message":"582","line":167,"column":10,"nodeType":"455","messageId":"456","endLine":167,"endColumn":18},{"ruleId":"453","severity":1,"message":"583","line":172,"column":9,"nodeType":"455","messageId":"456","endLine":172,"endColumn":25},{"ruleId":"453","severity":1,"message":"584","line":2,"column":19,"nodeType":"455","messageId":"456","endLine":2,"endColumn":30},{"ruleId":"453","severity":1,"message":"538","line":2,"column":32,"nodeType":"455","messageId":"456","endLine":2,"endColumn":43},{"ruleId":"453","severity":1,"message":"487","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":21},{"ruleId":"453","severity":1,"message":"585","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":19},{"ruleId":"453","severity":1,"message":"586","line":9,"column":3,"nodeType":"455","messageId":"456","endLine":9,"endColumn":11},{"ruleId":"453","severity":1,"message":"552","line":12,"column":3,"nodeType":"455","messageId":"456","endLine":12,"endColumn":13},{"ruleId":"453","severity":1,"message":"587","line":13,"column":3,"nodeType":"455","messageId":"456","endLine":13,"endColumn":20},{"ruleId":"453","severity":1,"message":"588","line":15,"column":3,"nodeType":"455","messageId":"456","endLine":15,"endColumn":13},{"ruleId":"453","severity":1,"message":"589","line":16,"column":3,"nodeType":"455","messageId":"456","endLine":16,"endColumn":15},{"ruleId":"453","severity":1,"message":"590","line":18,"column":3,"nodeType":"455","messageId":"456","endLine":18,"endColumn":17},{"ruleId":"453","severity":1,"message":"553","line":19,"column":3,"nodeType":"455","messageId":"456","endLine":19,"endColumn":8},{"ruleId":"453","severity":1,"message":"488","line":22,"column":3,"nodeType":"455","messageId":"456","endLine":22,"endColumn":7},{"ruleId":"453","severity":1,"message":"572","line":25,"column":10,"nodeType":"455","messageId":"456","endLine":25,"endColumn":23},{"ruleId":"453","severity":1,"message":"554","line":39,"column":10,"nodeType":"455","messageId":"456","endLine":39,"endColumn":21},{"ruleId":"453","severity":1,"message":"528","line":44,"column":19,"nodeType":"455","messageId":"456","endLine":44,"endColumn":29},{"ruleId":"461","severity":1,"message":"574","line":62,"column":6,"nodeType":"463","endLine":62,"endColumn":8,"suggestions":"591"},{"ruleId":"453","severity":1,"message":"493","line":114,"column":9,"nodeType":"455","messageId":"456","endLine":114,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":115,"column":9,"nodeType":"455","messageId":"456","endLine":115,"endColumn":15},{"ruleId":"453","severity":1,"message":"491","line":116,"column":9,"nodeType":"455","messageId":"456","endLine":116,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":117,"column":9,"nodeType":"455","messageId":"456","endLine":117,"endColumn":16},{"ruleId":"453","severity":1,"message":"576","line":119,"column":23,"nodeType":"455","messageId":"456","endLine":119,"endColumn":37},{"ruleId":"453","severity":1,"message":"577","line":120,"column":22,"nodeType":"455","messageId":"456","endLine":120,"endColumn":35},{"ruleId":"453","severity":1,"message":"578","line":121,"column":26,"nodeType":"455","messageId":"456","endLine":121,"endColumn":43},{"ruleId":"453","severity":1,"message":"579","line":122,"column":25,"nodeType":"455","messageId":"456","endLine":122,"endColumn":41},{"ruleId":"453","severity":1,"message":"580","line":123,"column":27,"nodeType":"455","messageId":"456","endLine":123,"endColumn":45},{"ruleId":"453","severity":1,"message":"581","line":124,"column":21,"nodeType":"455","messageId":"456","endLine":124,"endColumn":33},{"ruleId":"453","severity":1,"message":"592","line":6,"column":17,"nodeType":"455","messageId":"456","endLine":6,"endColumn":26},{"ruleId":"453","severity":1,"message":"454","line":6,"column":28,"nodeType":"455","messageId":"456","endLine":6,"endColumn":36},{"ruleId":"453","severity":1,"message":"593","line":8,"column":10,"nodeType":"455","messageId":"456","endLine":8,"endColumn":15},{"ruleId":"453","severity":1,"message":"594","line":12,"column":9,"nodeType":"455","messageId":"456","endLine":12,"endColumn":17},{"ruleId":"484","severity":1,"message":"485","line":46,"column":11,"nodeType":"486","endLine":46,"endColumn":52},{"ruleId":"453","severity":1,"message":"487","line":32,"column":8,"nodeType":"455","messageId":"456","endLine":32,"endColumn":21},{"ruleId":"453","severity":1,"message":"595","line":45,"column":10,"nodeType":"455","messageId":"456","endLine":45,"endColumn":26},{"ruleId":"453","severity":1,"message":"508","line":55,"column":27,"nodeType":"455","messageId":"456","endLine":55,"endColumn":45},{"ruleId":"453","severity":1,"message":"511","line":65,"column":37,"nodeType":"455","messageId":"456","endLine":65,"endColumn":42},{"ruleId":"453","severity":1,"message":"596","line":67,"column":9,"nodeType":"455","messageId":"456","endLine":67,"endColumn":15},{"ruleId":"461","severity":1,"message":"597","line":109,"column":6,"nodeType":"463","endLine":118,"endColumn":4,"suggestions":"598"},{"ruleId":"453","severity":1,"message":"599","line":287,"column":10,"nodeType":"455","messageId":"456","endLine":287,"endColumn":22},{"ruleId":"453","severity":1,"message":"491","line":541,"column":9,"nodeType":"455","messageId":"456","endLine":541,"endColumn":16},{"ruleId":"453","severity":1,"message":"492","line":542,"column":9,"nodeType":"455","messageId":"456","endLine":542,"endColumn":16},{"ruleId":"453","severity":1,"message":"493","line":544,"column":9,"nodeType":"455","messageId":"456","endLine":544,"endColumn":17},{"ruleId":"453","severity":1,"message":"494","line":545,"column":9,"nodeType":"455","messageId":"456","endLine":545,"endColumn":15},{"ruleId":"453","severity":1,"message":"600","line":558,"column":9,"nodeType":"455","messageId":"456","endLine":558,"endColumn":52},{"ruleId":"457","severity":1,"message":"458","line":671,"column":43,"nodeType":"459","messageId":"460","endLine":671,"endColumn":45},{"ruleId":"453","severity":1,"message":"601","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":13},{"ruleId":"453","severity":1,"message":"602","line":25,"column":9,"nodeType":"455","messageId":"456","endLine":25,"endColumn":28},{"ruleId":"603","severity":1,"message":"604","line":45,"column":11,"nodeType":"486","endLine":48,"endColumn":12},{"ruleId":"603","severity":1,"message":"604","line":51,"column":11,"nodeType":"486","endLine":57,"endColumn":12},{"ruleId":"603","severity":1,"message":"604","line":65,"column":11,"nodeType":"486","endLine":73,"endColumn":12},{"ruleId":"603","severity":1,"message":"604","line":84,"column":15,"nodeType":"486","endLine":89,"endColumn":16},{"ruleId":"484","severity":1,"message":"485","line":94,"column":15,"nodeType":"486","endLine":94,"endColumn":39},{"ruleId":"603","severity":1,"message":"604","line":158,"column":15,"nodeType":"486","endLine":164,"endColumn":16},{"ruleId":"605","severity":1,"message":"606","line":158,"column":15,"nodeType":"486","endLine":164,"endColumn":16},{"ruleId":"603","severity":1,"message":"604","line":169,"column":17,"nodeType":"486","endLine":169,"endColumn":55},{"ruleId":"603","severity":1,"message":"604","line":172,"column":17,"nodeType":"486","endLine":172,"endColumn":55},{"ruleId":"603","severity":1,"message":"604","line":176,"column":17,"nodeType":"486","endLine":176,"endColumn":55},{"ruleId":"603","severity":1,"message":"604","line":182,"column":15,"nodeType":"486","endLine":189,"endColumn":16},{"ruleId":"605","severity":1,"message":"606","line":182,"column":15,"nodeType":"486","endLine":189,"endColumn":16},{"ruleId":"603","severity":1,"message":"604","line":200,"column":23,"nodeType":"486","endLine":200,"endColumn":63},{"ruleId":"603","severity":1,"message":"604","line":213,"column":23,"nodeType":"486","endLine":213,"endColumn":63},{"ruleId":"603","severity":1,"message":"604","line":226,"column":23,"nodeType":"486","endLine":226,"endColumn":63},{"ruleId":"603","severity":1,"message":"604","line":239,"column":23,"nodeType":"486","endLine":239,"endColumn":63},{"ruleId":"484","severity":1,"message":"485","line":265,"column":13,"nodeType":"486","endLine":265,"endColumn":61},{"ruleId":"453","severity":1,"message":"607","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":9},{"ruleId":"453","severity":1,"message":"608","line":9,"column":7,"nodeType":"455","messageId":"456","endLine":9,"endColumn":20},{"ruleId":"453","severity":1,"message":"470","line":15,"column":19,"nodeType":"455","messageId":"456","endLine":15,"endColumn":29},{"ruleId":"453","severity":1,"message":"609","line":22,"column":12,"nodeType":"455","messageId":"456","endLine":22,"endColumn":22},{"ruleId":"453","severity":1,"message":"610","line":42,"column":9,"nodeType":"455","messageId":"456","endLine":42,"endColumn":23},{"ruleId":"453","severity":1,"message":"611","line":13,"column":7,"nodeType":"455","messageId":"456","endLine":13,"endColumn":38},{"ruleId":"453","severity":1,"message":"612","line":33,"column":7,"nodeType":"455","messageId":"456","endLine":33,"endColumn":42},{"ruleId":"453","severity":1,"message":"613","line":59,"column":7,"nodeType":"455","messageId":"456","endLine":59,"endColumn":49},{"ruleId":"453","severity":1,"message":"614","line":2,"column":8,"nodeType":"455","messageId":"456","endLine":2,"endColumn":19},{"ruleId":"453","severity":1,"message":"615","line":1,"column":8,"nodeType":"455","messageId":"456","endLine":1,"endColumn":13},{"ruleId":"616","severity":1,"message":"617","line":13,"column":3,"nodeType":"618","messageId":"619","endLine":13,"endColumn":18,"fix":"620"},{"ruleId":"453","severity":1,"message":"621","line":15,"column":7,"nodeType":"455","messageId":"456","endLine":15,"endColumn":11},{"ruleId":"616","severity":1,"message":"617","line":4,"column":3,"nodeType":"618","messageId":"619","endLine":4,"endColumn":18,"fix":"622"},{"ruleId":"453","severity":1,"message":"623","line":102,"column":7,"nodeType":"455","messageId":"456","endLine":102,"endColumn":21},"no-native-reassign",["624"],"no-negated-in-lhs",["625"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["626"],["627"],"'Nav' is defined but never used.","'logo_nuage' is defined but never used.","'sideNavigationData' is defined but never used.","'navStyles' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'navData' is assigned a value but never used.","'setNavData' is assigned a value but never used.","'navigation' is assigned a value but never used.",["628"],"'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'WelcomeHeader' is defined but never used.","'Text' is defined but never used.","'dropdownStyles' is assigned a value but never used.","'textfelidStyle' is assigned a value but never used.","'dateNow' is assigned a value but never used.","'timeNow' is assigned a value but never used.","'userName' is assigned a value but never used.","'userId' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["629"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.",["630"],"'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'count' is assigned a value but never used.","'employeData' is assigned a value but never used.","'setEmployeeData' is assigned a value but never used.",["631"],"'roles' is assigned a value but never used.","'period' is assigned a value but never used.","'status' is assigned a value but never used.","'rolesOption' is assigned a value but never used.","'periodOption' is assigned a value but never used.","'operations' is assigned a value but never used.","'handleRoles' is assigned a value but never used.","'onChangePeriod' is assigned a value but never used.","'Label' is defined but never used.","'jobHistory' is defined but never used.","'JobHistoryDetails' is defined but never used.","'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.","'goalCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["632"],"React Hook useEffect has a missing dependency: 'filtersById'. Either include it or remove the dependency array.",["633"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["634"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', and 'orderByDevelopment'. Either include them or remove the dependency array.",["635"],"'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["636"],"'add_JobHistory' is defined but never used.","'employeeDetails' is assigned a value but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.",["637"],"'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'fetchJobHistory' is defined but never used.","'IconButton' is defined but never used.","'Modal' is defined but never used.","'filtersById' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["638"],"'cancelIcon' is assigned a value but never used.","'iconButtonStyles' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'setErrMsgResponsibility' is assigned a value but never used.","'setErrMsgPlace' is assigned a value but never used.","'setErrMsgPosition' is assigned a value but never used.","'setErrMsgQualifications' is assigned a value but never used.","'DatePicker' is defined but never used.","'moment' is defined but never used.","'roleType' is assigned a value but never used.","'goalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["639"],"'datePickerStyle' is assigned a value but never used.","'controlClass' is assigned a value but never used.","'fetchGoalData' is defined but never used.","'setGoalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["640"],"'setErrMsgOrder' is assigned a value but never used.","'setErrMsgGoal' is assigned a value but never used.","'setErrMsgGoalType' is assigned a value but never used.","'setErrMsgMeasure' is assigned a value but never used.","'setErrMsgWeightage' is assigned a value but never used.","'setErrMsgKra' is assigned a value but never used.","'goalType' is assigned a value but never used.","'onChangeGoalType' is assigned a value but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","'getTheme' is defined but never used.","'IDatePickerStyles' is defined but never used.","'IIconProps' is defined but never used.","'IModalStyles' is defined but never used.","'mergeStyleSets' is defined but never used.",["641"],"'useEffect' is defined but never used.","'login' is defined but never used.","'dispatch' is assigned a value but never used.","'delete_appraisal' is defined but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["642"],"'deleteItemId' is assigned a value but never used.","'renderRow' is assigned a value but never used.","'user1' is defined but never used.","'handleCustomSidebar' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/role-supports-aria-props","The attribute aria-haspopup is not supported by the role link. This role is implicit on the element a.","'$' is defined but never used.","'handleSideBar' is assigned a value but never used.","'route2page' is defined but never used.","'handleGoalPage' is assigned a value but never used.","'menuProps' is assigned a value but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'accessToken' is defined but never used.","'axios' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"643","text":"644"},"'path' is assigned a value but never used.",{"range":"645","text":"644"},"'setsidebartype' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"646","fix":"647"},{"desc":"646","fix":"648"},{"desc":"649","fix":"650"},{"desc":"651","fix":"652"},{"desc":"651","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"664","fix":"666"},{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"671","fix":"673"},{"desc":"674","fix":"675"},[291,306],"",[70,85],"Update the dependencies array to be: [dispatch]",{"range":"676","text":"677"},{"range":"678","text":"677"},"Update the dependencies array to be: [dispatch, doctype, roleType]",{"range":"679","text":"680"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"681","text":"682"},{"range":"683","text":"682"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, dispatch]",{"range":"684","text":"685"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"686","text":"687"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, filtersById]",{"range":"688","text":"689"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"690","text":"691"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment]",{"range":"692","text":"693"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"694","text":"695"},{"range":"696","text":"695"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"697","text":"698"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"699","text":"700"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"701","text":"702"},{"range":"703","text":"702"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",{"range":"704","text":"705"},[1795,1797],"[dispatch]",[2034,2036],[5135,5154],"[dispatch, doctype, roleType]",[2416,2418],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[3312,3314],[1565,1604],"[doctype, limit_start, limit, roleType, dispatch]",[3568,3607],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4070,4109],"[roleType, limitStart, limitPageLength, filtersById]",[4573,4610],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[5037,5074],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment]",[1681,1683],"[filtersById, roleType]",[1836,1838],[1652,1654],"[filtersByName, roleType]",[2236,2238],"[filtersById, limitPageLength, limit_start, orderBy]",[1896,1898],"[filtersByName, limitPageLength, limit_start, orderBy]",[1652,1654],[3581,3748],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]"]