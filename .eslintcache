[{"/home/pratik/Documents/mega-soft/src/index.tsx":"1","/home/pratik/Documents/mega-soft/src/reportWebVitals.ts":"2","/home/pratik/Documents/mega-soft/src/App.tsx":"3","/home/pratik/Documents/mega-soft/src/redux/index.tsx":"4","/home/pratik/Documents/mega-soft/src/Navigation.tsx":"5","/home/pratik/Documents/mega-soft/src/config.tsx":"6","/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx":"7","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx":"8","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx":"9","/home/pratik/Documents/mega-soft/src/Views/Home/index.tsx":"10","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx":"11","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx":"12","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx":"13","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx":"14","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx":"15","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx":"16","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx":"17","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx":"18","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx":"19","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx":"20","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx":"21","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx":"22","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx":"23","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx":"24","/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx":"25","/home/pratik/Documents/mega-soft/src/i18n.tsx":"26","/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx":"27","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx":"28","/home/pratik/Documents/mega-soft/src/Header.tsx":"29","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx":"30","/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx":"31","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx":"32","/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx":"33","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx":"34","/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx":"35","/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx":"36","/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx":"37","/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx":"38","/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx":"39","/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx":"40","/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx":"41","/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx":"42","/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx":"43","/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx":"44","/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx":"45","/home/pratik/Documents/mega-soft/src/Utils/color.tsx":"46"},{"size":643,"mtime":1614409988813,"results":"47","hashOfConfig":"48"},{"size":425,"mtime":1614409988813,"results":"49","hashOfConfig":"48"},{"size":7092,"mtime":1614467941869,"results":"50","hashOfConfig":"48"},{"size":205,"mtime":1614409988813,"results":"51","hashOfConfig":"48"},{"size":4824,"mtime":1614410236152,"results":"52","hashOfConfig":"48"},{"size":463,"mtime":1614410236160,"results":"53","hashOfConfig":"48"},{"size":4608,"mtime":1614410436139,"results":"54","hashOfConfig":"48"},{"size":5125,"mtime":1614494735756,"results":"55","hashOfConfig":"48"},{"size":476,"mtime":1614409988813,"results":"56","hashOfConfig":"48"},{"size":1040,"mtime":1614410236156,"results":"57","hashOfConfig":"48"},{"size":2090,"mtime":1614410236156,"results":"58","hashOfConfig":"48"},{"size":20687,"mtime":1614499087826,"results":"59","hashOfConfig":"48"},{"size":28807,"mtime":1614500997894,"results":"60","hashOfConfig":"48"},{"size":6692,"mtime":1614499022824,"results":"61","hashOfConfig":"48"},{"size":11104,"mtime":1614500258991,"results":"62","hashOfConfig":"48"},{"size":20770,"mtime":1614499777460,"results":"63","hashOfConfig":"48"},{"size":15316,"mtime":1614410236156,"results":"64","hashOfConfig":"48"},{"size":34871,"mtime":1614410236156,"results":"65","hashOfConfig":"48"},{"size":14989,"mtime":1614410236160,"results":"66","hashOfConfig":"48"},{"size":4731,"mtime":1614410236156,"results":"67","hashOfConfig":"48"},{"size":16875,"mtime":1614410236152,"results":"68","hashOfConfig":"48"},{"size":15486,"mtime":1614410236160,"results":"69","hashOfConfig":"48"},{"size":4674,"mtime":1614410236156,"results":"70","hashOfConfig":"48"},{"size":990,"mtime":1614410236160,"results":"71","hashOfConfig":"48"},{"size":468,"mtime":1614409988813,"results":"72","hashOfConfig":"48"},{"size":769,"mtime":1614409988813,"results":"73","hashOfConfig":"48"},{"size":8023,"mtime":1614410236152,"results":"74","hashOfConfig":"48"},{"size":653,"mtime":1614409988813,"results":"75","hashOfConfig":"48"},{"size":1207,"mtime":1614410236152,"results":"76","hashOfConfig":"48"},{"size":7440,"mtime":1614501105177,"results":"77","hashOfConfig":"48"},{"size":3403,"mtime":1614410236160,"results":"78","hashOfConfig":"48"},{"size":7086,"mtime":1614442870188,"results":"79","hashOfConfig":"48"},{"size":1651,"mtime":1614410236160,"results":"80","hashOfConfig":"48"},{"size":4062,"mtime":1614442482228,"results":"81","hashOfConfig":"48"},{"size":1992,"mtime":1614494690939,"results":"82","hashOfConfig":"48"},{"size":553,"mtime":1614409988813,"results":"83","hashOfConfig":"48"},{"size":422,"mtime":1614410236160,"results":"84","hashOfConfig":"48"},{"size":584,"mtime":1614439343457,"results":"85","hashOfConfig":"48"},{"size":750,"mtime":1614409988813,"results":"86","hashOfConfig":"48"},{"size":624,"mtime":1614409988813,"results":"87","hashOfConfig":"48"},{"size":594,"mtime":1614410236160,"results":"88","hashOfConfig":"48"},{"size":772,"mtime":1614409988813,"results":"89","hashOfConfig":"48"},{"size":579,"mtime":1614410236160,"results":"90","hashOfConfig":"48"},{"size":1029,"mtime":1614409988813,"results":"91","hashOfConfig":"48"},{"size":793,"mtime":1614409988813,"results":"92","hashOfConfig":"48"},{"size":332,"mtime":1614409988805,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},"1fk01iq",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"97"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"97"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"97"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"97"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"97"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"97"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"97"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"97"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"97"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"97"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"97"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"97"},"/home/pratik/Documents/mega-soft/src/index.tsx",["202"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\nimport i18n from \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["203","204"],"/home/pratik/Documents/mega-soft/src/reportWebVitals.ts",[],"/home/pratik/Documents/mega-soft/src/App.tsx",["205","206","207","208","209","210","211","212"],"import React, { Suspense, useEffect, useState } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\n//screens\nimport Navigation from \"./Navigation\";\nimport MainHeader from \"./SideNavigation/MainHeader\";\nimport Login from \"./Views/Login\";\nimport Home from \"./Views/Home\";\nimport Appraisal from \"./Views/Appraisal\";\nimport AddAppraisal from \"./Views/AddAppraisal\";\nimport UpdateAppraisal from \"./Views/UpdateAppraisal\";\nimport AppraisalDetail from \"./Views/AppraisalDetail\";\nimport GoalSetting from \"./Views/GoalSetting\";\nimport EmployeeDetails from \"./Views/EmployeeDetails\";\nimport JobHistory from \"./Views/JobHistory\";\nimport UpdateJobHistory from \"./Views/UpdateJobHistory\";\nimport JobHistoryDetails from \"./Views/JobHistoryDetails\";\nimport AddGoals from \"./Views/AddGoals\";\nimport UpdateGoals from \"./Views/UpdateGoals\";\nimport GoalDetails from \"./Views/GoalDetails\";\nimport ChanageColor from \"./components/ChanageColor\";\n\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { validateLogin, login, getAccessToken, handleRefreshToken } from \"./redux/actions/auth\";\n\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport { setCollapedMenu } from \"./redux/actions/roleType\";\nimport { OAuthParameters } from \"./config\";\nimport { Spinner, SpinnerSize } from \"office-ui-fabric-react\";\n\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\n\n  const getOAuthCode = () => {\n    const url = window.location.href;\n    const str = url;\n    const param = \"code=\";\n    let res = str.split(\"&\", 1);\n    let n = res[0].search(param);\n    if (n < 0) {\n      return;\n    }\n    n += param.length;\n    let code = res[0].substr(n);\n    return code;\n  };\n  const dispatch = useDispatch();\n  const auth = useSelector((state: RootState) => state.Auth);\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const [client_id] = useState(OAuthParameters.client_id);\n  const [scope] = useState(\"all\");\n  const code = getOAuthCode();\n\n  const checkAccessToken = () => {\n    const accesstokenData = {\n      client_id: client_id,\n      scope: scope,\n      code: code,\n    };\n    getAccessToken(accesstokenData).then((response: any) => {\n      const access_token = response.data.access_token;\n      const refresh_token = response.data.refresh_token;\n      const expires_in = response.data.expires_in;\n      sessionStorage.setItem('expires_in',expires_in)\n      if (access_token && refresh_token) {\n        dispatch(login(access_token, refresh_token));\n      }\n    });\n    \n  }\n\n\n  useEffect(() => {\n    dispatch(validateLogin());\n    if (code !== undefined) {\n      checkAccessToken();\n    }\n  }, []);\n\n\n  // if (auth.isLoading) {\n  //   console.log(\"isloading\", auth.isLoading);\n  //   return null;\n  // }\n\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  // console.log(\"isloading==>\", auth.isLoading)\n  return (\n    <Suspense fallback={null}>\n      <BrowserRouter>\n        {(auth.isLoggedIn === true && auth.isLoading == false )? (\n          <Switch>\n            <div className=\"page-wrapper\">\n              <Navigation />\n              <main>\n                <div className={selectMenu == false ? `view` : `miniSideBar`}>\n                  <MainHeader>\n                    <div onClick={handlemenuClick}>\n                      <ChevronLeftIcon\n                        style={{\n                          color: \"#FFF\",\n                          cursor: \"pointer\",\n                          marginRight: \"10px\",\n                        }}\n                      />\n                    </div>\n                  </MainHeader>\n                  <Route exact path=\"/home\" component={Home} />\n                  <Route exact path=\"/appraisal\" component={Appraisal} />\n                  <Route exact path=\"/addApprisal\" component={AddAppraisal} />\n                  <Route\n                    exact\n                    path=\"/appraisal/update/:appraisalId\"\n                    component={UpdateAppraisal}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/view/:appraisalId\"\n                    component={AppraisalDetail}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting\"\n                    component={GoalSetting}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/:employeeId/:appraisalId\"\n                    component={EmployeeDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/addjobhistory/:employeeId/:appraisalId\"\n                    component={JobHistory}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/jobhistory/updateJobHistory/:name\"\n                    component={UpdateJobHistory}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/:name\"\n                    component={JobHistoryDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/addgoal/:employeeId/:appraisalId\"\n                    component={AddGoals}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/goals/updategoal/:name\"\n                    component={UpdateGoals}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/goal/goaldetail/:name\"\n                    component={GoalDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/changecolor\"\n                    component={ChanageColor}\n                  />\n                  <Route path=\"/*\" render={() => <Redirect to=\"/home\" />} />\n                  <Route\n                    path=\"/appraisal/goalsetting*\"\n                    render={() => <Redirect to=\"/appraisal/goalsetting\" />}\n                  />\n                </div>\n              </main>\n            </div>\n          </Switch>\n        ) : (\n          auth.isLoading == true ? (\n            <Spinner\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"50px\",\n                color: \"#00597d\",\n              }}\n              size={SpinnerSize.large}\n            />\n          ):\n          (<Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/*\" render={() => <Redirect to=\"/\" />} />\n          </Switch>)\n        ) }\n      </BrowserRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","/home/pratik/Documents/mega-soft/src/redux/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Navigation.tsx",["213","214","215","216","217","218"],"import * as React from \"react\";\nimport {\n  INavLink,\n  INavLinkGroup,\n} from \"office-ui-fabric-react/lib/Nav\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { useHistory, matchPath } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport SideNavigation from \"./SideNavigation\";\n\ninitializeIcons();\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Appraisal\",\n        url: \"\",\n        key: \"key01\",\n        // icon: \"UpgradeAnalysis\",\n        links: [\n          {\n            name: \"Setup\",\n            url: \"/\",\n            icon: \"Settings\",\n            key: \"key02\",\n          },\n          // {\n          //   name: \"Ratings\",\n          //   url: \"/apprisal/rating\",\n          //   icon: \"6PointStar\",\n          //   key: \"key03\",\n          // },\n          // {\n          //   name: \"Periods\",\n          //   url: \"/apprisal/periods\",\n          //   icon: \"Timer\",\n          //   key: \"key04\",\n          // },\n          {\n            name: \"Goal Setting\",\n            url: \"/appraisal/goalsetting\",\n            icon: \"6PointStar\",\n            key: \"key05\",\n          },\n          // {\n          //   name: \"Self Assessment\",\n          //   url: \"\",\n          //   icon: \"6PointStar\",\n          //   key: \"key06\",\n          // },\n          // {\n          //   name: \"Development Plan\",\n          //   url: \"/apprisal/developmentPlan\",\n          //   icon: \"TestPlan\",\n          //   key: \"key07\",\n          // },\n          // {\n          //   name: \"Release Appraisal\",\n          //   url: \"/apprisal/releaseApprisal\",\n          //   icon: \"ReleaseGate\",\n          //   key: \"key08\",\n          // },\n          // {\n          //   name: \"Market Bench Marketing\",\n          //   url: \"/apprisal/marketBenchMarketing\",\n          //   icon: \"Market\",\n          //   key: \"key09\",\n          // },\n        ],\n        isExpanded: true,\n      },\n      {\n        name: \"Manage\",\n        url: \"\",\n        key: \"key10\",\n        // icon:'MedicationAdmin',\n        links: [\n          {\n            name: \"Team Goal Setting\",\n            url: \"/manage/teamGoalSetting\",\n            icon: \"Settings\",\n            key: \"key11\",\n          },\n          {\n            name: \"Team assess\",\n            url: \"/manage/teamAssess\",\n            icon: \"AssessmentGroup\",\n            key: \"key12\",\n          },\n        ],\n        isExpanded: false,\n      },\n      {\n        name: \"Confirmation\",\n        url: \"\",\n        key: \"key13\",\n        expandAriaLabel: \"Expand Admin section\",\n        collapseAriaLabel: \"Collapse admin section\",\n        links: [\n          {\n            name: \"Confirmation Status\",\n            url: \"/confirmation/status\",\n            icon: \"SplitObject\",\n            key: \"key14\",\n          },\n          {\n            name: \"Release\",\n            url: \"/confirmation/release\",\n            key: \"key15\",\n            icon: \"ReleaseGate\",\n          },\n          {\n            name: \"Approval\",\n            url: \"/confirmation/approval\",\n            key: \"key16\",\n            icon: \"DocumentApproval\",\n          },\n          {\n            name: \"Letter\",\n            url: \"/confirmation/letter\",\n            key: \"key17\",\n            icon: \"DietPlanNotebook\",\n          },\n          {\n            name: \"Probation Letter\",\n            url: \"/confirmation/probationLetter\",\n            key: \"key18\",\n            icon: \"QuickNote\",\n          },\n        ],\n        isExpanded: false,\n      },\n    ],\n  },\n];\n\n\nfunction Navigation() {\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n\n  \n  let history = useHistory();\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\n    setSelectedNavKey(item?.key || \"\");\n  };\n  React.useEffect(() => {\n    navLinkGroups[0].links.map((item) => {\n      if (item.links) {\n        item.links.map((subItem) => {\n          if (\n            matchPath(history.location.pathname, {\n              path: subItem.url,\n              exact: true,\n            })\n          ) {\n            setSelectedNavKey(subItem?.key || \"\");\n            return;\n          }\n        });\n      } else {\n        if (\n          matchPath(history.location.pathname, {\n            path: item.url,\n            exact: true,\n          })\n        ) {\n          setSelectedNavKey(item?.key || \"\");\n          return;\n        }\n      }\n    });\n  }, [history.location.pathname]);\n  return (\n    <div id=\"main-wrapper\">\n      {/* <MainHeader /> */}\n      <div\n        className={\n          selectMenu === false\n            ? `sidebar left-sidebar`\n            : `sidebar left-sidebar-collapsed`\n        }\n      >\n        <SideNavigation />\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;\n","/home/pratik/Documents/mega-soft/src/config.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx",["219","220","221","222","223","224","225","226","227"],"import React, { useEffect, useState } from \"react\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport SmsIcon from \"@material-ui/icons/Sms\";\nimport {\n  Dropdown,\n  IDropdownOption,\n  IDropdownStyles,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { logout, revokeToken, userInfo } from \"../redux/actions/auth\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\n\nimport logo_ms from \"../assets/img/logo_ms.png\";\nimport logo_nuage from \"../assets/img/logo_nuage.png\";\nimport { RootState } from \"../redux/reducers\";\nimport moment from \"moment\";\nimport { onChangeLanguage } from \"../redux/actions/application\";\n\nimport i18n from \"../i18n\";\nimport apiUrl from \"../config\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction MainHeader(props: { children: any }) {\n  const { children } = props;\n  const languageOption: IDropdownOption[] = [\n    { key: \"en\", text: \"English\" },\n    { key: \"fr\", text: \"French\" },\n  ];\n  const dispatch = useDispatch();\n  const [userInfoData, setUserInfoData]: any = useState();\n  const selectedLanguage = useSelector(\n    (state: RootState) => state.application.language\n  );\n\n  const userinformation = useSelector(\n    (state: RootState) => state.userData.user\n  );\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n      // color: \"#FFF\",\n      backgroundColor: \"#FFF\",\n    },\n  };\n\n  const handleLanguage = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    // setLanguage(\n    //   item || {\n    //     key: \"\",\n    //     text: \"\",\n    //   }\n    // );\n    let data: any = item?.key || \"\";\n    dispatch(onChangeLanguage(data));\n    i18n.changeLanguage(data);\n\n    // setTimeout(() => {\n    //   Utils.reloadLocale(oldLanguage, languageSelected);\n    //   // history.goBack();\n    // }, 500);\n  };\n\n  const history = useHistory();\n\n  // console.log(\"userInfo\", userinformation);\n\n  const handleLogout = () => {\n    // window.open(`${apiUrl.method}/logout`, \"_self\");\n    logout();\n    dispatch(revokeToken());\n    // window.open(\n    //   `https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/logout?redirect_uri=http://localhost:3000`,\n    //   \"_self\"\n    // );\n  };\n\n  // console.log(\"user response==>\", userInfoData);\n  useEffect((): void => {\n    dispatch(userInfo());\n  }, []);\n\n  const userData = useSelector((state: RootState) => state.userData.UserData);\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const handleNewLang = (code: any) => {\n    dispatch(onChangeLanguage(code));\n    i18n.changeLanguage(code);\n\n    console.log(\"code\", code);\n  };\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"nav-item d-none d-md-block mr-.5\">{children}</div>\n      <div className=\"main-logo\">\n        <img src={logo_nuage} />\n      </div>\n      <div className=\"mx-auto text-white-50\">\n        <Text style={{ marginRight: \"10px\" }}>\n          {/* {i18n.t(\"main_header.welcome\")} {userData[0].name} ({userData[0].id}) */}\n          {i18n.t(\"main_header.welcome\")} {userinformation.full_name} (\n          {userinformation.employee_id})\n        </Text>\n\n        <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n          {i18n.t(\"main_header.logged_in\")} :\n        </Text>\n        <Text style={{ marginRight: \"5px\" }}>\n          {moment(dateNow).format(\"DD-MM-YYYY\")} {timeNow}\n        </Text>\n      </div>\n      <div>\n        <Dropdown\n          options={languageOption}\n          onChange={handleLanguage}\n          placeholder=\"Select language\"\n          selectedKey={\n            languageOption.find((item) => item.key === selectedLanguage)?.key\n          }\n          className=\"rolesDropDown\"\n          styles={dropdownStyles}\n        />\n      </div>\n      <div style={{ cursor: \"pointer\" }} className=\"link-icons px-2 nav-link\">\n        <NotificationsIcon style={{ fontSize: \"2rem\", color: \"#FFF\" }} />\n      </div>\n      <div style={{ cursor: \"pointer\" }} className=\"link-icons px-2 nav-link\">\n        <SmsIcon style={{ fontSize: \"2rem\", color: \"#FFF\" }} />\n      </div>\n      <div\n        style={{ cursor: \"pointer\", color: \"#FFF\" }}\n        className=\"link-icons px-2 nav-link\"\n        onClick={() => {\n          handleLogout();\n        }}\n      >\n        <PowerSettingsNewIcon style={{ fontSize: \"2rem\" }} />\n      </div>\n      <img src={logo_ms} className=\"ms-logo-center\" />\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(MainHeader);\n","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/Views/Home/index.tsx",["228","229","230"],"import React from \"react\";\nimport { IBreadcrumbItem, IBreadcrumbStyles } from \"office-ui-fabric-react\";\nimport Header from \"../../Header\";\n\nexport default function Home() {\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Home\", key: \"d1\", isCurrentItem: true, as: \"h4\" },\n  ];\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  return (\n    <div>\n      {/* <Header item={itemsWithHeading} styles={breadCrumStyle} /> */}\n      <div className=\"content\">\n        <div className=\"data-container\">\n          <div className=\"home-banner\">\n            <div className=\"home-banner-text\">\n              <h1>Megasoft  Solutions</h1>\n              <p>Managing Human Resources - from Cost to Asset</p>\n              <p className=\"instruction\">Please select <span>Performance</span> menu option to proceed.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx",["231"],"import { PrimaryButton } from \"office-ui-fabric-react\";\nimport { connect } from \"react-redux\";\nimport logo_ms from \"../../assets/img/logo_ms.png\";\nimport \"./style.css\";\nimport apiUrl, { OAuthParameters } from \"../../config\";\n\nfunction Login() {\n  return (\n    <div className=\"login-section\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <div className=\"login-banner-image\">\n            <div className=\"login-banner-image-overlay\">\n              <div className=\"overlay-text-alignment\">\n                <div className=\"login-banner-text\">\n                  <h2>Making</h2>\n                  <p>\n                    Organizations Run Effectively By Providing Innovative HRMS\n                    Solutions Globally\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"text-right pt-3 pr-4\">\n            <img src={logo_ms} className=\"ms-logo-login\" />\n          </div>\n          <div className=\"login-form\">\n            <div className=\"login-form-center\">\n              <div\n                style={{\n                  marginTop: \"3rem\",\n                  justifyContent: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <PrimaryButton\n                  text=\"Proceed with Megasoft Login\"\n                  style={{ marginTop: \"20px\" }}\n                  allowDisabledFocus\n                  onClick={() => {\n                    window.open(\n                      `${apiUrl.method}/frappe.integrations.oauth2.authorize?client_id=${OAuthParameters.client_id}&state=${OAuthParameters.state}&response_type=code&scope=all&redirect_uri=${apiUrl.applicationHome}`,\n                      \"_self\"\n                    );\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(Login);\n","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx",["232","233","234","235","236","237","238","239","240","241"],"/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx",["242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],"/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx",["257","258"],"/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx",["259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276"],"/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx",["277","278","279","280","281","282","283"],"/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx",["284","285"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\nimport { OAuthParameters } from \"../../config\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction JobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [appraisalId] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      setEmployeeDetails(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n  const [errMsgFromDate, setErrMsgFromDate] = useState(\"\");\n  const [errMsgToDate, setErrMsgToDate] = useState(\"\");\n  const [client_id] = useState(OAuthParameters.client_id);\n  const [applicationError, setApplicationError] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleApplicationError = (resp: any) => {\n    if (resp.status >= 400 && resp.status <= 499) {\n      let errorMessage = \"Please correct the input data & try again.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    } else if (resp.status >= 500 && resp.status <= 599) {\n      let errorMessage =\n        \"Server error. Please contact system support or try again later.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    }\n  };\n\n  const handleAddJobHistory = () => {\n    if (jobHistoryData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryData.place === \"\") {\n      setErrMsgPlace(\"Place of posting is required\");\n    }\n    if (jobHistoryData.position === \"\") {\n      setErrMsgPosition(\"Position held is required\");\n    }\n    if (jobHistoryData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n\n    if (!fromDate) {\n      setErrMsgFromDate(\"Please select date\");\n    }\n    if (!toDate) {\n      setErrMsgToDate(\"Please select date\");\n    }\n    let checkFromDate = moment(fromDate).format(\"YYYY-MM-DD\");\n    let checkToDate = moment(toDate).format(\"YYYY-MM-DD\");\n    if (checkFromDate > checkToDate) {\n      setErrMsgToDate(\"From date greater than To date\");\n    }\n    const addQuery = {\n      appraisal_id: appraisalId,\n      employee_id: filtersById,\n      key_responsibilities: jobHistoryData.responsibilities,\n      place_of_posting: jobHistoryData.place,\n      position_held: jobHistoryData.position,\n      qualifications: jobHistoryData.qualifications,\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\n    };\n    // if (\n    //   jobHistoryData.responsibilities === \"\" ||\n    //   jobHistoryData.place === \"\" ||\n    //   jobHistoryData.position === \"\" ||\n    //   jobHistoryData.qualifications === \"\" ||\n    //   !fromDate ||\n    //   !toDate\n    // ) {\n    //   return false;\n    // }\n    add_JobHistory(addQuery)\n      .then((response: any) => {\n        setSuccessModal(true);\n      })\n      .catch((error: any) => {\n        if (error.response) {\n          console.log(\"message\", error.response.data);\n          console.log(\"status\", error.response.status);\n          if (error.response.status === 403) {\n            console.log(\n              \"inside 403 error block\",\n              JSON.stringify(error.response)\n            );\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\n            const data = {\n              refresh_token: refresh_token,\n              client_id: client_id,\n            };\n            handleRefreshToken(data)\n              .then((response: any) => {\n                console.log(\"response of refresh token \", response);\n                console.log(\"calling handle appraisal again.\");\n                if (!response.isAxiosError) {\n                  handleAddJobHistory();\n                } else {\n                  console.log(\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\n                    response\n                  );\n                  dispatch(logout());\n                }\n              })\n              .catch((error) => {\n                console.log(\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\n                  error.response\n                );\n                dispatch(logout());\n              });\n          } else {\n            handleApplicationError(error.response);\n          }\n        }\n      });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details card\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryData.position}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryData.place}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeFromDate}\n              value={fromDate}\n              styles={datePickerStyle}\n              textField={{ errorMessage: errMsgFromDate }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeToDate}\n              value={toDate}\n              styles={datePickerStyle}\n              textField={{ errorMessage: errMsgToDate }}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryData.responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={applicationError}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              {/* {t(\"pop_up.success.error_message\")} */}\n              {errorMessage}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import {\n  DetailsList,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IconButton,\n  IDetailsListStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Link,\n  Modal,\n  Pivot,\n  PivotItem,\n  PivotLinkFormat,\n  PrimaryButton,\n  Spinner,\n  SpinnerSize,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistory,\n  jobHistoryData,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport {\n  fetchGoalData,\n  fetchGoalDataName,\n  update_goals,\n} from \"../../redux/actions/goal\";\nimport {\n  fetchDevelopmentPlan,\n  handleDevelopmentDataChange,\n} from \"../../redux/actions/developmentPlan\";\nimport \"./style.css\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction EmployeeDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [doctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start] = useState(0);\n  const [limit] = useState(10);\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByApprisal] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n\n  const [employeeData, setEmployeeData]: any = useState({});\n  const history = useHistory();\n\n  const [currentPage, setCurentPage] = useState(0);\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [limitPageLengthGoal] = useState(5);\n  const [limitStart, setLimitSTart] = useState(0);\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\n\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\n  const [count, setCount] = useState(0);\n\n  const [totalCount, setTotalCount] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [orderByJobHistory] = useState(\"from_date asc\");\n  const [limitPageLengthDevelopment] = useState(5);\n  const [developmentData, setDevelopmentData]: any = useState([]);\n\n  const [goalData, setGoalData]: any = useState({});\n  const [goalCount, setGoalCount] = useState(0);\n  const [employeeCount, setEmployeeCount] = useState(0);\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\n  const [developmentCount, setDevelopmentCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const jobHistoryDataLocal = useSelector(\n    (state: RootState) => state.jobHistory\n  );\n  const { jobHistory, isLoading, total_count }: any = jobHistoryDataLocal;\n  // console.log(\"jobHistoryDataLocal=>\", jobHistory);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    if (filtersByApprisal) {\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\n    }\n    fetchEmployeeDataByID(\n      doctype,\n      limit_start,\n      limit,\n      roleType,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setLoading(true);\n      // console.log(\"employee response ==>\", response);\n      setEmployeeCount(response.count);\n      setEmployeeData(response.data[0]);\n      setLoading(false);\n    });\n  }, [doctype, limit_start, limit, roleType]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    dispatch(\n      jobHistoryData(\n        roleType,\n        JSON.stringify(filters),\n        limitStart,\n        limitPageLength,\n        orderByJobHistory\n      )\n    );\n  }, [roleType, limitStart, limitPageLength, orderByJobHistory]);\n  const newJobHistoryData = jobHistory.map((element: any) => {\n    const a = {\n      ...element,\n      from_date: moment(element.from_date).format(\"DD-MM-YYYY\"),\n      to_date: moment(element.to_date).format(\"DD-MM-YYYY\"),\n    };\n    return a;\n  });\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limitStartGoal,\n      limitPageLengthGoal,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data);\n      setGoalCount(response.count);\n      setGoalTotalCount(response.total_count);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchDevelopmentPlan(\n      limitStartDevelopment,\n      limitPageLengthDevelopment,\n      orderByDevelopment,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Development===>\", response.data);\n      setDevelopmentCount(response.count);\n      let res = response.data;\n      for (let i = response.count; i < 5; i++) {\n        let emptyPlan = {\n          name: \"\",\n          appraisal_id: params.appraisalId,\n          employee_id: params.employeeId,\n          serial_no: i + 1,\n          development_plan: \"\",\n          reviewer_remarks: \"\",\n          frozen: 0,\n        };\n        res.push(emptyPlan);\n      }\n      setDevelopmentData(res);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const updateJobhistory = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\n    );\n  };\n\n  const jobHistoryDetails = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\n    );\n  };\n\n  const handleDevelopemntChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n            ...item,\n            development_plan: value || \"\",\n          }\n          : item\n      )\n    );\n  };\n\n  const handleRemarkChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n            ...item,\n            reviewer_remarks: value || \"\",\n          }\n          : item\n      )\n    );\n  };\n\n  const columnsJobHistory: IColumn[] = [\n    {\n      key: \"06\",\n      name: \"Position Held\",\n      fieldName: \"position_held\",\n      minWidth: 50,\n      maxWidth: 140,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"05\",\n      name: \"Place of Posting\",\n      fieldName: \"place_of_posting\",\n      minWidth: 50,\n      maxWidth: 110,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"From Date\",\n      fieldName: \"from_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"To Date\",\n      fieldName: \"to_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Key Responsibilities\",\n      fieldName: \"key_responsibilities\",\n      minWidth: 60,\n      maxWidth: 350,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 100,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              jobHistoryDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateJobhistory(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons \"\n            onClick={() => {\n              deleteJobHistoryData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [jobHistoryUpdate, setJobHistoryUpdateData]: any = useState({});\n  const [showDeleteSuccessJob, setShowDeleteSuccessJob] = useState(false);\n  const [showDeleteJob, setShowDeleteJob] = useState(false);\n  const [deleteItemJobName, setDeleteItemJobName] = useState(null);\n\n  const deleteJobHistoryData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n    setShowDeleteJob(true);\n  };\n\n  // console.log(\"deleteItemId=>\", updateData)\n\n  const handleDeleteJobhistory = () => {\n    const deleteQuery = {\n      name: jobHistoryUpdate.name,\n      is_deleted: 1,\n    };\n    update_JobHistory(deleteQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      setShowDeleteJob(false);\n      setShowDeleteSuccessJob(true);\n      setDeleteItemJobName(null);\n      setJobHistoryUpdateData(null);\n    });\n  };\n\n  const columnsTraning: IColumn[] = [\n    // {\n    //   key: \"1\",\n    //   name: \"S.No.\",\n    //   fieldName: \"serial_no\",\n    //   minWidth: 20,\n    //   maxWidth: 40,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    //   // onRender: (item, index) => (index || 0) + 1,\n    // },\n    {\n      key: \"02\",\n      name: \"Development Plan/Training Needs\",\n      fieldName: \"development_plan\",\n      minWidth: 60,\n      maxWidth: 550,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            rows={3}\n            value={item.development_plan}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleDevelopemntChange(index, text)}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n    {\n      key: \"03\",\n      name: \"Remark by Appraiser\",\n      fieldName: \"reviewer_remarks\",\n      minWidth: 80,\n      maxWidth: 350,\n      isRowHeader: true,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            readOnly={roleType === \"Employee\" ? true : false}\n            rows={3}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleRemarkChange(index, text)}\n            value={item.reviewer_remarks}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const columnsGoal: IColumn[] = [\n    {\n      key: \"02\",\n      name: \"S.No.\",\n      fieldName: \"order_no\",\n      minWidth: 20,\n      maxWidth: 50,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"11\",\n      name: \"Goal ID\",\n      fieldName: \"name\",\n      minWidth: 40,\n      maxWidth: 60,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"03\",\n      name: \"KRA\",\n      fieldName: \"kra\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"\",\n      fieldName: \"goal_type\",\n      minWidth: 10,\n      maxWidth: 30,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item) => (\n        <div>\n          {item.goal_type == \"Goal\" ? (\n            <div\n              className=\"link-icons\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <ArrowDropDownIcon\n                style={{ color: \"#00597d\", fontSize: \"30px\" }}\n              />\n            </div>\n          ) : (\n              <div\n                className=\"link-icons\"\n                style={{ cursor: \"pointer\" }}\n                onClick={() => {\n                  // console.log(\"item\", item);\n                }}\n              >\n                <RadioButtonUncheckedIcon\n                  style={{\n                    color: \"#00597d\",\n                    fontSize: \"10px\",\n                    marginLeft: \"25px\",\n                  }}\n                />\n              </div>\n            )}\n        </div>\n      ),\n    },\n    {\n      key: \"05\",\n      name: \"Goal\",\n      fieldName: \"goal\",\n      minWidth: 50,\n      maxWidth: 280,\n      isMultiline: true,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"06\",\n      name: \"Measure\",\n      fieldName: \"measure\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Weightage\",\n      fieldName: \"weightage\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Target\",\n      fieldName: \"target\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"Threshold\",\n      fieldName: \"threshold\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"10\",\n      name: \"Stretch\",\n      fieldName: \"stretch\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 80,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              goalDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateGoals(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              deleteGoalData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [deleteItemId, setDeleteItemId] = useState(null);\n  const [updateData, setUpdateData]: any = useState({});\n  const [showDelete, setShowDelete] = useState(false);\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const theme = getTheme();\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const deleteGoalData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      setUpdateData(response.data[0]);\n    });\n    setShowDelete(true);\n  };\n\n\n  const handleDeleteGoal = () => {\n    const deleteQuery = {\n      name: updateData.name,\n      is_deleted: 1,\n    };\n    update_goals(deleteQuery).then((response) => {\n      setShowDelete(false);\n      setShowDeleteSuccess(true);\n      setDeleteItemId(null);\n      setUpdateData(null);\n    });\n  };\n\n\n  const [showDevelopment, setShowDevelopment] = useState(false);\n\n  const handleDevelpmentDatachange = () => {\n    const devPlan = [...developmentData];\n    const changedQuery = {\n      doctype: \"EmployeeDevelopmentPlan\",\n      data: {\n        dev_plans: devPlan,\n      },\n    };\n    handleDevelopmentDataChange(changedQuery).then((response: any) => {\n      setShowDevelopment(true);\n    });\n  };\n\n  const updateGoals = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\n  };\n\n  const goalDetails = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\n  };\n\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      marginTop: \"10px\",\n      backgroundColor: \"#344f84\",\n      paddingBottom: \"0px\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const renderNoData = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          marginTop: \"20px\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text\n          style={{\n            color: \"#aaa\",\n            textAlign: \"center\",\n            padding: 50,\n            fontSize: 30,\n          }}\n        >\n          No Data Found\n        </Text>\n      </div>\n    );\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistory = () => {\n    return (\n      <div>\n        {isLoading ? (\n          <Spinner\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: \"50px\",\n              color: \"#00597d\",\n            }}\n            size={SpinnerSize.large}\n          />\n        ) : jobHistory.length === 0 ? (\n          renderNoData()\n        ) : (\n              <div>\n                <DetailsList\n                  styles={listStyle}\n                  items={newJobHistoryData}\n                  className=\"detail-list\"\n                  columns={columnsJobHistory}\n                  selectionMode={0}\n                />\n                <div className=\"pagination-style\">\n                  <Pagination\n                    format=\"buttons\"\n                    // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                    // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                    selectedPageIndex={currentPage}\n                    pageCount={Math.ceil(totalCount / limitPageLength)}\n                    itemsPerPage={limitPageLength}\n                    totalItemCount={totalCount}\n                    onPageChange={(page) => {\n                      setLimitSTart(page * limitPageLength);\n                      setCurentPage(page);\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addjobhistory/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteJob}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteJobhistory}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccessJob}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGoals = () => {\n    return (\n      <div className=\"form-conatiner\">\n        {goalCount === 0 ? (\n          renderNoData()\n        ) : (\n            <div>\n              <DetailsList\n                styles={listStyle}\n                items={goalData}\n                className=\"detail-list\"\n                columns={columnsGoal}\n                selectionMode={0}\n              />\n              <div className=\"pagination-style\">\n                <Pagination\n                  format=\"buttons\"\n                  selectedPageIndex={currentPageGoal}\n                  pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\n                  itemsPerPage={limitPageLengthGoal}\n                  totalItemCount={goalTotalCount}\n                  onPageChange={(pageGoal) => {\n                    setLimitSTartGoal(pageGoal * limitPageLengthGoal);\n                    setCurentPageGoal(pageGoal);\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDelete}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteGoal}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccess}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTrainingDevelopment = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div>\n          <DetailsList\n            styles={listStyle}\n            items={developmentData}\n            className=\"detail-list\"\n            columns={columnsTraning}\n            selectionMode={0}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Save\"\n                allowDisabledFocus\n                onClick={() => {\n                  handleDevelpmentDatachange();\n                }}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.push(\"/appraisal/goalsetting\");\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDevelopment}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Development data saved successfully.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n\n  const renderEmployeeDetails = () => {\n    return (\n      <div>\n        <div className=\"card\">\n          <div className=\"emp-details-section medium-text\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <span>Employee Id</span> : {employeeData.employee_id}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Employee Name</span> : {employeeData.employee_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Designation</span> : {employeeData.designation}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Location</span> : {employeeData.location}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Department</span> : {employeeData.department}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Date of Joining</span> :{\" \"}\n                {moment(employeeData.date_of_joining).format(\"DD-MM-YYYY\")}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reporting Officer</span> : {employeeData.manager_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reviewer</span> : {employeeData.reviewer_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Counter signing</span> :{\" \"}\n                {employeeData.counter_signing_name}\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <div\n          style={{ marginTop: \"10px\" }}\n          className=\"card employee-details-tabs\"\n        >\n          <Pivot linkFormat={PivotLinkFormat.tabs}>\n            <PivotItem\n              headerButtonProps={{\n                \"data-order\": 1,\n                \"data-title\": \"My Files Title\",\n              }}\n              headerText=\"Job History\"\n            >\n              {renderJobHistory()}\n            </PivotItem>\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\n            <PivotItem headerText=\"Training/ Development Plan\">\n              {renderTrainingDevelopment()}\n            </PivotItem>\n          </Pivot>\n        </div>\n      </div>\n    );\n  };\n\n\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          {loading ? (\n            <Spinner\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"80px\",\n                color: \"#00597d\",\n              }}\n              size={SpinnerSize.large}\n            />\n          ) : employeeCount === 0 ? (\n            renderNoData()\n          ) : (\n                renderEmployeeDetails()\n              )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(EmployeeDetails);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx",["302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistory,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\nimport { OAuthParameters } from \"../../config\";\nimport applicationError from \"../../applicationError\";\n\ninterface ParamTypes {\n  name: string;\n}\n\nfunction UpdateJobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"name\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {},\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryUpdateData({\n      ...jobHistoryUpdateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const jobHistoryClicked = () => {\n    history.goBack();\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [client_id] = useState(OAuthParameters.client_id);\n  const [applicationError, setApplicationError] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleApplicationError = (resp: any) => {\n    if (resp.status >= 400 && resp.status <= 499) {\n      let errorMessage = \"Please correct the input data & try again.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    } else if (resp.status >= 500 && resp.status <= 599) {\n      let errorMessage =\n        \"Server error. Please contact system support or try again later.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    }\n  };\n\n  const handleUpdateJobHistory = () => {\n    if (jobHistoryUpdateData.key_responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryUpdateData.place_of_posting === \"\") {\n      setErrMsgPlace(\"Place of Posting is required\");\n    }\n    if (jobHistoryUpdateData.position_held === \"\") {\n      setErrMsgPosition(\"Position Held is required\");\n    }\n    if (jobHistoryUpdateData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const updateQuery = {\n      ...jobHistoryUpdateData,\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\n    };\n    update_JobHistory(updateQuery)\n      .then((response: any) => {\n        setSuccessModal(true);\n      })\n      .catch((error: any) => {\n        if (error.response) {\n          console.log(\"message\", error.response.data);\n          console.log(\"status\", error.response.status);\n          if (error.response.status === 403) {\n            console.log(\n              \"inside 403 error block\",\n              JSON.stringify(error.response)\n            );\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\n            const data = {\n              refresh_token: refresh_token,\n              client_id: client_id,\n            };\n            handleRefreshToken(data)\n              .then((response: any) => {\n                console.log(\"response of refresh token \", response);\n                console.log(\"calling handle appraisal again.\");\n                if (!response.isAxiosError) {\n                  handleUpdateJobHistory();\n                } else {\n                  console.log(\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\n                    response\n                  );\n                  dispatch(logout());\n                }\n              })\n              .catch((error) => {\n                console.log(\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\n                  error.response\n                );\n                dispatch(logout());\n              });\n          } else {\n            handleApplicationError(error.response);\n          }\n        }\n      });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card jobHistory-details\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryUpdateData.position_held}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position_held\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryUpdateData.place_of_posting}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place_of_posting\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.from_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  from_date: date,\n                })\n              }\n              styles={datePickerStyle}\n            // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.to_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  to_date: date,\n                })\n              }\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryUpdateData.key_responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"key_responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryUpdateData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History updated successfully.{\" \"}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={applicationError}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              {/* {t(\"pop_up.success.error_message\")} */}\n              {errorMessage}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateJobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx",["314","315","316","317","318","319","320","321"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistoryByName,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  PrimaryButton,\n  Stack,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nfunction JobHistoryDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\n      (response) => {\n        setEmployeeDetails(response.data[0]);\n      }\n    );\n  }, []);\n\n\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const fromDateFormat = moment(employeeDetails.from_date).format(\"DD-MM-YYYY\");\n  const toDateFormat = moment(employeeDetails.to_date).format(\"DD-MM-YYYY\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>Position Held</span> : {employeeDetails.position_held}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Place of Posting</span> : {employeeDetails.place_of_posting}\n            </div>\n            <div className=\"col-md-4\">\n              <span>From Date</span> : {fromDateFormat}\n            </div>\n            <div className=\"col-md-8\">\n              <span>To Date</span> : {toDateFormat}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Key Responsibilities</span> :{\" \"}\n              {employeeDetails.key_responsibilities}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Qualifications</span> : {employeeDetails.qualifications}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistoryDetails);\n","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx",["322","323","324","325","326","327","328","329","330","331"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { add_goals, fetchGoalData } from \"../../redux/actions/goal\";\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\nimport { OAuthParameters } from \"../../config\";\nimport applicationError from \"../../applicationError\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction AddGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [goalInputData, setGoalInputData] = useState({\n    goal: \"\",\n    goal_type: \"\",\n    kra: \"\",\n    measure: \"\",\n    order_no: \"\",\n    parent_goal_id: \"\",\n    stretch: \"\",\n    target: \"\",\n    threshold: \"\",\n    weightage: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalInputData({\n      ...goalInputData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Add Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n  const [client_id] = useState(OAuthParameters.client_id);\n  const [applicationError, setApplicationError] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleApplicationError = (resp: any) => {\n    if (resp.status >= 400 && resp.status <= 499) {\n      let errorMessage = \"Please correct the input data & try again.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    } else if (resp.status >= 500 && resp.status <= 599) {\n      let errorMessage =\n        \"Server error. Please contact system support or try again later.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    }\n  };\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleAddGoals = () => {\n    if (goalInputData.order_no === \"\") {\n      setErrMsgOrder(\"Order number is required\");\n    }\n    if (goalInputData.kra === \"\") {\n      setErrMsgKra(\"KRA is required\");\n    }\n    if (goalInputData.goal === \"\") {\n      setErrMsgGoal(\"Goal is required\");\n    }\n    if (goalInputData.measure === \"\") {\n      setErrMsgMeasure(\"Measure is required\");\n    }\n    if (goalInputData.weightage === \"\") {\n      setErrMsgWeightage(\"Weightage is required\");\n    }\n    if (goalType.text === \"\") {\n      setErrMsgGoalType(\"Select goal type\");\n    }\n    if (\n      goalInputData.order_no === \"\" ||\n      goalInputData.kra === \"\" ||\n      goalInputData.goal === \"\" ||\n      goalInputData.measure === \"\" ||\n      goalInputData.weightage === \"\" ||\n      goalType.text === \"\"\n    ) {\n      return false;\n    }\n    const addQuery = {\n      appraisal_id: params.appraisalId,\n      employee_id: params.employeeId,\n      goal_type: goalType.text,\n      goal: goalInputData.goal,\n      kra: goalInputData.kra,\n      order_no: goalInputData.order_no,\n      measure: goalInputData.measure,\n      parent_goal_id: goalInputData.parent_goal_id,\n      stretch: goalInputData.stretch,\n      target: goalInputData.target,\n      threshold: goalInputData.threshold,\n      weightage: goalInputData.weightage,\n    };\n    add_goals(addQuery)\n      .then((response: any) => {\n        setSuccessModal(true);\n      })\n      .catch((error: any) => {\n        if (error.response) {\n          console.log(\"message\", error.response.data);\n          console.log(\"status\", error.response.status);\n          if (error.response.status === 403) {\n            console.log(\n              \"inside 403 error block\",\n              JSON.stringify(error.response)\n            );\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\n            const data = {\n              refresh_token: refresh_token,\n              client_id: client_id,\n            };\n            handleRefreshToken(data)\n              .then((response: any) => {\n                console.log(\"response of refresh token \", response);\n                console.log(\"calling handle appraisal again.\");\n                if (!response.isAxiosError) {\n                  handleAddGoals();\n                } else {\n                  console.log(\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\n                    response\n                  );\n                  dispatch(logout());\n                }\n              })\n              .catch((error) => {\n                console.log(\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\n                  error.response\n                );\n                dispatch(logout());\n              });\n          } else {\n            handleApplicationError(error.response);\n          }\n        }\n      });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              disabled={true}\n              label=\"ID\"\n              // value={goalData.name}\n              placeholder=\"New\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={goalInputData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              onChange={onChangeGoalType}\n              options={goalOptions}\n            // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={goalType.text === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={goalInputData.parent_goal_id}\n              placeholder=\"Enter parent goal ID \"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={goalInputData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={goalInputData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={goalInputData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={goalInputData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={goalInputData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={goalInputData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={goalInputData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddGoals}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={applicationError}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              {/* {t(\"pop_up.success.error_message\")} */}\n              {errorMessage}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AddGoals);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx",["332","333"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { fetchGoalDataName, update_goals } from \"../../redux/actions/goal\";\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\nimport { OAuthParameters } from \"../../config\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction UpdateGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy] = useState(\"order_no asc\");\n  const [filtersByName] = useState(params.name);\n\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [updateGoalData, setUpdateGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      // console.log(\"response of Goal===>\", response.data);\n      setUpdateGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateGoalData({\n      ...updateGoalData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Update Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n  const [client_id] = useState(OAuthParameters.client_id);\n  const [applicationError, setApplicationError] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleApplicationError = (resp: any) => {\n    if (resp.status >= 400 && resp.status <= 499) {\n      let errorMessage = \"Please correct the input data & try again.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    } else if (resp.status >= 500 && resp.status <= 599) {\n      let errorMessage =\n        \"Server error. Please contact system support or try again later.\";\n      setErrorMessage(errorMessage);\n      setApplicationError(true);\n    }\n  };\n\n  const handleUpdateGoal = () => {\n    if (updateGoalData.order_no === \"\") {\n      setErrMsgOrder(\"Order number is required\");\n    }\n    if (updateGoalData.kra === \"\") {\n      setErrMsgKra(\"KRA is required\");\n    }\n    if (updateGoalData.goal === \"\") {\n      setErrMsgGoal(\"Goal is required\");\n    }\n    if (updateGoalData.measure === \"\") {\n      setErrMsgMeasure(\"Measure is required\");\n    }\n    if (updateGoalData.weightage === \"\") {\n      setErrMsgWeightage(\"Weightage is required\");\n    }\n    const addQuery = {\n      ...updateGoalData,\n    };\n    update_goals(addQuery)\n      .then((response: any) => {\n        setSuccessModal(true);\n      })\n      .catch((error: any) => {\n        if (error.response) {\n          console.log(\"message\", error.response.data);\n          console.log(\"status\", error.response.status);\n          if (error.response.status === 403) {\n            console.log(\n              \"inside 403 error block\",\n              JSON.stringify(error.response)\n            );\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\n            const data = {\n              refresh_token: refresh_token,\n              client_id: client_id,\n            };\n            handleRefreshToken(data)\n              .then((response: any) => {\n                console.log(\"response of refresh token \", response);\n                console.log(\"calling handle appraisal again.\");\n                if (!response.isAxiosError) {\n                  handleUpdateGoal();\n                } else {\n                  console.log(\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\n                    response\n                  );\n                  dispatch(logout());\n                }\n              })\n              .catch((error) => {\n                console.log(\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\n                  error.response\n                );\n                dispatch(logout());\n              });\n          } else {\n            handleApplicationError(error.response);\n          }\n        }\n      });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              readOnly={true}\n              label=\"ID\"\n              value={params.name}\n              placeholder=\"Enter your job position\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={updateGoalData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              selectedKey={\n                goalOptions.find(\n                  (item) => item.text === updateGoalData.goal_type\n                )?.key\n              }\n              onChange={(ev, item) =>\n                setUpdateGoalData({\n                  ...updateGoalData,\n                  goal_type: item?.text,\n                })\n              }\n              options={goalOptions}\n            // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={updateGoalData.goal_type === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={updateGoalData.parent_goal_id}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\"></div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={updateGoalData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <div className=\"goal-details\"></div>\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={updateGoalData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={updateGoalData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={updateGoalData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={updateGoalData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={updateGoalData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={updateGoalData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateGoal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal updated successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={applicationError}\n            isBlocking={false}\n            styles={modalStyle}\n          // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              {/* {t(\"pop_up.success.error_message\")} */}\n              {errorMessage}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setApplicationError(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateGoals);\n","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx",["334","335","336","337","338"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDropdownOption,\n  PrimaryButton,\n  Stack,\n} from \"office-ui-fabric-react\";\nimport { fetchGoalDataName } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\n\nfunction GoalDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const [limitPageLength] = useState(5);\n  //   console.log(params.name);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n\n  const [goalDetails, setGoalDetails]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setGoalDetails(response.data[0]);\n    });\n  }, []);\n\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalDetails({\n      ...goalDetails,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/appraisal\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>ID</span> : {params.name}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Order Number</span> : {goalDetails.order_no}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal Type</span> : {goalDetails.goal_type}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Parent Goal</span> : {goalDetails.parent_goal_id}\n            </div>\n            <div className=\"col-md-4\">\n              <span>KRA</span> : {goalDetails.kra}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal</span> : {goalDetails.goal}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Measure</span> : {goalDetails.measure}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Weightage</span> : {goalDetails.weightage}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Target</span> : {goalDetails.target}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Threshold</span> : {goalDetails.threshold}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Stretch</span> :{\" \"}\n              {/* {goalDetails.stretch == \"\" ? \"N/A\" : goalDetails.stretch} */}\n              {goalDetails.stretch}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalDetails);\n","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx",[],"/home/pratik/Documents/mega-soft/src/i18n.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx",["339","340","341"],"import React, { useEffect } from \"react\";\nimport \"./style.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\nimport { setMenuType, setRoleType } from \"../redux/actions/roleType\";\nimport { ProSidebar, Menu, MenuItem, SubMenu, SidebarHeader } from \"react-pro-sidebar\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\n//icons\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\n\nimport { DefaultTheme } from \"../../src/Utils/color\";\nimport { useTranslation } from \"react-i18next/\";\nimport { sideNavigationData } from \"../redux/actions/navigation\";\nimport { Spinner, SpinnerSize } from \"office-ui-fabric-react\";\n\nfunction SideNavigation() {\n  const { t, i18n } = useTranslation();\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const sideMenuData = useSelector((state: RootState) => state.navigationData);\n  const menuData = sideMenuData.navigationData;\n  const isLoading = sideMenuData.isLoading;\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect((): void => {\n    dispatch(sideNavigationData(menuType));\n  }, [menuType]);\n\n  const handleRoleMenu = (e: any, item: any) => {\n    dispatch(setRoleType(item));\n  };\n\n  const checkMenuPermission = (role: any, menuType: any): boolean => {\n    for (let i = 0; i < menuData[\"ms-menu\"].length; i++) {\n      if (menuData[\"ms-menu\"][i].role === role) {\n        let menu = menuData[\"ms-menu\"];\n        for (let j = 0; j < menu[i][\"menu-items\"].length; j++) {\n          if (menu[i][\"menu-items\"][j] === menuType) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const menu: any = [];\n\n  if (!isLoading) {\n    for (let i = 0; i < menuData[\"ms-menu\"].length; i++) {\n      menu.push(\n        <button\n          onClick={(event) => {\n            handleRoleMenu(event, menuData[\"ms-menu\"][i].role);\n          }}\n        >\n          {menuData[\"ms-menu\"][i].role}\n        </button>\n      );\n      menu.push(\n        <Menu\n          style={\n            roleType !== menuData[\"ms-menu\"][i].role ? { display: \"none\" } : {}\n          }\n          popperArrow={true}\n          iconShape=\"circle\"\n        >\n          <SubMenu\n            title={i18n.t(\"nav.performance.appraisal-menu\")}\n            icon={<BarChartIcon />}\n          >\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.appraisal.setup\"\n            ) === true ? (\n                <MenuItem icon={<SettingsIcon />}>\n                  {i18n.t(\"nav.performance.appraisal.Setup\")}\n                  <Link to=\"/appraisal\" />\n                </MenuItem>\n              ) : null}\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.appraisal.goal-setting\"\n            ) === true ? (\n                <MenuItem icon={<ListIcon />}>\n                  {i18n.t(\"nav.performance.appraisal.goal-setting\")}\n                  <Link to=\"/appraisal/goalsetting\" />\n                </MenuItem>\n              ) : null}\n\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.appraisal.self-assessment\"\n            ) === true ? (\n                <MenuItem icon={<AssessmentIcon />}>\n                  {i18n.t(\"nav.performance.appraisal.self-assessment\")}\n                </MenuItem>\n              ) : null}\n\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.appraisal.team-goal-setting\"\n            ) === true ? (\n                <MenuItem icon={<ListIcon />}>\n                  {i18n.t(\"nav.performance.appraisal.team-goal-setting\")}\n                  <Link to=\"/appraisal/goalsetting\" />\n                </MenuItem>\n              ) : null}\n\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.appraisal.team-assessment\"\n            ) === true ? (\n                <MenuItem icon={<AssessmentIcon />}>\n                  {i18n.t(\"nav.performance.appraisal.team-assessment\")}\n                </MenuItem>\n              ) : null}\n          </SubMenu>\n          <SubMenu\n            title={i18n.t(\"nav.performance.confirmation-menu\")}\n            icon={<AssignmentTurnedInIcon />}\n          >\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.confirmation.letter\"\n            ) === true ? (\n                <MenuItem icon={<CachedIcon />}>\n                  {i18n.t(\"nav.performance.confirmation.confirmation-letter\")}\n                </MenuItem>\n              ) : null}\n\n            {checkMenuPermission(\n              menuData[\"ms-menu\"][i].role,\n              \"nav.performance.confirmation-status\"\n            ) === true ? (\n                <MenuItem icon={<CachedIcon />}>\n                  {i18n.t(\"nav.performance.confirmation.confirmation-status\")}\n                </MenuItem>\n              ) : null}\n          </SubMenu>\n        </Menu>\n      );\n    }\n  }\n\n  const menuItem = () => {\n    return (\n      <ProSidebar\n        collapsed={selectMenu}\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\n      >\n        <SidebarHeader\n          className=\"sidebar-ell\"\n        >\n          <HomeIcon\n            onClick={() => {\n              dispatch(setMenuType(\"1\"));\n              history.push('/home');\n            }}\n\n          /> <span>Performance</span>\n        </SidebarHeader>\n        {menu}\n      </ProSidebar>\n    );\n  };\n\n\n\n  const handleOtherMenu = (event: any, item: any) => {\n    dispatch(setMenuType(\"0\"));\n    history.push('/appraisal')\n  };\n\n  const localMenuItem = () => {\n    return !isLoading ? (\n      <ProSidebar\n        collapsed={selectMenu}\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\n      >\n        <SidebarHeader\n        // onClick={() => {\n        //   dispatch(setMenuType(\"0\"));\n        // }}\n        >\n          <HomeIcon />\n          HRMS\n        </SidebarHeader>\n        <Menu popperArrow={true} iconShape=\"circle\" style={{}}>\n          <MenuItem icon={<PersonIcon />} style={{ marginBottom: \"20px\" }}>\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][0])}\n          </MenuItem>\n          <MenuItem icon={<BarChartIcon />} style={{ marginBottom: \"20px\" }}>\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][1])}\n          </MenuItem>\n          <MenuItem\n            icon={<AssignmentTurnedInIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Performance\");\n            }}\n          >\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][2])}\n          </MenuItem>\n          <MenuItem\n            icon={<ImportExportIcon />}\n            style={{ marginBottom: \"20px\" }}\n          >\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][3])}\n          </MenuItem>\n        </Menu>\n      </ProSidebar>\n    ) : (\n        <Spinner\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"50px\",\n            color: \"#00597d\",\n          }}\n          size={SpinnerSize.large}\n        />\n      );\n  };\n\n  return (\n    <React.Fragment>\n      {menuType == 0 ? menuItem() : localMenuItem()}\n    </React.Fragment>\n  );\n}\n\nexport default SideNavigation;\n","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Header.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx",["342"],"/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx",[],"/home/pratik/Documents/mega-soft/src/Utils/color.tsx",["343","344"],"import { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\n\n// const colorsList = useSelector((state: RootState) => state.application);\n\n// console.log(\"colorsList\", colorsList);\n\nexport const DefaultTheme = {\n  colors: {\n    primary: \"#00597d\",\n    primaryDark: \"006994 \",\n    white: \"#FFF\",\n  },\n};\n",{"ruleId":"345","severity":1,"message":"346","line":8,"column":8,"nodeType":"347","messageId":"348","endLine":8,"endColumn":12},{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"345","severity":1,"message":"353","line":23,"column":48,"nodeType":"347","messageId":"348","endLine":23,"endColumn":66},{"ruleId":"345","severity":1,"message":"354","line":35,"column":10,"nodeType":"347","messageId":"348","endLine":35,"endColumn":17},{"ruleId":"345","severity":1,"message":"355","line":35,"column":19,"nodeType":"347","messageId":"348","endLine":35,"endColumn":29},{"ruleId":"345","severity":1,"message":"356","line":36,"column":9,"nodeType":"347","messageId":"348","endLine":36,"endColumn":17},{"ruleId":"357","severity":1,"message":"358","line":82,"column":6,"nodeType":"359","endLine":82,"endColumn":8,"suggestions":"360"},{"ruleId":"361","severity":1,"message":"362","line":102,"column":54,"nodeType":"363","messageId":"364","endLine":102,"endColumn":56},{"ruleId":"361","severity":1,"message":"362","line":107,"column":44,"nodeType":"363","messageId":"364","endLine":107,"endColumn":46},{"ruleId":"361","severity":1,"message":"362","line":187,"column":26,"nodeType":"363","messageId":"364","endLine":187,"endColumn":28},{"ruleId":"345","severity":1,"message":"365","line":145,"column":10,"nodeType":"347","messageId":"348","endLine":145,"endColumn":24},{"ruleId":"345","severity":1,"message":"366","line":146,"column":9,"nodeType":"347","messageId":"348","endLine":146,"endColumn":20},{"ruleId":"367","severity":1,"message":"368","line":150,"column":39,"nodeType":"369","messageId":"370","endLine":150,"endColumn":41},{"ruleId":"367","severity":1,"message":"368","line":152,"column":34,"nodeType":"369","messageId":"370","endLine":152,"endColumn":36},{"ruleId":"367","severity":1,"message":"371","line":160,"column":13,"nodeType":"372","messageId":"373","endLine":160,"endColumn":20},{"ruleId":"367","severity":1,"message":"371","line":171,"column":11,"nodeType":"372","messageId":"373","endLine":171,"endColumn":18},{"ruleId":"345","severity":1,"message":"374","line":21,"column":8,"nodeType":"347","messageId":"348","endLine":21,"endColumn":14},{"ruleId":"345","severity":1,"message":"375","line":31,"column":10,"nodeType":"347","messageId":"348","endLine":31,"endColumn":22},{"ruleId":"345","severity":1,"message":"376","line":31,"column":24,"nodeType":"347","messageId":"348","endLine":31,"endColumn":39},{"ruleId":"345","severity":1,"message":"377","line":69,"column":9,"nodeType":"347","messageId":"348","endLine":69,"endColumn":16},{"ruleId":"357","severity":1,"message":"378","line":86,"column":6,"nodeType":"359","endLine":86,"endColumn":8,"suggestions":"379"},{"ruleId":"345","severity":1,"message":"380","line":88,"column":9,"nodeType":"347","messageId":"348","endLine":88,"endColumn":17},{"ruleId":"345","severity":1,"message":"381","line":93,"column":9,"nodeType":"347","messageId":"348","endLine":93,"endColumn":22},{"ruleId":"382","severity":1,"message":"383","line":104,"column":9,"nodeType":"384","endLine":104,"endColumn":33},{"ruleId":"382","severity":1,"message":"383","line":147,"column":7,"nodeType":"384","endLine":147,"endColumn":55},{"ruleId":"345","severity":1,"message":"385","line":3,"column":8,"nodeType":"347","messageId":"348","endLine":3,"endColumn":14},{"ruleId":"345","severity":1,"message":"386","line":6,"column":9,"nodeType":"347","messageId":"348","endLine":6,"endColumn":44},{"ruleId":"345","severity":1,"message":"387","line":10,"column":9,"nodeType":"347","messageId":"348","endLine":10,"endColumn":51},{"ruleId":"382","severity":1,"message":"383","line":28,"column":13,"nodeType":"384","endLine":28,"endColumn":60},{"ruleId":"345","severity":1,"message":"388","line":55,"column":27,"nodeType":"347","messageId":"348","endLine":55,"endColumn":45},{"ruleId":"345","severity":1,"message":"389","line":65,"column":37,"nodeType":"347","messageId":"348","endLine":65,"endColumn":42},{"ruleId":"345","severity":1,"message":"390","line":66,"column":10,"nodeType":"347","messageId":"348","endLine":66,"endColumn":20},{"ruleId":"345","severity":1,"message":"391","line":66,"column":22,"nodeType":"347","messageId":"348","endLine":66,"endColumn":35},{"ruleId":"345","severity":1,"message":"392","line":68,"column":9,"nodeType":"347","messageId":"348","endLine":68,"endColumn":15},{"ruleId":"357","severity":1,"message":"393","line":106,"column":6,"nodeType":"359","endLine":116,"endColumn":4,"suggestions":"394"},{"ruleId":"345","severity":1,"message":"395","line":269,"column":10,"nodeType":"347","messageId":"348","endLine":269,"endColumn":20},{"ruleId":"361","severity":1,"message":"362","line":484,"column":23,"nodeType":"363","messageId":"364","endLine":484,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":487,"column":23,"nodeType":"363","messageId":"364","endLine":487,"endColumn":25},{"ruleId":"361","severity":1,"message":"362","line":594,"column":29,"nodeType":"363","messageId":"364","endLine":594,"endColumn":31},{"ruleId":"345","severity":1,"message":"396","line":25,"column":3,"nodeType":"347","messageId":"348","endLine":25,"endColumn":14},{"ruleId":"345","severity":1,"message":"397","line":27,"column":3,"nodeType":"347","messageId":"348","endLine":27,"endColumn":11},{"ruleId":"345","severity":1,"message":"398","line":72,"column":9,"nodeType":"347","messageId":"348","endLine":72,"endColumn":20},{"ruleId":"345","severity":1,"message":"399","line":76,"column":10,"nodeType":"347","messageId":"348","endLine":76,"endColumn":21},{"ruleId":"345","severity":1,"message":"400","line":76,"column":23,"nodeType":"347","messageId":"348","endLine":76,"endColumn":37},{"ruleId":"345","severity":1,"message":"401","line":77,"column":10,"nodeType":"347","messageId":"348","endLine":77,"endColumn":19},{"ruleId":"345","severity":1,"message":"402","line":77,"column":21,"nodeType":"347","messageId":"348","endLine":77,"endColumn":33},{"ruleId":"345","severity":1,"message":"403","line":356,"column":10,"nodeType":"347","messageId":"348","endLine":356,"endColumn":18},{"ruleId":"345","severity":1,"message":"404","line":356,"column":20,"nodeType":"347","messageId":"348","endLine":356,"endColumn":31},{"ruleId":"345","severity":1,"message":"405","line":357,"column":10,"nodeType":"347","messageId":"348","endLine":357,"endColumn":18},{"ruleId":"345","severity":1,"message":"406","line":357,"column":20,"nodeType":"347","messageId":"348","endLine":357,"endColumn":31},{"ruleId":"345","severity":1,"message":"354","line":358,"column":10,"nodeType":"347","messageId":"348","endLine":358,"endColumn":17},{"ruleId":"345","severity":1,"message":"407","line":359,"column":10,"nodeType":"347","messageId":"348","endLine":359,"endColumn":17},{"ruleId":"345","severity":1,"message":"408","line":359,"column":19,"nodeType":"347","messageId":"348","endLine":359,"endColumn":29},{"ruleId":"345","severity":1,"message":"409","line":899,"column":9,"nodeType":"347","messageId":"348","endLine":899,"endColumn":24},{"ruleId":"357","severity":1,"message":"410","line":56,"column":6,"nodeType":"359","endLine":56,"endColumn":8,"suggestions":"411"},{"ruleId":"345","severity":1,"message":"409","line":191,"column":9,"nodeType":"347","messageId":"348","endLine":191,"endColumn":24},{"ruleId":"345","severity":1,"message":"412","line":5,"column":3,"nodeType":"347","messageId":"348","endLine":5,"endColumn":11},{"ruleId":"345","severity":1,"message":"413","line":26,"column":10,"nodeType":"347","messageId":"348","endLine":26,"endColumn":26},{"ruleId":"345","severity":1,"message":"414","line":27,"column":10,"nodeType":"347","messageId":"348","endLine":27,"endColumn":25},{"ruleId":"345","severity":1,"message":"415","line":31,"column":11,"nodeType":"347","messageId":"348","endLine":31,"endColumn":12},{"ruleId":"345","severity":1,"message":"416","line":32,"column":19,"nodeType":"347","messageId":"348","endLine":32,"endColumn":29},{"ruleId":"345","severity":1,"message":"417","line":33,"column":23,"nodeType":"347","messageId":"348","endLine":33,"endColumn":36},{"ruleId":"345","severity":1,"message":"418","line":34,"column":17,"nodeType":"347","messageId":"348","endLine":34,"endColumn":25},{"ruleId":"345","severity":1,"message":"419","line":35,"column":10,"nodeType":"347","messageId":"348","endLine":35,"endColumn":14},{"ruleId":"345","severity":1,"message":"420","line":35,"column":16,"nodeType":"347","messageId":"348","endLine":35,"endColumn":23},{"ruleId":"345","severity":1,"message":"388","line":37,"column":27,"nodeType":"347","messageId":"348","endLine":37,"endColumn":45},{"ruleId":"345","severity":1,"message":"421","line":38,"column":10,"nodeType":"347","messageId":"348","endLine":38,"endColumn":20},{"ruleId":"345","severity":1,"message":"422","line":41,"column":10,"nodeType":"347","messageId":"348","endLine":41,"endColumn":18},{"ruleId":"345","severity":1,"message":"389","line":45,"column":49,"nodeType":"347","messageId":"348","endLine":45,"endColumn":54},{"ruleId":"345","severity":1,"message":"423","line":46,"column":9,"nodeType":"347","messageId":"348","endLine":46,"endColumn":20},{"ruleId":"345","severity":1,"message":"424","line":47,"column":24,"nodeType":"347","messageId":"348","endLine":47,"endColumn":39},{"ruleId":"345","severity":1,"message":"425","line":57,"column":9,"nodeType":"347","messageId":"348","endLine":57,"endColumn":48},{"ruleId":"345","severity":1,"message":"426","line":66,"column":9,"nodeType":"347","messageId":"348","endLine":66,"endColumn":27},{"ruleId":"357","severity":1,"message":"378","line":93,"column":6,"nodeType":"359","endLine":93,"endColumn":75,"suggestions":"427"},{"ruleId":"345","severity":1,"message":"397","line":9,"column":3,"nodeType":"347","messageId":"348","endLine":9,"endColumn":11},{"ruleId":"357","severity":1,"message":"410","line":94,"column":6,"nodeType":"359","endLine":94,"endColumn":8,"suggestions":"428"},{"ruleId":"345","severity":1,"message":"429","line":168,"column":26,"nodeType":"347","messageId":"348","endLine":168,"endColumn":43},{"ruleId":"345","severity":1,"message":"430","line":179,"column":10,"nodeType":"347","messageId":"348","endLine":179,"endColumn":21},{"ruleId":"345","severity":1,"message":"431","line":206,"column":9,"nodeType":"347","messageId":"348","endLine":206,"endColumn":28},{"ruleId":"345","severity":1,"message":"354","line":249,"column":10,"nodeType":"347","messageId":"348","endLine":249,"endColumn":17},{"ruleId":"345","severity":1,"message":"355","line":249,"column":19,"nodeType":"347","messageId":"348","endLine":249,"endColumn":29},{"ruleId":"345","severity":1,"message":"432","line":40,"column":10,"nodeType":"347","messageId":"348","endLine":40,"endColumn":25},{"ruleId":"357","severity":1,"message":"433","line":60,"column":6,"nodeType":"359","endLine":60,"endColumn":8,"suggestions":"434"},{"ruleId":"345","severity":1,"message":"435","line":77,"column":33,"nodeType":"347","messageId":"348","endLine":77,"endColumn":57},{"ruleId":"345","severity":1,"message":"436","line":78,"column":30,"nodeType":"347","messageId":"348","endLine":78,"endColumn":51},{"ruleId":"345","severity":1,"message":"389","line":79,"column":10,"nodeType":"347","messageId":"348","endLine":79,"endColumn":15},{"ruleId":"345","severity":1,"message":"437","line":79,"column":17,"nodeType":"347","messageId":"348","endLine":79,"endColumn":25},{"ruleId":"345","severity":1,"message":"438","line":81,"column":22,"nodeType":"347","messageId":"348","endLine":81,"endColumn":35},{"ruleId":"345","severity":1,"message":"439","line":82,"column":19,"nodeType":"347","messageId":"348","endLine":82,"endColumn":29},{"ruleId":"345","severity":1,"message":"440","line":91,"column":10,"nodeType":"347","messageId":"348","endLine":91,"endColumn":26},{"ruleId":"345","severity":1,"message":"441","line":97,"column":34,"nodeType":"347","messageId":"348","endLine":97,"endColumn":45},{"ruleId":"357","severity":1,"message":"442","line":121,"column":6,"nodeType":"359","endLine":121,"endColumn":45,"suggestions":"443"},{"ruleId":"357","severity":1,"message":"444","line":137,"column":6,"nodeType":"359","endLine":137,"endColumn":64,"suggestions":"445"},{"ruleId":"357","severity":1,"message":"446","line":163,"column":6,"nodeType":"359","endLine":163,"endColumn":43,"suggestions":"447"},{"ruleId":"357","severity":1,"message":"448","line":193,"column":6,"nodeType":"359","endLine":193,"endColumn":43,"suggestions":"449"},{"ruleId":"345","severity":1,"message":"450","line":227,"column":9,"nodeType":"347","messageId":"348","endLine":227,"endColumn":50},{"ruleId":"345","severity":1,"message":"451","line":369,"column":10,"nodeType":"347","messageId":"348","endLine":369,"endColumn":27},{"ruleId":"361","severity":1,"message":"362","line":504,"column":27,"nodeType":"363","messageId":"364","endLine":504,"endColumn":29},{"ruleId":"345","severity":1,"message":"452","line":635,"column":10,"nodeType":"347","messageId":"348","endLine":635,"endColumn":22},{"ruleId":"345","severity":1,"message":"453","line":29,"column":8,"nodeType":"347","messageId":"348","endLine":29,"endColumn":24},{"ruleId":"345","severity":1,"message":"432","line":39,"column":10,"nodeType":"347","messageId":"348","endLine":39,"endColumn":25},{"ruleId":"345","severity":1,"message":"454","line":39,"column":27,"nodeType":"347","messageId":"348","endLine":39,"endColumn":45},{"ruleId":"345","severity":1,"message":"455","line":40,"column":10,"nodeType":"347","messageId":"348","endLine":40,"endColumn":24},{"ruleId":"345","severity":1,"message":"456","line":40,"column":26,"nodeType":"347","messageId":"348","endLine":40,"endColumn":43},{"ruleId":"345","severity":1,"message":"457","line":46,"column":10,"nodeType":"347","messageId":"348","endLine":46,"endColumn":16},{"ruleId":"345","severity":1,"message":"458","line":47,"column":10,"nodeType":"347","messageId":"348","endLine":47,"endColumn":18},{"ruleId":"357","severity":1,"message":"433","line":61,"column":6,"nodeType":"359","endLine":61,"endColumn":8,"suggestions":"459"},{"ruleId":"345","severity":1,"message":"460","line":115,"column":9,"nodeType":"347","messageId":"348","endLine":115,"endColumn":23},{"ruleId":"345","severity":1,"message":"461","line":118,"column":9,"nodeType":"347","messageId":"348","endLine":118,"endColumn":25},{"ruleId":"345","severity":1,"message":"354","line":163,"column":10,"nodeType":"347","messageId":"348","endLine":163,"endColumn":17},{"ruleId":"345","severity":1,"message":"355","line":163,"column":19,"nodeType":"347","messageId":"348","endLine":163,"endColumn":29},{"ruleId":"345","severity":1,"message":"462","line":2,"column":32,"nodeType":"347","messageId":"348","endLine":2,"endColumn":43},{"ruleId":"345","severity":1,"message":"463","line":24,"column":10,"nodeType":"347","messageId":"348","endLine":24,"endColumn":21},{"ruleId":"345","severity":1,"message":"457","line":34,"column":10,"nodeType":"347","messageId":"348","endLine":34,"endColumn":16},{"ruleId":"345","severity":1,"message":"458","line":35,"column":10,"nodeType":"347","messageId":"348","endLine":35,"endColumn":18},{"ruleId":"357","severity":1,"message":"464","line":47,"column":6,"nodeType":"359","endLine":47,"endColumn":8,"suggestions":"465"},{"ruleId":"345","severity":1,"message":"466","line":51,"column":9,"nodeType":"347","messageId":"348","endLine":51,"endColumn":22},{"ruleId":"345","severity":1,"message":"460","line":62,"column":9,"nodeType":"347","messageId":"348","endLine":62,"endColumn":23},{"ruleId":"345","severity":1,"message":"461","line":65,"column":9,"nodeType":"347","messageId":"348","endLine":65,"endColumn":25},{"ruleId":"345","severity":1,"message":"467","line":7,"column":3,"nodeType":"347","messageId":"348","endLine":7,"endColumn":13},{"ruleId":"345","severity":1,"message":"453","line":25,"column":8,"nodeType":"347","messageId":"348","endLine":25,"endColumn":24},{"ruleId":"345","severity":1,"message":"468","line":40,"column":9,"nodeType":"347","messageId":"348","endLine":40,"endColumn":17},{"ruleId":"345","severity":1,"message":"439","line":43,"column":19,"nodeType":"347","messageId":"348","endLine":43,"endColumn":29},{"ruleId":"345","severity":1,"message":"457","line":56,"column":10,"nodeType":"347","messageId":"348","endLine":56,"endColumn":16},{"ruleId":"345","severity":1,"message":"458","line":57,"column":10,"nodeType":"347","messageId":"348","endLine":57,"endColumn":18},{"ruleId":"345","severity":1,"message":"469","line":60,"column":10,"nodeType":"347","messageId":"348","endLine":60,"endColumn":18},{"ruleId":"357","severity":1,"message":"470","line":76,"column":6,"nodeType":"359","endLine":76,"endColumn":8,"suggestions":"471"},{"ruleId":"345","severity":1,"message":"460","line":118,"column":9,"nodeType":"347","messageId":"348","endLine":118,"endColumn":23},{"ruleId":"345","severity":1,"message":"461","line":121,"column":9,"nodeType":"347","messageId":"348","endLine":121,"endColumn":25},{"ruleId":"357","severity":1,"message":"472","line":59,"column":6,"nodeType":"359","endLine":59,"endColumn":8,"suggestions":"473"},{"ruleId":"345","severity":1,"message":"474","line":137,"column":26,"nodeType":"347","messageId":"348","endLine":137,"endColumn":43},{"ruleId":"345","severity":1,"message":"475","line":8,"column":3,"nodeType":"347","messageId":"348","endLine":8,"endColumn":18},{"ruleId":"345","severity":1,"message":"463","line":22,"column":10,"nodeType":"347","messageId":"348","endLine":22,"endColumn":21},{"ruleId":"345","severity":1,"message":"439","line":27,"column":19,"nodeType":"347","messageId":"348","endLine":27,"endColumn":29},{"ruleId":"357","severity":1,"message":"472","line":44,"column":6,"nodeType":"359","endLine":44,"endColumn":8,"suggestions":"476"},{"ruleId":"345","severity":1,"message":"466","line":47,"column":9,"nodeType":"347","messageId":"348","endLine":47,"endColumn":22},{"ruleId":"345","severity":1,"message":"415","line":26,"column":11,"nodeType":"347","messageId":"348","endLine":26,"endColumn":12},{"ruleId":"357","severity":1,"message":"378","line":38,"column":6,"nodeType":"359","endLine":38,"endColumn":16,"suggestions":"477"},{"ruleId":"361","severity":1,"message":"362","line":240,"column":17,"nodeType":"363","messageId":"364","endLine":240,"endColumn":19},{"ruleId":"345","severity":1,"message":"478","line":3,"column":30,"nodeType":"347","messageId":"348","endLine":3,"endColumn":36},{"ruleId":"345","severity":1,"message":"479","line":1,"column":10,"nodeType":"347","messageId":"348","endLine":1,"endColumn":21},{"ruleId":"345","severity":1,"message":"480","line":2,"column":10,"nodeType":"347","messageId":"348","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","no-native-reassign",["481"],"no-negated-in-lhs",["482"],"'handleRefreshToken' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'menuType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkAccessToken', 'code', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["483"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'apiUrl' is defined but never used.","'userInfoData' is assigned a value but never used.","'setUserInfoData' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["484"],"'userData' is assigned a value but never used.","'handleNewLang' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Header' is defined but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'count' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'setFormatDate' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["485"],"'updateData' is assigned a value but never used.","'ColorPicker' is defined but never used.","'addYears' is defined but never used.","'updateColor' is assigned a value but never used.","'showPreview' is assigned a value but never used.","'setShowPreview' is assigned a value but never used.","'alphaType' is assigned a value but never used.","'setAlphaType' is assigned a value but never used.","'error400' is assigned a value but never used.","'setError400' is assigned a value but never used.","'error500' is assigned a value but never used.","'setError500' is assigned a value but never used.","'isError' is assigned a value but never used.","'setIsError' is assigned a value but never used.","'handlemenuClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', 'orderByField', and 'roleType'. Either include them or remove the dependency array.",["486"],"'ComboBox' is defined but never used.","'filterByEmployee' is defined but never used.","'setCollapedMenu' is defined but never used.","'t' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'order_by' is assigned a value but never used.","'comboBoxRef' is assigned a value but never used.","'setFilterOption' is assigned a value but never used.","'comboBoxBasicOptions' is assigned a value but never used.","'handleEmployeeName' is assigned a value but never used.",["487"],["488"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'employeeDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["489"],"'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'setCount' is assigned a value but never used.","'setTotalCount' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.","'developmentCount' is assigned a value but never used.","'total_count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["490"],"React Hook useEffect has missing dependencies: 'dispatch' and 'filtersById'. Either include them or remove the dependency array.",["491"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["492"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', 'orderByDevelopment', 'params.appraisalId', and 'params.employeeId'. Either include them or remove the dependency array.",["493"],"'textfelidStyle' is assigned a value but never used.","'deleteItemJobName' is assigned a value but never used.","'deleteItemId' is assigned a value but never used.","'applicationError' is defined but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.",["494"],"'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'useDispatch' is defined but never used.","'filtersById' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["495"],"'onChangeInput' is assigned a value but never used.","'DatePicker' is defined but never used.","'roleType' is assigned a value but never used.","'goalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["496"],"React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["497"],"'setErrMsgGoalType' is assigned a value but never used.","'IDropdownOption' is defined but never used.",["498"],["499"],"'logout' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"506","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"511","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"526","fix":"528"},{"desc":"529","fix":"530"},"Update the dependencies array to be: [checkAccessToken, code, dispatch]",{"range":"531","text":"532"},"Update the dependencies array to be: [dispatch]",{"range":"533","text":"534"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, roleType, dispatch, orderByField]",{"range":"535","text":"536"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField, roleType]",{"range":"537","text":"538"},"Update the dependencies array to be: [doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",{"range":"539","text":"540"},{"range":"541","text":"538"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"542","text":"543"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"544","text":"545"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",{"range":"546","text":"547"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"548","text":"549"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",{"range":"550","text":"551"},{"range":"552","text":"543"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"553","text":"554"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"555","text":"556"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"557","text":"558"},{"range":"559","text":"558"},"Update the dependencies array to be: [dispatch, menuType]",{"range":"560","text":"561"},[2822,2824],"[checkAccessToken, code, dispatch]",[2440,2442],"[dispatch]",[3367,3548],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, roleType, dispatch, orderByField]",[1577,1579],"[filtersById, limitPageLength, limitStart, orderBy, orderByField, roleType]",[2853,2922],"[doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",[2662,2664],[1809,1811],"[filtersById, roleType]",[3914,3953],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4269,4327],"[roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",[5041,5078],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[5916,5953],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",[1924,1926],[1425,1427],"[filtersByName, roleType]",[2187,2189],"[filtersById, limitPageLength, limit_start, orderBy]",[1632,1634],"[filtersByName, limitPageLength, limit_start, orderBy]",[1169,1171],[1801,1811],"[dispatch, menuType]"]