[{"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx":"1","C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts":"2","C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx":"3","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx":"4","C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx":"5","C:\\Users\\acer\\Documents\\mega-soft\\src\\config.tsx":"6","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\roleType.tsx":"7","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\MainHeader.tsx":"8","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\auth.tsx":"9","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Home\\index.tsx":"10","C:\\Users\\acer\\Documents\\mega-soft\\src\\components\\ChanageColor\\index.tsx":"11","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Login\\index.tsx":"12","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx":"13","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx":"14","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx":"15","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx":"16","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx":"17","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx":"18","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx":"19","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx":"20","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\application.tsx":"21","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx":"22","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx":"23","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx":"24","C:\\Users\\acer\\Documents\\mega-soft\\src\\i18n.tsx":"25","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx":"26","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx":"27","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\index.tsx":"28","C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx":"29","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\developmentPlan.tsx":"30","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx":"31","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx":"32","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx":"33","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx":"34","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\menuType.tsx":"35","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx":"36","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx":"37","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx":"38","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\auth.tsx":"39","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx":"40","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\application.tsx":"41","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx":"42","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx":"43","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx":"44","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx":"45","C:\\Users\\acer\\Documents\\mega-soft\\src\\Utils\\color.tsx":"46"},{"size":665,"mtime":1613382293081,"results":"47","hashOfConfig":"48"},{"size":425,"mtime":499162500000,"results":"49","hashOfConfig":"48"},{"size":7337,"mtime":1614577957061,"results":"50","hashOfConfig":"48"},{"size":212,"mtime":1611031594119,"results":"51","hashOfConfig":"48"},{"size":5016,"mtime":1613967987648,"results":"52","hashOfConfig":"48"},{"size":575,"mtime":1614576247927,"results":"53","hashOfConfig":"48"},{"size":499,"mtime":1613651637361,"results":"54","hashOfConfig":"48"},{"size":4762,"mtime":1614574422335,"results":"55","hashOfConfig":"48"},{"size":5295,"mtime":1614582716709,"results":"56","hashOfConfig":"48"},{"size":1076,"mtime":1614332082651,"results":"57","hashOfConfig":"48"},{"size":1028,"mtime":1614333885231,"results":"58","hashOfConfig":"48"},{"size":2153,"mtime":1614340044455,"results":"59","hashOfConfig":"48"},{"size":4900,"mtime":1614333884954,"results":"60","hashOfConfig":"48"},{"size":4844,"mtime":1614333884976,"results":"61","hashOfConfig":"48"},{"size":6903,"mtime":1614574072096,"results":"62","hashOfConfig":"48"},{"size":11514,"mtime":1614574072184,"results":"63","hashOfConfig":"48"},{"size":16218,"mtime":1614575769232,"results":"64","hashOfConfig":"48"},{"size":16156,"mtime":1614575725589,"results":"65","hashOfConfig":"48"},{"size":21447,"mtime":1614574072095,"results":"66","hashOfConfig":"48"},{"size":22649,"mtime":1614575775355,"results":"67","hashOfConfig":"48"},{"size":487,"mtime":1613627600047,"results":"68","hashOfConfig":"48"},{"size":16955,"mtime":1614577925772,"results":"69","hashOfConfig":"48"},{"size":18225,"mtime":1614581157067,"results":"70","hashOfConfig":"48"},{"size":29890,"mtime":1614575664188,"results":"71","hashOfConfig":"48"},{"size":799,"mtime":1614335370161,"results":"72","hashOfConfig":"48"},{"size":36202,"mtime":1614574072182,"results":"73","hashOfConfig":"48"},{"size":680,"mtime":1613379571993,"results":"74","hashOfConfig":"48"},{"size":8268,"mtime":1614334035313,"results":"75","hashOfConfig":"48"},{"size":1255,"mtime":1613967987646,"results":"76","hashOfConfig":"48"},{"size":1714,"mtime":1614158668656,"results":"77","hashOfConfig":"48"},{"size":7755,"mtime":1614575627651,"results":"78","hashOfConfig":"48"},{"size":7887,"mtime":1614582759182,"results":"79","hashOfConfig":"48"},{"size":3543,"mtime":1614160527304,"results":"80","hashOfConfig":"48"},{"size":4175,"mtime":1614575611542,"results":"81","hashOfConfig":"48"},{"size":447,"mtime":1614318071279,"results":"82","hashOfConfig":"48"},{"size":790,"mtime":1611916486585,"results":"83","hashOfConfig":"48"},{"size":627,"mtime":1614081817158,"results":"84","hashOfConfig":"48"},{"size":658,"mtime":1613654882015,"results":"85","hashOfConfig":"48"},{"size":614,"mtime":1614340650440,"results":"86","hashOfConfig":"48"},{"size":812,"mtime":1611815621575,"results":"87","hashOfConfig":"48"},{"size":577,"mtime":1614078793398,"results":"88","hashOfConfig":"48"},{"size":1078,"mtime":1613038172357,"results":"89","hashOfConfig":"48"},{"size":832,"mtime":1611030790303,"results":"90","hashOfConfig":"48"},{"size":613,"mtime":1614077775864,"results":"91","hashOfConfig":"48"},{"size":2046,"mtime":1614582685914,"results":"92","hashOfConfig":"48"},{"size":346,"mtime":1613630689993,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},"1jqg13p",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"97"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"97"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"97"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"97"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"97"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"97"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"97"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"97"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"97"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"97"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"97"},"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx",["204"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux\";\r\nimport i18n from \"./i18n\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["205","206"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx",["207","208","209","210","211","212","213","214"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx",["215","216","217","218","219","220"],"import * as React from \"react\";\r\nimport {\r\n  INavLink,\r\n  INavLinkGroup,\r\n} from \"office-ui-fabric-react/lib/Nav\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport { useHistory, matchPath } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./redux/reducers\";\r\nimport SideNavigation from \"./SideNavigation\";\r\n\r\ninitializeIcons();\r\n\r\nconst navLinkGroups: INavLinkGroup[] = [\r\n  {\r\n    links: [\r\n      {\r\n        name: \"Appraisal\",\r\n        url: \"\",\r\n        key: \"key01\",\r\n        // icon: \"UpgradeAnalysis\",\r\n        links: [\r\n          {\r\n            name: \"Setup\",\r\n            url: \"/\",\r\n            icon: \"Settings\",\r\n            key: \"key02\",\r\n          },\r\n          // {\r\n          //   name: \"Ratings\",\r\n          //   url: \"/apprisal/rating\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key03\",\r\n          // },\r\n          // {\r\n          //   name: \"Periods\",\r\n          //   url: \"/apprisal/periods\",\r\n          //   icon: \"Timer\",\r\n          //   key: \"key04\",\r\n          // },\r\n          {\r\n            name: \"Goal Setting\",\r\n            url: \"/appraisal/goalsetting\",\r\n            icon: \"6PointStar\",\r\n            key: \"key05\",\r\n          },\r\n          // {\r\n          //   name: \"Self Assessment\",\r\n          //   url: \"\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key06\",\r\n          // },\r\n          // {\r\n          //   name: \"Development Plan\",\r\n          //   url: \"/apprisal/developmentPlan\",\r\n          //   icon: \"TestPlan\",\r\n          //   key: \"key07\",\r\n          // },\r\n          // {\r\n          //   name: \"Release Appraisal\",\r\n          //   url: \"/apprisal/releaseApprisal\",\r\n          //   icon: \"ReleaseGate\",\r\n          //   key: \"key08\",\r\n          // },\r\n          // {\r\n          //   name: \"Market Bench Marketing\",\r\n          //   url: \"/apprisal/marketBenchMarketing\",\r\n          //   icon: \"Market\",\r\n          //   key: \"key09\",\r\n          // },\r\n        ],\r\n        isExpanded: true,\r\n      },\r\n      {\r\n        name: \"Manage\",\r\n        url: \"\",\r\n        key: \"key10\",\r\n        // icon:'MedicationAdmin',\r\n        links: [\r\n          {\r\n            name: \"Team Goal Setting\",\r\n            url: \"/manage/teamGoalSetting\",\r\n            icon: \"Settings\",\r\n            key: \"key11\",\r\n          },\r\n          {\r\n            name: \"Team assess\",\r\n            url: \"/manage/teamAssess\",\r\n            icon: \"AssessmentGroup\",\r\n            key: \"key12\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n      {\r\n        name: \"Confirmation\",\r\n        url: \"\",\r\n        key: \"key13\",\r\n        expandAriaLabel: \"Expand Admin section\",\r\n        collapseAriaLabel: \"Collapse admin section\",\r\n        links: [\r\n          {\r\n            name: \"Confirmation Status\",\r\n            url: \"/confirmation/status\",\r\n            icon: \"SplitObject\",\r\n            key: \"key14\",\r\n          },\r\n          {\r\n            name: \"Release\",\r\n            url: \"/confirmation/release\",\r\n            key: \"key15\",\r\n            icon: \"ReleaseGate\",\r\n          },\r\n          {\r\n            name: \"Approval\",\r\n            url: \"/confirmation/approval\",\r\n            key: \"key16\",\r\n            icon: \"DocumentApproval\",\r\n          },\r\n          {\r\n            name: \"Letter\",\r\n            url: \"/confirmation/letter\",\r\n            key: \"key17\",\r\n            icon: \"DietPlanNotebook\",\r\n          },\r\n          {\r\n            name: \"Probation Letter\",\r\n            url: \"/confirmation/probationLetter\",\r\n            key: \"key18\",\r\n            icon: \"QuickNote\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n\r\nfunction Navigation() {\r\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\r\n\r\n  \r\n  let history = useHistory();\r\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\r\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\r\n    setSelectedNavKey(item?.key || \"\");\r\n  };\r\n  React.useEffect(() => {\r\n    navLinkGroups[0].links.map((item) => {\r\n      if (item.links) {\r\n        item.links.map((subItem) => {\r\n          if (\r\n            matchPath(history.location.pathname, {\r\n              path: subItem.url,\r\n              exact: true,\r\n            })\r\n          ) {\r\n            setSelectedNavKey(subItem?.key || \"\");\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        if (\r\n          matchPath(history.location.pathname, {\r\n            path: item.url,\r\n            exact: true,\r\n          })\r\n        ) {\r\n          setSelectedNavKey(item?.key || \"\");\r\n          return;\r\n        }\r\n      }\r\n    });\r\n  }, [history.location.pathname]);\r\n  return (\r\n    <div id=\"main-wrapper\">\r\n      {/* <MainHeader /> */}\r\n      <div\r\n        className={\r\n          selectMenu === false\r\n            ? `sidebar left-sidebar`\r\n            : `sidebar left-sidebar-collapsed`\r\n        }\r\n      >\r\n        <SideNavigation />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\config.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\roleType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\MainHeader.tsx",["221","222","223","224","225","226","227","228","229"],"import React, { useEffect, useState } from \"react\";\r\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport SmsIcon from \"@material-ui/icons/Sms\";\r\nimport {\r\n  Dropdown,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  Text,\r\n} from \"office-ui-fabric-react\";\r\nimport { logout, revokeToken, userInfo } from \"../redux/actions/auth\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport logo_ms from \"../assets/img/logo_ms.png\";\r\nimport logo_nuage from \"../assets/img/logo_nuage.png\";\r\nimport { RootState } from \"../redux/reducers\";\r\nimport moment from \"moment\";\r\nimport { onChangeLanguage } from \"../redux/actions/application\";\r\n\r\nimport i18n from \"../i18n\";\r\nimport apiUrl from \"../config\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction MainHeader(props: { children: any }) {\r\n  const { children } = props;\r\n  const languageOption: IDropdownOption[] = [\r\n    { key: \"en\", text: \"English\" },\r\n    { key: \"fr\", text: \"French\" },\r\n  ];\r\n  const dispatch = useDispatch();\r\n  const [userInfoData, setUserInfoData]: any = useState();\r\n  const selectedLanguage = useSelector(\r\n    (state: RootState) => state.application.language\r\n  );\r\n\r\n  const userinformation = useSelector(\r\n    (state: RootState) => state.userData.user\r\n  );\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n      // color: \"#FFF\",\r\n      backgroundColor: \"#FFF\",\r\n    },\r\n  };\r\n\r\n  const handleLanguage = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    // setLanguage(\r\n    //   item || {\r\n    //     key: \"\",\r\n    //     text: \"\",\r\n    //   }\r\n    // );\r\n    let data: any = item?.key || \"\";\r\n    dispatch(onChangeLanguage(data));\r\n    i18n.changeLanguage(data);\r\n\r\n    // setTimeout(() => {\r\n    //   Utils.reloadLocale(oldLanguage, languageSelected);\r\n    //   // history.goBack();\r\n    // }, 500);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  // console.log(\"userInfo\", userinformation);\r\n\r\n  const handleLogout = () => {\r\n    window.open(`${apiUrl.method}/logout`, \"_self\");\r\n    // logout();\r\n    dispatch(revokeToken());\r\n    // window.open(\r\n    //   `https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/logout?redirect_uri=http://localhost:3000`,\r\n    //   \"_self\"\r\n    // );\r\n  };\r\n\r\n  // console.log(\"user response==>\", userInfoData);\r\n  useEffect((): void => {\r\n    dispatch(userInfo());\r\n  }, []);\r\n\r\n  const userData = useSelector((state: RootState) => state.userData.UserData);\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const handleNewLang = (code: any) => {\r\n    dispatch(onChangeLanguage(code));\r\n    i18n.changeLanguage(code);\r\n\r\n    console.log(\"code\", code);\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"nav-item d-none d-md-block mr-.5\">{children}</div>\r\n      <div className=\"main-logo\">\r\n        <img src={logo_nuage} />\r\n      </div>\r\n      <div className=\"mx-auto text-white-50\">\r\n        <Text style={{ marginRight: \"10px\" }}>\r\n          {/* {i18n.t(\"main_header.welcome\")} {userData[0].name} ({userData[0].id}) */}\r\n          {i18n.t(\"main_header.welcome\")} {userinformation.full_name} (\r\n          {userinformation.employee_id})\r\n        </Text>\r\n\r\n        <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n          {i18n.t(\"main_header.logged_in\")} :\r\n        </Text>\r\n        <Text style={{ marginRight: \"5px\" }}>\r\n          {moment(dateNow).format(\"DD-MM-YYYY\")} {timeNow}\r\n        </Text>\r\n      </div>\r\n      <div>\r\n        <Dropdown\r\n          options={languageOption}\r\n          onChange={handleLanguage}\r\n          placeholder=\"Select language\"\r\n          selectedKey={\r\n            languageOption.find((item) => item.key === selectedLanguage)?.key\r\n          }\r\n          className=\"rolesDropDown\"\r\n          styles={dropdownStyles}\r\n        />\r\n      </div>\r\n      <div style={{ cursor: \"pointer\" }} className=\"link-icons px-2 nav-link\">\r\n        <NotificationsIcon style={{ fontSize: \"2rem\", color: \"#FFF\" }} />\r\n      </div>\r\n      <div style={{ cursor: \"pointer\" }} className=\"link-icons px-2 nav-link\">\r\n        <SmsIcon style={{ fontSize: \"2rem\", color: \"#FFF\" }} />\r\n      </div>\r\n      <div\r\n        style={{ cursor: \"pointer\", color: \"#FFF\" }}\r\n        className=\"link-icons px-2 nav-link\"\r\n        onClick={() => {\r\n          handleLogout();\r\n        }}\r\n      >\r\n        <PowerSettingsNewIcon style={{ fontSize: \"2rem\" }} />\r\n      </div>\r\n      <img src={logo_ms} className=\"ms-logo-center\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(MainHeader);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\auth.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Home\\index.tsx",["230","231","232"],"import React from \"react\";\r\nimport { IBreadcrumbItem, IBreadcrumbStyles } from \"office-ui-fabric-react\";\r\nimport Header from \"../../Header\";\r\n\r\nexport default function Home() {\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Home\", key: \"d1\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  return (\r\n    <div>\r\n      {/* <Header item={itemsWithHeading} styles={breadCrumStyle} /> */}\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">\r\n          <div className=\"home-banner\">\r\n            <div className=\"home-banner-text\">\r\n              <h1>Megasoft  Solutions</h1>\r\n              <p>Managing Human Resources - from Cost to Asset</p>\r\n              <p className=\"instruction\">Please select <span>Performance</span> menu option to proceed.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\components\\ChanageColor\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Login\\index.tsx",["233"],"import { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { connect } from \"react-redux\";\r\nimport logo_ms from \"../../assets/img/logo_ms.png\";\r\nimport \"./style.css\";\r\nimport apiUrl, { OAuthParameters } from \"../../config\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login-section\">\r\n      <div className=\"row\">\r\n        <div className=\"col-8\">\r\n          <div className=\"login-banner-image\">\r\n            <div className=\"login-banner-image-overlay\">\r\n              <div className=\"overlay-text-alignment\">\r\n                <div className=\"login-banner-text\">\r\n                  <h2>Making</h2>\r\n                  <p>\r\n                    Organizations Run Effectively By Providing Innovative HRMS\r\n                    Solutions Globally\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <div className=\"text-right pt-3 pr-4\">\r\n            <img src={logo_ms} className=\"ms-logo-login\" />\r\n          </div>\r\n          <div className=\"login-form\">\r\n            <div className=\"login-form-center\">\r\n              <div\r\n                style={{\r\n                  marginTop: \"3rem\",\r\n                  justifyContent: \"center\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  text=\"Proceed with Megasoft Login\"\r\n                  style={{ marginTop: \"20px\" }}\r\n                  allowDisabledFocus\r\n                  onClick={() => {\r\n                    window.open(\r\n                      `${apiUrl.method}/frappe.integrations.oauth2.authorize?client_id=${OAuthParameters.client_id}&state=${OAuthParameters.state}&response_type=code&scope=all&redirect_uri=${apiUrl.applicationHome}`,\r\n                      \"_self\"\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(Login);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx",["234","235","236","237","238","239","240","241"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  fetchJobHistoryByName,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  PrimaryButton,\r\n  Stack,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  name: string;\r\n}\r\n\r\nfunction JobHistoryDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByName] = useState(params.name);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersByName) {\r\n      filters.push([\"name\", \"=\", filtersByName]);\r\n    }\r\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\r\n      (response) => {\r\n        setEmployeeDetails(response.data[0]);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryData({\r\n      ...jobHistoryData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const fromDateFormat = moment(employeeDetails.from_date).format(\"DD-MM-YYYY\");\r\n  const toDateFormat = moment(employeeDetails.to_date).format(\"DD-MM-YYYY\");\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"emp-details-section\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              <span>Position Held</span> : {employeeDetails.position_held}\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n              <span>Place of Posting</span> : {employeeDetails.place_of_posting}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>From Date</span> : {fromDateFormat}\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n              <span>To Date</span> : {toDateFormat}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Key Responsibilities</span> :{\" \"}\r\n              {employeeDetails.key_responsibilities}\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n              <span>Qualifications</span> : {employeeDetails.qualifications}\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(JobHistoryDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx",["242","243","244","245","246"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IDropdownOption,\r\n  PrimaryButton,\r\n  Stack,\r\n} from \"office-ui-fabric-react\";\r\nimport { fetchGoalDataName } from \"../../redux/actions/goal\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  name: string;\r\n}\r\n\r\n\r\nfunction GoalDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByName] = useState(params.name);\r\n  const [limitPageLength] = useState(5);\r\n  //   console.log(params.name);\r\n  const [limit_start] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n\r\n  const [goalDetails, setGoalDetails]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersByName) {\r\n      filters.push([\"name\", \"=\", filtersByName]);\r\n    }\r\n    fetchGoalDataName(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      setGoalDetails(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setGoalDetails({\r\n      ...goalDetails,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"emp-details-section\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              <span>ID</span> : {params.name}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Order Number</span> : {goalDetails.order_no}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Goal Type</span> : {goalDetails.goal_type}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Parent Goal</span> : {goalDetails.parent_goal_id}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>KRA</span> : {goalDetails.kra}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Goal</span> : {goalDetails.goal}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Measure</span> : {goalDetails.measure}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Weightage</span> : {goalDetails.weightage}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Target</span> : {goalDetails.target}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              <span>Threshold</span> : {goalDetails.threshold}\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n              <span>Stretch</span> :{\" \"}\r\n              {/* {goalDetails.stretch == \"\" ? \"N/A\" : goalDetails.stretch} */}\r\n              {goalDetails.stretch}\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(GoalDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx",["247","248"],"import {\r\n  Checkbox,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  Label,\r\n  PrimaryButton,\r\n  Separator,\r\n  Stack,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { useTranslation } from \"react-i18next/\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nconst stackTokens = { childrenGap: 10 };\r\n\r\nfunction AppraisalDetail(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n\r\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters),\r\n      roleType\r\n    ).then((response) => {\r\n      setAppraisalDetail(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: i18n.t(\"breadcrumb_items.performance\"), key: \"d1\" },\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.appraisal\"),\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: i18n.t(\"breadcrumb_items.appraisal_details\"), key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  const reviewDate = moment(appraisalDetail.review_from).format(\"DD-MM-YYYY\");\r\n  const appraisalTo = moment(appraisalDetail.appraisal_to).format(\"DD-MM-YYYY\");\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card\">\r\n          <div className=\"emp-details-section\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <span>{i18n.t(\"common.ID\")}</span> : {appraisalDetail.id}\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                <span>{i18n.t(\"appraisal_form.Description\")}</span> :{\" \"}\r\n                {appraisalDetail.appraisal_description}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>{i18n.t(\"appraisal_form.Review_From\")}</span> :{\" \"}\r\n                {reviewDate}\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                <span>{i18n.t(\"appraisal_form.Appraisal_To\")}</span> :{\" \"}\r\n                {appraisalTo}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>{i18n.t(\"appraisal_form.Review_Frequency\")}</span> :{\" \"}\r\n                {appraisalDetail.review_frequency}\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                <span>{i18n.t(\"common.type\")}</span> : {appraisalDetail.type}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>{i18n.t(\"appraisal_form.Format_Type\")}</span> :{\" \"}\r\n                {appraisalDetail.format_type}\r\n              </div>\r\n              <div className=\"col-md-8\">\r\n                <span>{i18n.t(\"appraisal_form.Owner\")}</span> :{\" \"}\r\n                {appraisalDetail.appraisal_owner}\r\n              </div> \r\n              <div className=\"col-md-8\">\r\n                <span>{i18n.t(\"appraisal_form.department\")}</span> :{\" \"}\r\n                {appraisalDetail.department}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>{i18n.t(\"appraisal_form.KRA_Settings_Tabs\")}</Label>\r\n              <Checkbox\r\n                disabled={true}\r\n                label={i18n.t(\"goal_setting_form.job_history\")}\r\n                title={\"Competencies\"}\r\n                checked={appraisalDetail.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                label={i18n.t(\"goal_setting_form.goals\")}\r\n                title={\"Goals\"}\r\n                checked={appraisalDetail.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                // label={i18n.t(\"goal_setting_form.training_and_development\")}\r\n                label=\"Training/Development Plans\"\r\n                title={\"Development Plans\"}\r\n                checked={appraisalDetail.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text={t(\"appraisal_form.buttons.back\")}\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/appraisal\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\r\n  const handlemenuClick = () => {\r\n    if (selectMenu === false) {\r\n      dispatch(setCollapedMenu(true));\r\n    } else {\r\n      dispatch(setCollapedMenu(false));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()} </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AppraisalDetail);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx",["249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport {\r\n  ComboBox,\r\n  DetailsList,\r\n  Dropdown,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IColumn,\r\n  IComboBox,\r\n  IComboBoxOption,\r\n  IDetailsListStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  PrimaryButton,\r\n  Spinner,\r\n  SpinnerSize,\r\n  Text,\r\n} from \"office-ui-fabric-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport { useTranslation } from \"react-i18next/\";\r\nimport { filterByEmployee } from \"../../redux/actions/apprisal\";\r\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\r\n\r\nfunction GoalSetting(props: any) {\r\n  const dispatch = useDispatch();\r\n  const { t, i18n } = useTranslation();\r\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\r\n  const [limit_start, setLimitStart] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [role, setRole] = useState(\"Employee\");\r\n  const [currentPage, setCurentPage] = useState(0);\r\n  const [limitPageLength, setLimitPageLength] = useState(3);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [filterByStatus, setFilterByStatus] = useState(\"\");\r\n  const [filterByName, setFilterByName] = useState(\"\");\r\n  const [order_by] = useState(\"employee_name asc\");\r\n\r\n  const employee = useSelector((state: RootState): any => state.employeeList);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const { employeeList, isLoading, total_count, count } = employee;\r\n  const comboBoxRef = useRef<IComboBox>(null);\r\n  const [filterOption, setFilterOption] = useState([]);\r\n\r\n\r\n  // employee name list==>\r\n  // useEffect((): void => {\r\n  //   filterByEmployee(order_by).then((response) => {\r\n  //     setFilterOption(response.data);\r\n  //   });\r\n  // }, []);\r\n\r\n  const comboBoxBasicOptions: IComboBoxOption[] = filterOption.map(\r\n    (element: any) => ({\r\n      key: element.employee_id,\r\n      text: element.employee_name,\r\n    })\r\n  );\r\n\r\n  const [searchByName, setSearchByName]: any = useState(\"\");\r\n\r\n  const handleEmployeeName = (\r\n    event: React.FormEvent<IComboBox>,\r\n    option?: IComboBoxOption,\r\n    index?: number,\r\n    value?: string\r\n  ) => {\r\n    // console.log(\"option.key\", option?.key);\r\n    setSearchByName(option?.key || \"\");\r\n  };\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filterByStatus) {\r\n      filters.push([\"status\", \"like\", filterByStatus]);\r\n    }\r\n    if (filterByName) {\r\n      filters.push([\"employee_id\", \"like\", filterByName]);\r\n    }\r\n    dispatch(\r\n      fetchEmployeeData(\r\n        doctype,\r\n        limit_start,\r\n        limit,\r\n        roleType,\r\n        JSON.stringify(filters)\r\n      )\r\n    );\r\n  }, [doctype, limit_start, limit, filterByStatus, roleType, filterByName]);\r\n\r\n  const [status, setStatus] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n  const history = useHistory();\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 250,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      backgroundColor: \"#344f84\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const statusOption: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Pending with Employee\", text: \"Pending with Employee\" },\r\n    { key: \"Pending with Reviewer\", text: \"Pending with Reviewer\" },\r\n    { key: \"Pending Counter Signing\", text: \"Pending Counter Signing\" },\r\n    { key: \"Complete\", text: \"Complete\" },\r\n  ];\r\n\r\n  const columns: IColumn[] = [\r\n    // {\r\n    //   key: \"01\",\r\n    //   name: \"S.No\",\r\n    //   fieldName: \"sno\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 50,\r\n    //   isSorted: true,\r\n    //   className: \"idColumn\",\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   isRowHeader: true,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"02\",\r\n      name: i18n.t(\"common.action\"),\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 110,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <PrimaryButton\r\n            text=\"KRA Setting\"\r\n            allowDisabledFocus\r\n            onClick={() => {\r\n              handleKraData(item);\r\n            }}\r\n            className=\"action-btn\"\r\n            style={{\r\n              padding: \"0px\",\r\n              fontSize: \"0.75rem\",\r\n              height: \"24px\",\r\n              borderRadius: \"3px\",\r\n            }}\r\n            disabled={false}\r\n            checked={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n\r\n    {\r\n      key: \"03\",\r\n      name: i18n.t(\"goal_setting_form.employee_id\"),\r\n      fieldName: \"employee_id\",\r\n      minWidth: 50,\r\n      maxWidth: 90,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: i18n.t(\"goal_setting_form.employee_name\"),\r\n      fieldName: \"employee_name\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"05\",\r\n    //   name: \"Manager ID\",\r\n    //   fieldName: \"manager_id\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 100,\r\n    //   isSortedDescending: false,\r\n    //   isRowHeader: true,\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"06\",\r\n      name: i18n.t(\"goal_setting_form.manager_name\"),\r\n      fieldName: \"manager_name\",\r\n      minWidth: 50,\r\n      maxWidth: 140,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: i18n.t(\"goal_setting_form.status\"),\r\n      fieldName: \"status\",\r\n      minWidth: 50,\r\n      maxWidth: 170,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: i18n.t(\"goal_setting_form.appraisal_type\"),\r\n      fieldName: \"appraisal_type\",\r\n      minWidth: 50,\r\n      maxWidth: 260,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n  ];\r\n\r\n  const handleKraData = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/${item.employee_id}/${item.appraisal_id}`\r\n    );\r\n    // history.push(\"/appraisal/goalsetting/view\");\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    setFilterByStatus(`${status?.key || \"\"}`);\r\n    setFilterByName(`${searchByName || \"\"}`);\r\n  };\r\n\r\n  const onChangeStatus = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setStatus(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: i18n.t(\"breadcrumb_items.performance\"), key: \"d1\" },\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.appraisal\"),\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    // { text: \"Employee\", key: \"d3\", as: \"h4\" },\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.goal_setting\"),\r\n      key: \"d4\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n    },\r\n  ];\r\n\r\n  const renderNoData = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"center\",\r\n          marginTop: \"20px\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            color: \"#aaa\",\r\n            textAlign: \"center\",\r\n            padding: 50,\r\n            fontSize: 30,\r\n          }}\r\n        >\r\n          No Data Found.\r\n        </Text>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">\r\n          <div className=\"card advance-search-section\">\r\n            <div\r\n              // className=\"card\"\r\n              style={{\r\n                display: \"flex\",\r\n              }}\r\n            >\r\n              <Dropdown\r\n                label={i18n.t(\"goal_setting_form.status\")}\r\n                placeholder=\"Select\"\r\n                options={statusOption}\r\n                className=\"reviewFrequency\"\r\n                onChange={onChangeStatus}\r\n                style={{ padding: \"0px\" }}\r\n                styles={dropdownStyles}\r\n              />\r\n              {/* {roleType === \"Manager\" ? (\r\n                <ComboBox\r\n                  componentRef={comboBoxRef}\r\n                  className=\"reviewFrequency\"\r\n                  placeholder=\"Enter Employee Name\"\r\n                  label=\"Employee Name\"\r\n                  onChange={handleEmployeeName}\r\n                  allowFreeform\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  autoComplete=\"on\"\r\n                  options={comboBoxBasicOptions}\r\n                />\r\n              ) : null} */}\r\n              <PrimaryButton\r\n                iconProps={{ iconName: \"Search\" }}\r\n                style={{\r\n                  marginLeft: \"20px\",\r\n                  alignSelf: \"center\",\r\n                  marginTop: \"24px\",\r\n                }}\r\n                onClick={handleSearch}\r\n              />\r\n            </div>\r\n          </div>\r\n          {isLoading ? (\r\n            <Spinner\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                padding: \"50px\",\r\n                color: \"#00597d\",\r\n              }}\r\n              size={SpinnerSize.large}\r\n            />\r\n          ) : employeeList.length === 0 ? (\r\n            renderNoData()\r\n          ) : (\r\n                <div className=\"card\">\r\n                  <DetailsList\r\n                    styles={listStyle}\r\n                    items={employeeList}\r\n                    className=\"detail-list\"\r\n                    columns={columns}\r\n                    selectionMode={0}\r\n                  />\r\n                  <div className=\"pagination-style\">\r\n                    <Pagination\r\n                      format=\"buttons\"\r\n                      selectedPageIndex={currentPage}\r\n                      pageCount={Math.ceil(total_count / limitPageLength)}\r\n                      itemsPerPage={limitPageLength}\r\n                      totalItemCount={total_count}\r\n                      onPageChange={(page) => {\r\n                        setLimitSTart(page * limitPageLength);\r\n                        setCurentPage(page);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(GoalSetting);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx",["267","268","269","270","271","272","273","274","275","276","277","278"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  fetchJobHistory,\r\n  update_JobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\r\nimport { OAuthParameters } from \"../../config\";\r\nimport applicationError from \"../../applicationError\";\r\n\r\ninterface ParamTypes {\r\n  name: string;\r\n}\r\n\r\nfunction UpdateJobHistory(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.name);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"name\", \"=\", filtersById]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      //   console.log(\"update response =>.>>>\", response.data);\r\n      setJobHistoryUpdateData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {},\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryUpdateData({\r\n      ...jobHistoryUpdateData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const jobHistoryClicked = () => {\r\n    history.goBack();\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\r\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\r\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\r\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\r\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [client_id] = useState(OAuthParameters.client_id);\r\n  const [applicationError, setApplicationError] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [errMsgToDate, setErrMsgToDate] = useState(\"\");\r\n\r\n  const handleApplicationError = (resp: any) => {\r\n    if (resp.status >= 400 && resp.status <= 499) {\r\n      let errorMessage = \"Please correct the input data & try again.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    } else if (resp.status >= 500 && resp.status <= 599) {\r\n      let errorMessage =\r\n        \"Server error. Please contact system support or try again later.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUpdateJobHistory = () => {\r\n    if (jobHistoryUpdateData.key_responsibilities === \"\") {\r\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\r\n    }\r\n    if (jobHistoryUpdateData.place_of_posting === \"\") {\r\n      setErrMsgPlace(\"Place of Posting is required\");\r\n    }\r\n    if (jobHistoryUpdateData.position_held === \"\") {\r\n      setErrMsgPosition(\"Position Held is required\");\r\n    }\r\n    if (jobHistoryUpdateData.qualifications === \"\") {\r\n      setErrMsgQualifications(\"Qualifications is required\");\r\n    }\r\n    let checkFromDate = moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\");\r\n    let checkToDate = moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\");\r\n    if (checkFromDate > checkToDate) {\r\n      setErrMsgToDate(\"From date greater than To date\");\r\n    }\r\n    if (\r\n      jobHistoryUpdateData.key_responsibilities === \"\" ||\r\n      jobHistoryUpdateData.place_of_posting === \"\" ||\r\n      jobHistoryUpdateData.position_held === \"\" ||\r\n      jobHistoryUpdateData.qualifications === \"\" ||\r\n      jobHistoryUpdateData.qualifications.length >= 140 ||\r\n      jobHistoryUpdateData.key_responsibilities.length >= 140 ||\r\n      checkFromDate > checkToDate\r\n    ) {\r\n      return false;\r\n    }\r\n    const updateQuery = {\r\n      ...jobHistoryUpdateData,\r\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\r\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\r\n    };\r\n    update_JobHistory(updateQuery)\r\n      .then((response: any) => {\r\n        setSuccessModal(true);\r\n      })\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          console.log(\"message\", error.response.data);\r\n          console.log(\"status\", error.response.status);\r\n          if (error.response.status === 401) {\r\n            console.log(\r\n              \"inside 401 error block\",\r\n              JSON.stringify(error.response)\r\n            );\r\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\r\n            const data = {\r\n              refresh_token: refresh_token,\r\n              client_id: client_id,\r\n            };\r\n            handleRefreshToken(data)\r\n              .then((response: any) => {\r\n                console.log(\"response of refresh token \", response);\r\n                console.log(\"calling handle appraisal again.\");\r\n                if (!response.isAxiosError) {\r\n                  handleUpdateJobHistory();\r\n                } else {\r\n                  console.log(\r\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\r\n                    response\r\n                  );\r\n                  dispatch(logout());\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                console.log(\r\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\r\n                  error.response\r\n                );\r\n                dispatch(logout());\r\n              });\r\n          } else {\r\n            handleApplicationError(error.response);\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"card jobHistory-details\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgPosition}\r\n            label=\"Position Held\"\r\n            value={jobHistoryUpdateData.position_held}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"position_held\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div className=\"goal-details\">\r\n            <TextField\r\n              required\r\n              errorMessage={errMsgPlace}\r\n              label=\"Place of Posting\"\r\n              value={jobHistoryUpdateData.place_of_posting}\r\n              placeholder=\"Enter your place of posting\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow w33\"\r\n              name=\"place_of_posting\"\r\n              onChange={onChangeInput}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"From Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              value={new Date(jobHistoryUpdateData.from_date)}\r\n              onSelectDate={(date) =>\r\n                setJobHistoryUpdateData({\r\n                  ...jobHistoryUpdateData,\r\n                  from_date: date,\r\n                })\r\n              }\r\n              styles={datePickerStyle}\r\n            // textField={{ errorMessage: \"Form date is required\" }}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"To Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              value={new Date(jobHistoryUpdateData.to_date)}\r\n              onSelectDate={(date) =>\r\n                setJobHistoryUpdateData({\r\n                  ...jobHistoryUpdateData,\r\n                  to_date: date,\r\n                })\r\n              }\r\n              textField={{ errorMessage: errMsgToDate }}\r\n              styles={datePickerStyle}\r\n            />\r\n          </div>\r\n\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgResponsibility}\r\n            label=\"Key Responsibilities\"\r\n            value={jobHistoryUpdateData.key_responsibilities}\r\n            placeholder=\"Describe your key responsibilities\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"key_responsibilities\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgQualifications}\r\n            label=\"Qualifications\"\r\n            value={jobHistoryUpdateData.qualifications}\r\n            placeholder=\"Qualifications\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"qualifications\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Update\"\r\n                allowDisabledFocus\r\n                onClick={handleUpdateJobHistory}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Job History updated successfully.{\" \"}\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-failed\">\r\n              Somthing went wrong. Please try again.\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={applicationError}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setApplicationError(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-failed\">\r\n              {/* {t(\"pop_up.success.error_message\")} */}\r\n              {errorMessage}\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setApplicationError(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateJobHistory);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx",["279","280"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  add_JobHistory,\r\n  fetchJobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\r\nimport { OAuthParameters } from \"../../config\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  appraisalId: string;\r\n}\r\n\r\nfunction JobHistory(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [appraisalId] = useState(params.appraisalId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      setEmployeeDetails(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryData({\r\n      ...jobHistoryData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\r\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\r\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\r\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\r\n  const [errMsgFromDate, setErrMsgFromDate] = useState(\"\");\r\n  const [errMsgToDate, setErrMsgToDate] = useState(\"\");\r\n  const [client_id] = useState(OAuthParameters.client_id);\r\n  const [applicationError, setApplicationError] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleApplicationError = (resp: any) => {\r\n    if (resp.status >= 400 && resp.status <= 499) {\r\n      let errorMessage = \"Please correct the input data & try again.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    } else if (resp.status >= 500 && resp.status <= 599) {\r\n      let errorMessage =\r\n        \"Server error. Please contact system support or try again later.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    }\r\n  };\r\n\r\n  const handleAddJobHistory = () => {\r\n    if (jobHistoryData.responsibilities === \"\") {\r\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\r\n    }\r\n    if (jobHistoryData.responsibilities.length >= 140) {\r\n      setErrMsgResponsibility(\"Limit exceeds\");\r\n    }\r\n    if (jobHistoryData.place === \"\") {\r\n      setErrMsgPlace(\"Place of posting is required\");\r\n    }\r\n    if (jobHistoryData.position === \"\") {\r\n      setErrMsgPosition(\"Position held is required\");\r\n    }\r\n    if (jobHistoryData.qualifications === \"\") {\r\n      setErrMsgQualifications(\"Qualifications is required\");\r\n    }\r\n    if (jobHistoryData.qualifications.length >= 140) {\r\n      setErrMsgQualifications(\"Limit Exceeds\");\r\n    }\r\n\r\n    if (!fromDate) {\r\n      setErrMsgFromDate(\"Please select date\");\r\n    }\r\n    if (!toDate) {\r\n      setErrMsgToDate(\"Please select date\");\r\n    }\r\n    let checkFromDate = moment(fromDate).format(\"YYYY-MM-DD\");\r\n    let checkToDate = moment(toDate).format(\"YYYY-MM-DD\");\r\n    if (checkFromDate > checkToDate) {\r\n      setErrMsgToDate(\"From date greater than To date\");\r\n    }\r\n    const addQuery = {\r\n      appraisal_id: appraisalId,\r\n      employee_id: filtersById,\r\n      key_responsibilities: jobHistoryData.responsibilities,\r\n      place_of_posting: jobHistoryData.place,\r\n      position_held: jobHistoryData.position,\r\n      qualifications: jobHistoryData.qualifications,\r\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\r\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\r\n    };\r\n    if (\r\n      jobHistoryData.responsibilities === \"\" ||\r\n      jobHistoryData.place === \"\" ||\r\n      jobHistoryData.position === \"\" ||\r\n      jobHistoryData.qualifications === \"\" ||\r\n      jobHistoryData.qualifications.length >= 140 ||\r\n      jobHistoryData.responsibilities.length >= 140 ||\r\n      !fromDate ||\r\n      !toDate ||\r\n      checkFromDate > checkToDate\r\n    ) {\r\n      return false;\r\n    }\r\n    add_JobHistory(addQuery)\r\n      .then((response: any) => {\r\n        setSuccessModal(true);\r\n      })\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          console.log(\"message\", error.response.data);\r\n          console.log(\"status\", error.response.status);\r\n          if (error.response.status === 401) {\r\n            console.log(\r\n              \"inside 401 error block\",\r\n              JSON.stringify(error.response)\r\n            );\r\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\r\n            const data = {\r\n              refresh_token: refresh_token,\r\n              client_id: client_id,\r\n            };\r\n            handleRefreshToken(data)\r\n              .then((response: any) => {\r\n                console.log(\"response of refresh token \", response);\r\n                console.log(\"calling handle appraisal again.\");\r\n                if (!response.isAxiosError) {\r\n                  handleAddJobHistory();\r\n                } else {\r\n                  console.log(\r\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\r\n                    response\r\n                  );\r\n                  dispatch(logout());\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                console.log(\r\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\r\n                  error.response\r\n                );\r\n                dispatch(logout());\r\n              });\r\n          } else {\r\n            handleApplicationError(error.response);\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"jobHistory-details card\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgPosition}\r\n            label=\"Position Held\"\r\n            value={jobHistoryData.position}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div className=\"goal-details\">\r\n            <TextField\r\n              required\r\n              errorMessage={errMsgPlace}\r\n              label=\"Place of Posting\"\r\n              value={jobHistoryData.place}\r\n              placeholder=\"Enter your place of posting\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow w33\"\r\n              name=\"place\"\r\n              onChange={onChangeInput}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"From Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              onSelectDate={onchangeFromDate}\r\n              value={fromDate}\r\n              styles={datePickerStyle}\r\n              textField={{ errorMessage: errMsgFromDate }}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"To Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              onSelectDate={onchangeToDate}\r\n              value={toDate}\r\n              styles={datePickerStyle}\r\n              textField={{ errorMessage: errMsgToDate }}\r\n            />\r\n          </div>\r\n\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgResponsibility}\r\n            label=\"Key Responsibilities\"\r\n            value={jobHistoryData.responsibilities}\r\n            placeholder=\"Describe your key responsibilities\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"responsibilities\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgQualifications}\r\n            label=\"Qualifications\"\r\n            value={jobHistoryData.qualifications}\r\n            placeholder=\"Qualifications\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow w100\"\r\n            name=\"qualifications\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Add\"\r\n                allowDisabledFocus\r\n                onClick={handleAddJobHistory}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Job History added successfully.\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-failed\">\r\n              Somthing went wrong. Please try again.\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={applicationError}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setApplicationError(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-failed\">\r\n              {/* {t(\"pop_up.success.error_message\")} */}\r\n              {errorMessage}\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setApplicationError(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(JobHistory);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx",["281","282","283","284","285","286","287","288","289","290"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  DetailsList,\r\n  IColumn,\r\n  IDetailsListStyles,\r\n} from \"office-ui-fabric-react/lib/DetailsList\";\r\nimport \"office-ui-fabric-react/dist/css/fabric.css\";\r\nimport {\r\n  PrimaryButton,\r\n  getTheme,\r\n  TextField,\r\n  Dropdown,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  Link,\r\n  Spinner,\r\n  SpinnerSize,\r\n  Modal,\r\n  IconButton,\r\n  IModalStyles,\r\n  IIconProps,\r\n} from \"office-ui-fabric-react\";\r\nimport {\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\r\nimport Header from \"../../Header\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\n\r\nimport \"./style.css\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  edit_appraisal,\r\n  fetchAppraisalData,\r\n  fetchAppraisalDataById,\r\n} from \"../../redux/actions/apprisal\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction Appraisal(props: any) {\r\n  const { t, i18n } = useTranslation();\r\n  const history = useHistory();\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [limitPageLength, setLimitPageLength] = useState(5);\r\n  const [orderBy, setOrderBy] = useState(\"asc\");\r\n  const [orderByField, setOrderByField] = useState(\"id\");\r\n  const [filtersById, setFiltersById] = useState(\"\");\r\n  const [filtersByDescription, setFiltersByDescription] = useState(\"\");\r\n  const [filtersByReviewFreq, setFiltersByReviewFreq] = useState(\"\");\r\n  const [filtersByAppraisal, setFiltersByAppraisal] = useState(\"\");\r\n  const [filtersByFormat, setFiltersByFormat] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const appraisal = useSelector((state: RootState) => state.appraisal);\r\n  const { appraisalList, isLoading, count, total_count }: any = appraisal;\r\n  const [formatDate, setFormatDate] = useState(\"\");\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const params = useParams<ParamTypes>();\r\n\r\n  // console.log(\"roletype=>\", roleT);\r\n  const newAppraisalList = appraisalList.map((element: any) => {\r\n    const a = {\r\n      ...element,\r\n      review_from: moment(element.review_from).format(\"DD-MM-YYYY\"),\r\n      appraisal_to: moment(element.appraisal_to).format(\"DD-MM-YYYY\"),\r\n    };\r\n    return a;\r\n  });\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    if (filtersByDescription) {\r\n      filters.push([\"appraisal_description\", \"like\", filtersByDescription]);\r\n    }\r\n    if (filtersByReviewFreq) {\r\n      filters.push([\"review_frequency\", \"=\", filtersByReviewFreq]);\r\n    }\r\n    if (filtersByAppraisal) {\r\n      filters.push([\"type\", \"=\", filtersByAppraisal]);\r\n    }\r\n    if (filtersByFormat) {\r\n      filters.push([\"format_type\", \"=\", filtersByFormat]);\r\n    }\r\n    dispatch(\r\n      fetchAppraisalData(\r\n        limitStart,\r\n        limitPageLength,\r\n        `${orderByField} ${orderBy}`,\r\n        JSON.stringify(filters),\r\n        roleType,\r\n      )\r\n    );\r\n  }, [\r\n    limitStart,\r\n    limitPageLength,\r\n    orderBy,\r\n    filtersById,\r\n    filtersByDescription,\r\n    filtersByReviewFreq,\r\n    filtersByAppraisal,\r\n    filtersByFormat,\r\n    roleType\r\n  ]);\r\n\r\n  const columns: IColumn[] = [\r\n    {\r\n      key: \"01\",\r\n      name: i18n.t(\"common.ID\"),\r\n      fieldName: \"id\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSorted: true,\r\n      className: \"idColumn\",\r\n      isSortedDescending: false,\r\n      sortAscendingAriaLabel: \"Sorted A to Z\",\r\n      isRowHeader: true,\r\n      onColumnClick: _onColumnClick,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"02\",\r\n      name: i18n.t(\"appraisal_form.Description\"),\r\n      fieldName: \"appraisal_description\",\r\n      minWidth: 100,\r\n      maxWidth: 200,\r\n      isMultiline: true,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"03\",\r\n      name: i18n.t(\"appraisal_form.Review_From\"),\r\n      fieldName: \"review_from\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: i18n.t(\"appraisal_form.Appraisal_To\"),\r\n      fieldName: \"appraisal_to\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"05\",\r\n    //   name: i18n.t(\"appraisal_form.department\"),\r\n    //   fieldName: \"department\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 120,\r\n    //   isSortedDescending: false,\r\n    //   isRowHeader: true,\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"06\",\r\n      name: i18n.t(\"common.type\"),\r\n      fieldName: \"type\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: i18n.t(\"appraisal_form.Format_Type\"),\r\n      fieldName: \"format_type\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: i18n.t(\"appraisal_form.Review_Frequency\"),\r\n      fieldName: \"review_frequency\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"09\",\r\n      name: i18n.t(\"common.action\"),\r\n      fieldName: \"action\",\r\n      minWidth: 110,\r\n      maxWidth: 110,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              viewAppraisal(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateAppriasal(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              deleteAppraisal(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [showDelete, setShowDelete] = useState(false);\r\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const [deleteItemId, setDeleteItemId] = useState(null);\r\n  const [updateData, setUpdateData]: any = useState({});\r\n\r\n  const deleteAppraisal = (item: any) => {\r\n    setDeleteItemId(item.id);\r\n    // console.log(\"item id\", item)\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"id\", \"like\", item.name]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters),\r\n      roleType\r\n    ).then((response) => {\r\n      // console.log(response.data)\r\n      setUpdateData(response.data[0]);\r\n    });\r\n    setShowDelete(true);\r\n  };\r\n\r\n  const handleDeleteAppraisal = () => {\r\n    const deleteQuery = {\r\n      id: deleteItemId,\r\n      is_deleted: 1,\r\n    };\r\n    edit_appraisal(deleteQuery).then((response) => {\r\n      setShowDelete(false);\r\n      setShowDeleteSuccess(true);\r\n      setDeleteItemId(null);\r\n      setUpdateData(null);\r\n    });\r\n  };\r\n\r\n  const viewAppraisal = (item: any) => {\r\n    history.push(`/appraisal/view/${item.id}`);\r\n  };\r\n\r\n  const updateAppriasal = (item: any) => {\r\n    history.push(`/appraisal/update/${item.id}`);\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {};\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.performance\"),\r\n      key: \"d1\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.appraisal\"),\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n    },\r\n  ];\r\n\r\n  const handleSearchClick = () => {\r\n    setFiltersById(`${searchById}%`);\r\n    setFiltersByDescription(`${searchByDescription}%`);\r\n    setFiltersByReviewFreq(`${reviewSearch?.key || \"\"}`);\r\n    setFiltersByAppraisal(`${AppraisalSearch?.key || \"\"}`);\r\n    setFiltersByFormat(`${formatSearch?.key || \"\"}`);\r\n    setLimitSTart(0);\r\n    setCurentPage(0);\r\n  };\r\n\r\n  function _onColumnClick(\r\n    ev?: React.MouseEvent<HTMLElement>,\r\n    column?: IColumn\r\n  ): void {\r\n    // console.log('column', column)\r\n    if (column?.fieldName === orderByField) {\r\n      if (orderBy === \"asc\") {\r\n        setOrderBy(\"desc\");\r\n      } else {\r\n        setOrderBy(\"asc\");\r\n      }\r\n    } else {\r\n      setOrderByField(column?.fieldName || \"id\");\r\n    }\r\n  }\r\n\r\n  const controlStyles = {\r\n    root: {\r\n      margin: \"0 10px 20px 0\",\r\n      maxWidth: \"300px\",\r\n      // borderRadius: \"20px\",\r\n    },\r\n\r\n    wrapper: {\r\n      \".ms-TextField-fieldGroup fieldGroup-91\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const [currentPage, setCurentPage] = useState(0);\r\n\r\n  const [searchById, setSearchById] = useState(\"\");\r\n  const [searchByDescription, setSearchByDescription] = useState(\"\");\r\n\r\n  const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [AppraisalSearch, setAppraisalSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [formatSearch, setForamtSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const itemSearch = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchById(text || \"\");\r\n  };\r\n\r\n  const itemSearchDescription = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchByDescription(text || \"\");\r\n  };\r\n\r\n  const itemSearchReview = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const itemSearchAppraisal = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setAppraisalSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const itemSearchFormatType = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setForamtSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      backgroundColor: \"#344f84\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const searchOptions: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Yearly\", text: \"Yearly\" },\r\n    { key: \"Monthly\", text: \"Monthly\" },\r\n  ];\r\n\r\n  const searchFormatType: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Sales Employees\", text: \"Sales Employees\" },\r\n    { key: \"Non Sales Employees\", text: \"Non Sales Employees\" },\r\n  ];\r\n\r\n  const searchAppraisal: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Annual Appraisal\", text: \"Annual Appraisal\" },\r\n    { key: \"Confirmation Appraisal\", text: \"Confirmation Appraisal\" },\r\n  ];\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      // width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const [advanceSearch, setAdvanceSearch] = useState(false);\r\n\r\n  const handleAdvanceSearch = () => {\r\n    if (advanceSearch == false) {\r\n      setAdvanceSearch(true);\r\n    }\r\n    if (advanceSearch == true) {\r\n      setAdvanceSearch(false);\r\n    }\r\n  };\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const renderNoData = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"center\",\r\n          marginTop: \"20px\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            color: \"#aaa\",\r\n            textAlign: \"center\",\r\n            padding: 50,\r\n            fontSize: 30,\r\n          }}\r\n        >\r\n          No Appraisal Data Found\r\n        </Text>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card advance-search-section\">\r\n          <div className=\"searchBarClass\">\r\n            <TextField\r\n              label={t(\"common.ID\")}\r\n              onChange={itemSearch}\r\n              placeholder={t(\"appraisal_form.field_place_holders.id\")}\r\n              className=\"searchInput\"\r\n              styles={controlStyles}\r\n            />\r\n            <TextField\r\n              placeholder={t(\"appraisal_form.field_place_holders.description\")}\r\n              label={t(\"appraisal_form.Description\")}\r\n              className=\"searchInput\"\r\n              onChange={itemSearchDescription}\r\n              styles={controlStyles}\r\n            />\r\n            <Dropdown\r\n              label={t(\"appraisal_form.Review_Frequency\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.select\")}\r\n              options={searchOptions}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchReview}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n            <div\r\n              style={{\r\n                marginTop: \"1.8rem\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => {\r\n                handleAdvanceSearch();\r\n              }}\r\n            >\r\n              <MoreHorizIcon style={{ color: \"#344f84\", marginLeft: \"20px\" }} />\r\n            </div>\r\n            <PrimaryButton\r\n              iconProps={{ iconName: \"Search\" }}\r\n              onClick={handleSearchClick}\r\n              style={{\r\n                marginLeft: \"10px\",\r\n                alignSelf: \"center\",\r\n                marginTop: \"14px\",\r\n              }}\r\n            />\r\n            <PrimaryButton\r\n              text={t(\"appraisal_form.buttons.new\")}\r\n              iconProps={{ iconName: \"Add\" }}\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/addApprisal\");\r\n              }}\r\n              style={{\r\n                marginLeft: \"auto\",\r\n                alignSelf: \"center\",\r\n                marginTop: \"14px\",\r\n              }}\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n          </div>\r\n          <div\r\n            className={\r\n              advanceSearch == true ? `advanceSearch` : `advanceSearchNull`\r\n            }\r\n          >\r\n            <Dropdown\r\n              label={t(\"appraisal_form.Appraisal_To\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.select\")}\r\n              options={searchAppraisal}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchAppraisal}\r\n              style={{ padding: \"0px\", marginRight: \"10px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n            <Dropdown\r\n              label={t(\"appraisal_form.Review_From\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.select\")}\r\n              options={searchFormatType}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchFormatType}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {isLoading ? (\r\n          <Spinner\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              padding: \"50px\",\r\n              color: \"#00597d\",\r\n            }}\r\n            size={SpinnerSize.large}\r\n          />\r\n        ) : appraisalList.length === 0 ? (\r\n          renderNoData()\r\n        ) : (\r\n          <div className=\"card\">\r\n            <DetailsList\r\n              styles={listStyle}\r\n              items={newAppraisalList}\r\n              className=\"detail-list\"\r\n              columns={columns}\r\n              selectionMode={0}\r\n            />\r\n            <div className=\"pagination-style\">\r\n              <Pagination\r\n                format=\"buttons\"\r\n                selectedPageIndex={currentPage}\r\n                pageCount={Math.ceil(total_count / limitPageLength)}\r\n                itemsPerPage={limitPageLength}\r\n                totalItemCount={total_count}\r\n                onPageChange={(page) => {\r\n                  setLimitSTart(page * limitPageLength);\r\n                  setCurentPage(page);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDelete}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">{t(\"pop_up.delete.heading\")}</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              {t(\"pop_up.delete.confirmation_message\")}\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text={t(\"pop_up.delete.heading\")}\r\n                allowDisabledFocus\r\n                onClick={handleDeleteAppraisal}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text={t(\"appraisal_form.buttons.cancel\")}\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccess}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">{t(\"pop_up.success.heading\")}</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              {t(\"pop_up.delete.success_message\")}\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text={t(\"appraisal_form.buttons.ok\")}\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  handleSearchClick();\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(Appraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx",["291","292","293","294","295","296","297"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  ITextFieldStyles,\r\n} from \"office-ui-fabric-react/lib/TextField\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport {\r\n  addYears,\r\n  ComboBox,\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IComboBoxOption,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Separator,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\r\nimport { OAuthParameters } from \"../../config\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n  // { key: \"key4\", text: \"Management\" },\r\n];\r\nconst departmentOptions: IComboBoxOption[] = [\r\n  { key: \"Accounts\", text: \"Accounts\" },\r\n  { key: \"Delivery\", text: \"Delivery\" },\r\n  { key: \"Product Development\", text: \"Product Development\" },\r\n  { key: \"Sales\", text: \"Sales\" },\r\n];\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\r\n];\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction UpdateAppraisal(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const stackTokens = { childrenGap: 10 };\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n\r\n  const [updateData, setUpdateData]: any = useState({});\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters),\r\n      roleType\r\n    ).then((response) => {\r\n      setUpdateData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      \".ms-TextField-wrapper\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n\r\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   marginRight: \"10px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\r\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\r\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const [client_id] = useState(OAuthParameters.client_id);\r\n  const [applicationError, setApplicationError] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n\r\n  const handleApplicationError = (resp: any) => {\r\n    if (resp.status >= 400 && resp.status <= 499) {\r\n      let errorMessage = \"Please correct the input data & try again.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    } else if (resp.status >= 500 && resp.status <= 599) {\r\n      let errorMessage =\r\n        \"Server error. Please contact system support or try again later.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    }\r\n  };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const handleUpdateApprisal = () => {\r\n    let pattern = /^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$/;\r\n    if (updateData.appraisal_description === \"\") {\r\n      setErrMsgDescription(\"Please enter the description\");\r\n    }\r\n    if (updateData.appraisal_description.length >= 100) {\r\n      setErrMsgDescription(\"Limit exceeds\");\r\n    }\r\n    if (!pattern.test(updateData.appraisal_owner)) {\r\n      setErrMsgOwner(\"Please give currect pattern \");\r\n    }\r\n    if (updateData.appraisal_owner === \"\") {\r\n      setErrMsgOwner(\"Please enter the owner name\");\r\n    }\r\n    if (updateData.appraisal_owner.length >= 100) {\r\n      setErrMsgOwner(\"Limit exceeds\");\r\n    }\r\n    let checkReviewDate = moment(updateData.review_from).format(\"YYYY-MM-DD\");\r\n    let checkAppraisalDate = moment(updateData.appraisal_to).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n    if (checkReviewDate > checkAppraisalDate) {\r\n      setErrMsgAppraisalDate(\"From date greater than To date\");\r\n    }\r\n    if (\r\n      checkReviewDate > checkAppraisalDate ||\r\n      updateData.appraisal_owner === \"\" ||\r\n      updateData.appraisal_owner.length >= 100 ||\r\n      updateData.appraisal_description.length >= 100 ||\r\n      updateData.appraisal_description === \"\"\r\n    ) {\r\n      return false;\r\n    }\r\n    const updateQuery = {\r\n      ...updateData,\r\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\r\n      description: \"22\",\r\n      route: \"appraisal/BB00002\",\r\n    };\r\n    edit_appraisal(updateQuery)\r\n      .then((response) => {\r\n        setSuccessModal(true);\r\n      })\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          console.log(\"message\", error.response.data);\r\n          console.log(\"status\", error.response.status);\r\n          if (error.response.status === 401) {\r\n            console.log(\r\n              \"inside 401 error block\",\r\n              JSON.stringify(error.response)\r\n            );\r\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\r\n            const data = {\r\n              refresh_token: refresh_token,\r\n              client_id: client_id,\r\n            };\r\n            handleRefreshToken(data)\r\n              .then((response: any) => {\r\n                console.log(\"response of refresh token \", response);\r\n                console.log(\"calling handle appraisal again.\");\r\n                if (!response.isAxiosError) {\r\n                  handleUpdateApprisal();\r\n                } else {\r\n                  console.log(\r\n                    \"ERROR: 1. unable to refresh access_token logging out.\",\r\n                    response\r\n                  );\r\n                  dispatch(logout());\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                console.log(\r\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\r\n                  error.response\r\n                );\r\n                dispatch(logout());\r\n              });\r\n          } else {\r\n            handleApplicationError(error.response);\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const renderUpdateForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container card\">\r\n          <div className=\"goal-details\">\r\n            <TextField\r\n              disabled\r\n              placeholder=\"ID\"\r\n              value={updateData.id}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              errorMessage={errMsgDescription}\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={updateData.appraisal_description}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"goal-details\">\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Review From\"\r\n              // value={updateData.review_from}\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={new Date(updateData.review_from)}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, review_from: date })\r\n              }\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Appraisal To\"\r\n              textField={{ errorMessage: errMsgAppraisalDate }}\r\n              value={new Date(updateData.appraisal_to)}\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, appraisal_to: date })\r\n              }\r\n              styles={datePickerStyle}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              selectedKey={\r\n                reviewFrequencyOptions.find(\r\n                  (item) => item.text === updateData.review_frequency\r\n                )?.key\r\n              }\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow w33\"\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, review_frequency: item?.text })\r\n              }\r\n              options={reviewFrequencyOptions}\r\n            // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <div className=\"goal-details\">\r\n            <Dropdown\r\n              required\r\n              selectedKey={\r\n                typeOptions.find((item) => item.text === updateData.type)?.key\r\n              }\r\n              label=\"Type\"\r\n              placeholder=\"Select Type\"\r\n              className=\"flexGrow w25\"\r\n              options={typeOptions}\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, type: item?.text })\r\n              }\r\n            // styles={typeDropdownStyles}\r\n            />\r\n            <Dropdown\r\n              required\r\n              selectedKey={\r\n                formateTypeOptions.find(\r\n                  (item) => item.text === updateData.format_type\r\n                )?.key\r\n              }\r\n              label=\"Format Type\"\r\n              className=\"flexGrow w25\"\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, format_type: item?.text })\r\n              }\r\n              placeholder=\"Select Format Type\"\r\n              options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n            />\r\n            <TextField\r\n              required\r\n              label=\"Owner\"\r\n              placeholder=\"Owner\"\r\n              errorMessage={errMsgOwner}\r\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\r\n              value={updateData.appraisal_owner}\r\n              styles={textfelidStyle}\r\n              name=\"appraisal_owner\"\r\n              className=\"flexGrow w25\"\r\n              onChange={onChangeInput}\r\n            />\r\n            {/* <Dropdown\r\n              label=\"Department\"\r\n              // placeholder={t(\"appraisal_form.field_place_holders.department\")}\r\n              selectedKey={\r\n                departmentOptions.find(\r\n                  (item) => item.text === updateData.department\r\n                )?.key\r\n              }\r\n              className=\"flexGrow w25\"\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, department: item?.text })\r\n              }\r\n              options={departmentOptions}\r\n            // styles={dropdownStyles}\r\n            /> */}\r\n          </div>\r\n          <div className=\"goal-details\">\r\n            <ComboBox\r\n              label=\"Department\"\r\n              className=\"flexGrow w33\"\r\n              selectedKey={\r\n                departmentOptions.find(\r\n                  (item) => item.key === updateData.department\r\n                )?.key\r\n              }\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, department: item?.key })\r\n              }\r\n              allowFreeform\r\n              autoComplete=\"on\"\r\n              options={departmentOptions}\r\n            // styles={dropdownStyles}\r\n            />\r\n\r\n          </div>\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Success</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      history.push(\"/appraisal\");\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  Appraisal updated Successfully.\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"OK\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/appraisal\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-failed\">\r\n                  Somthing went wrong. Please try again.\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Go Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={applicationError}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setApplicationError(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-failed\">\r\n                  {/* {t(\"pop_up.success.error_message\")} */}\r\n                  {errorMessage}\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setApplicationError(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Update\"\r\n                allowDisabledFocus\r\n                onClick={handleUpdateApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/appraisal\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderUpdateForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\application.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx",["298","299"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx",["300","301","302","303","304","305","306","307","308","309"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx",["310","311","312","313","314","315","316","317","318","319","320","321","322","323","324"],"import React, { useState } from \"react\";\r\nimport { TextField } from \"office-ui-fabric-react/lib/TextField\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport \"./style.css\";\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getColorFromString,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IColor,\r\n  IColorPickerProps,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  ColorPicker,\r\n  Separator,\r\n  addYears,\r\n  ComboBox,\r\n  IComboBoxOption,\r\n  IComboBox,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\r\nimport { handleRefreshToken, logout } from \"../../redux/actions/auth\";\r\nimport { OAuthParameters } from \"../../config\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n];\r\n\r\nconst departmentOptions: IComboBoxOption[] = [\r\n  { key: \"Accounts\", text: \"Accounts\" },\r\n  { key: \"Delivery\", text: \"Delivery\" },\r\n  { key: \"Product Development\", text: \"Product Development\" },\r\n  { key: \"Sales\", text: \"Sales\" },\r\n];\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\r\n];\r\n\r\nconst white = getColorFromString(\"#006994\")!;\r\n\r\nfunction AddAppraisal(props: any) {\r\n  const { t, i18n } = useTranslation();\r\n  const stackTokens = { childrenGap: 10 };\r\n  const [color, setColor] = useState(white);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const updateColor = (ev: any, colorObj: IColor) => {\r\n    setColor(colorObj);\r\n  };\r\n\r\n  const [showPreview, setShowPreview] = useState(true);\r\n  const [alphaType, setAlphaType] = React.useState<\r\n    IColorPickerProps[\"alphaType\"]\r\n  >(\"alpha\");\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    icon: {\r\n      color: \"#344f84\",\r\n    },\r\n  };\r\n\r\n  const [claimsData, setClaimsData] = useState({\r\n    id: \"\",\r\n    description: \"\",\r\n    owner: \"\",\r\n    department: \"\",\r\n    kraSettingGoal: false,\r\n    kraSettingCompetencies: false,\r\n    kraSettingDevelopmentPlan: false,\r\n    kraSettingSummary: false,\r\n    assessmentGoal: false,\r\n    assessmentCompetencies: false,\r\n    assessmentDevelopmentPlan: false,\r\n    assessmentSummary: false,\r\n  });\r\n\r\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [department, setDepartment]: any = useState(\"\")\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeType = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setSelectedType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n  // console.log(\"type==>\", selectedType.text )\r\n\r\n  const onChangeReviewFrequency = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewFrequency(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const onChangeDepartment = (\r\n    event: React.FormEvent<IComboBox>,\r\n    option?: IComboBoxOption,\r\n    index?: number,\r\n    value?: string\r\n  ) => {\r\n    setDepartment(\r\n      option?.key || \"\"\r\n    );\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: i18n.t(\"breadcrumb_items.performance\"), key: \"d1\" },\r\n    {\r\n      text: i18n.t(\"breadcrumb_items.appraisal\"),\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: i18n.t(\"breadcrumb_items.add_appraisal\"), key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  const [dateReview, setDateReview] = useState<Date | undefined>();\r\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\r\n\r\n  const reviewFromDate = (date: Date | null | undefined): void => {\r\n    setDateReview(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const appraisalToDate = (date: Date | null | undefined): void => {\r\n    setdDateAppraisal(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\r\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\r\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\r\n  const [errMsgType, setErrMsgType] = useState(\"\");\r\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\r\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\r\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [error400, setError400] = useState(false);\r\n  const [error500, setError500] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isError, setIsError] = useState(true);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const [client_id] = useState(OAuthParameters.client_id);\r\n  const [applicationError, setApplicationError] = useState(false);\r\n\r\n  // let errorMessage = \"Something went wrong. Please contact system support.\";\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const handleApplicationError = (resp: any) => {\r\n    if (resp.status >= 400 && resp.status <= 499) {\r\n      let errorMessage = \"Please correct the input data & try again.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    } else if (resp.status >= 500 && resp.status <= 599) {\r\n      let errorMessage =\r\n        \"Server error. Please contact system support or try again later.\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    }\r\n    if (resp.status === 409) {\r\n      let errorMessage = \"Appraisal ID already exists\";\r\n      setErrorMessage(errorMessage);\r\n      setApplicationError(true);\r\n    }\r\n\r\n    // setApplicationError(true);\r\n    // return (\r\n    //   <Modal\r\n    //     titleAriaId={\"ERROR\"}\r\n    //     isOpen={true}\r\n    //     isBlocking={false}\r\n    //     styles={modalStyle}\r\n    //     // containerClassName={contentStyles.container}\r\n    //   >\r\n    //     <div className=\"modal-header-local\">\r\n    //       <div className=\"modal-title\">Error</div>\r\n    //       <IconButton\r\n    //         styles={iconButtonStyles}\r\n    //         iconProps={cancelIcon}\r\n    //         ariaLabel=\"Close popup modal\"\r\n    //         onClick={() => {\r\n    //           setApplicationError(false);\r\n    //         }}\r\n    //       />\r\n    //     </div>\r\n    //     <div className=\"modal-content-failed\">{errorMessage}</div>\r\n    //     <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n    //       <PrimaryButton\r\n    //         text={t(\"appraisal_form.buttons.back\")}\r\n    //         allowDisabledFocus\r\n    //         onClick={() => {\r\n    //           setApplicationError(false);\r\n    //         }}\r\n    //         disabled={false}\r\n    //         checked={false}\r\n    //       />\r\n    //     </div>\r\n    //   </Modal>\r\n    // );\r\n  };\r\n\r\n  const handleAddApprisal = () => {\r\n    let pattern = /^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$/;\r\n    if (claimsData.id === \"\") {\r\n      setErrMsg(i18n.t(\"error_messages.please_enter_id\"));\r\n    }\r\n    if (claimsData.id.length >= 100) {\r\n      setErrMsg(\"Limit exceeds\");\r\n    }\r\n    if (claimsData.description === \"\") {\r\n      setErrMsgDescription(i18n.t(\"error_messages.please_enter_description\"));\r\n    }\r\n    if (claimsData.description.length >= 100) {\r\n      setErrMsgDescription(\"Limit exceeds\");\r\n    }\r\n    if (!pattern.test(claimsData.owner)) {\r\n      setErrMsgOwner(i18n.t(\"error_messages.please_enter_currect_pattern\"));\r\n    }\r\n    if (claimsData.owner === \"\") {\r\n      setErrMsgOwner(i18n.t(\"error_messages.please_enter_owner_name\"));\r\n    }\r\n    if (claimsData.owner.length >= 100) {\r\n      setErrMsgOwner(\"Limit exceeds\");\r\n    }\r\n    if (formateType.text === \"\") {\r\n      setErrMsgFormatType(i18n.t(\"error_messages.select_format_type\"));\r\n    }\r\n    if (reviewFrequency.text === \"\") {\r\n      setErrMsgReviewFrequency(\r\n        i18n.t(\"error_messages.select_review_frequency\")\r\n      );\r\n    }\r\n    if (selectedType.text === \"\") {\r\n      setErrMsgType(i18n.t(\"error_messages.select_type\"));\r\n    }\r\n    if (!dateReview) {\r\n      setErrMsgReviewDate(i18n.t(\"error_messages.please_enter_date\"));\r\n    }\r\n    if (!dateAppraisal) {\r\n      setErrMsgAppraisalDate(i18n.t(\"error_messages.please_enter_date\"));\r\n    }\r\n    let checkReviewDate = moment(dateReview).format(\"YYYY-MM-DD\");\r\n    let checkAppraisalDate = moment(dateAppraisal).format(\"YYYY-MM-DD\");\r\n    if (checkReviewDate > checkAppraisalDate) {\r\n      setErrMsgAppraisalDate(\r\n        i18n.t(\"error_messages.from_date_greater_than_to_date\")\r\n      );\r\n    }\r\n    if (\r\n      claimsData.id === \"\" ||\r\n      claimsData.description === \"\" ||\r\n      claimsData.owner === \"\" ||\r\n      formateType.text === \"\" ||\r\n      reviewFrequency.text === \"\" ||\r\n      selectedType.text === \"\" ||\r\n      !dateReview ||\r\n      !dateAppraisal ||\r\n      claimsData.description.length >= 100 ||\r\n      claimsData.owner.length >= 100 ||\r\n      claimsData.id.length >= 100 ||\r\n      checkReviewDate > checkAppraisalDate\r\n    ) {\r\n      return false;\r\n    }\r\n    const addQuery = {\r\n      id: claimsData.id,\r\n      appraisal_description: claimsData.description,\r\n      description: \"22\",\r\n      format_type: formateType.text,\r\n      review_frequency: reviewFrequency.text,\r\n      type: selectedType.text,\r\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\r\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\r\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\r\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\r\n      assessment_tab_goals: claimsData.assessmentGoal,\r\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\r\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\r\n      assessment_tab_summary: claimsData.assessmentSummary,\r\n      route: \"appraisal/BB00002\",\r\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\r\n      appraisal_owner: claimsData.owner,\r\n      department: department\r\n    };\r\n    setLoading(false);\r\n    add_apprisal(addQuery, roleType)\r\n      .then((response) => {\r\n        // console.log(\"response=>\", response);\r\n        setSuccessModal(true);\r\n      })\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          console.log(\"message\", error.response.data);\r\n          console.log(\"status\", error.response.status);\r\n          if (error.response.status === 401) {\r\n            console.log(\r\n              \"inside 401 error block\",\r\n              JSON.stringify(error.response)\r\n            );\r\n            const refresh_token = sessionStorage.getItem(\"refresh_token\");\r\n            const data = {\r\n              refresh_token: refresh_token,\r\n              client_id: client_id,\r\n            };\r\n            handleRefreshToken(data)\r\n              .then((response: any) => {\r\n                console.log(\"response of refresh token \", response);\r\n                console.log(\"calling handle appraisal again.\");\r\n                handleAddApprisal();\r\n\r\n              })\r\n              .catch((error) => {\r\n                console.log(\r\n                  \"ERROR: 2. unable to refresh access_token logging out.\",\r\n                  error.response\r\n                );\r\n                dispatch(logout());\r\n              });\r\n          } else {\r\n            // if (error.response.status > 400 && error.response.status < 499) {\r\n            //   errorcode(400);\r\n            // }\r\n            // if (error.response.status > 500 && error.response.status < 599) {\r\n            //   errorcode(500);\r\n            // }\r\n\r\n            handleApplicationError(error.response);\r\n          }\r\n          // console.log(error.response.headers);\r\n        }\r\n      });\r\n  };\r\n\r\n  const renderForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <ColorPicker\r\n          color={color}\r\n          onChange={updateColor}\r\n          alphaType={alphaType}\r\n          showPreview={showPreview}\r\n          // styles={colorPickerStyles}\r\n        /> */}\r\n        <div className=\"form-container card\">\r\n          <div className=\"goal-details\">\r\n            <TextField\r\n              required\r\n              placeholder={t(\"appraisal_form.field_place_holders.id\")}\r\n              value={claimsData.id}\r\n              errorMessage={errMsg}\r\n              name=\"id\"\r\n              label={t(\"common.ID\")}\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              placeholder={t(\"appraisal_form.field_place_holders.description\")}\r\n              label={t(\"appraisal_form.Description\")}\r\n              value={claimsData.description}\r\n              errorMessage={errMsgDescription}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"goal-details\">\r\n            <DatePicker\r\n              isRequired={true}\r\n              textField={{ errorMessage: errMsgReviewDate }}\r\n              label={t(\"appraisal_form.Review_From\")}\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={dateReview}\r\n              onSelectDate={reviewFromDate}\r\n              placeholder={t(\r\n                \"appraisal_form.field_place_holders.select_a_date\"\r\n              )}\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              textField={{ errorMessage: errMsgAppraisalDate }}\r\n              label={t(\"appraisal_form.Appraisal_To\")}\r\n              className={`${controlClass.control} flexGrow w33`}\r\n              firstDayOfWeek={firstDayOfWeekAppraisal}\r\n              strings={DayPickerStringsAppraisal}\r\n              onSelectDate={appraisalToDate}\r\n              styles={datePickerStyle}\r\n              value={dateAppraisal}\r\n              placeholder={t(\r\n                \"appraisal_form.field_place_holders.select_a_date\"\r\n              )}\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              errorMessage={errMsgReviewFrequency}\r\n              label={t(\"appraisal_form.Review_Frequency\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.select\")}\r\n              className=\"flexGrow w33\"\r\n              onChange={onChangeReviewFrequency}\r\n              options={reviewFrequencyOptions}\r\n            // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"goal-details\">\r\n            <Dropdown\r\n              required\r\n              label={t(\"common.type\")}\r\n              errorMessage={errMsgType}\r\n              placeholder={t(\"appraisal_form.field_place_holders.select_type\")}\r\n              className=\"flexGrow w33\"\r\n              options={typeOptions}\r\n              onChange={onChangeType}\r\n            // styles={typeDropdownStyles}\r\n            />\r\n            <Dropdown\r\n              required\r\n              label={t(\"appraisal_form.Format_Type\")}\r\n              errorMessage={errMsgFormatType}\r\n              className=\"flexGrow w33\"\r\n              onChange={onChangeFormateType}\r\n              placeholder={t(\r\n                \"appraisal_form.field_place_holders.select_format_type\"\r\n              )}\r\n              options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n            />\r\n            <TextField\r\n              required\r\n              label={t(\"appraisal_form.Owner\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.owner\")}\r\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\r\n              value={claimsData.owner}\r\n              className=\"flexGrow w33\"\r\n              errorMessage={errMsgOwner}\r\n              name=\"owner\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          <div className=\"goal-details\">\r\n            <ComboBox\r\n              label={t(\"appraisal_form.department\")}\r\n              placeholder={t(\"appraisal_form.field_place_holders.department\")}\r\n              className=\"flexGrow w33\"\r\n              onChange={onChangeDepartment}\r\n              allowFreeform\r\n              autoComplete=\"on\"\r\n              options={departmentOptions}\r\n            // styles={dropdownStyles}\r\n            />\r\n\r\n          </div>\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>{t(\"appraisal_form.KRA_Settings_Tabs\")} </Label>\r\n              <Checkbox\r\n                label={i18n.t(\"goal_setting_form.job_history\")}\r\n                title={\"Competencies\"}\r\n                checked={claimsData.kraSettingCompetencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingCompetencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={i18n.t(\"goal_setting_form.goals\")}\r\n                title={\"Goals\"}\r\n                checked={claimsData.kraSettingGoal}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingGoal\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label=\"Training/Development Plans\"\r\n                title={\"Development Plans\"}\r\n                checked={claimsData.kraSettingDevelopmentPlan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingDevelopmentPlan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">\r\n                    {t(\"pop_up.success.heading\")}\r\n                  </div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setSuccessModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  {t(\"pop_up.success.success_message\")}\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text={t(\"appraisal_form.buttons.ok\")}\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/appraisal\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-failed\">\r\n                  {t(\"pop_up.success.error_message\")}\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text={t(\"appraisal_form.buttons.back\")}\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={applicationError}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n              // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setApplicationError(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-failed\">\r\n                  {/* {t(\"pop_up.success.error_message\")} */}\r\n                  {errorMessage}\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text={t(\"appraisal_form.buttons.back\")}\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setApplicationError(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              {/* <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={error500}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setError500(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-failed\">\r\n                  Server error. Please try later or contact system support.\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text={t(\"appraisal_form.buttons.back\")}\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setError500(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal> */}\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\", marginBottom: \"1rem\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text={t(\"appraisal_form.buttons.save\")}\r\n                allowDisabledFocus\r\n                style={{ backgroundColor: color.str }}\r\n                onClick={handleAddApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text={t(\"appraisal_form.buttons.cancel\")}\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/appraisal\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  const dispatch = useDispatch();\r\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\r\n  const handlemenuClick = () => {\r\n    if (selectMenu === false) {\r\n      dispatch(setCollapedMenu(true));\r\n    } else {\r\n      dispatch(setCollapedMenu(false));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderForm()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AddAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\i18n.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx",["325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import {\r\n  DetailsList,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IColumn,\r\n  IconButton,\r\n  IDetailsListStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  Link,\r\n  Modal,\r\n  Pivot,\r\n  PivotItem,\r\n  PivotLinkFormat,\r\n  PrimaryButton,\r\n  Spinner,\r\n  SpinnerSize,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  fetchJobHistory,\r\n  jobHistoryData,\r\n  update_JobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport {\r\n  fetchGoalData,\r\n  fetchGoalDataName,\r\n  update_goals,\r\n} from \"../../redux/actions/goal\";\r\nimport {\r\n  fetchDevelopmentPlan,\r\n  handleDevelopmentDataChange,\r\n} from \"../../redux/actions/developmentPlan\";\r\nimport \"./style.css\";\r\nimport moment from \"moment\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  appraisalId: string;\r\n}\r\n\r\nfunction EmployeeDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [doctype] = useState(\"EmployeeAppraisal\");\r\n  const [limit_start] = useState(0);\r\n  const [limit] = useState(10);\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByApprisal] = useState(params.appraisalId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n\r\n  const [employeeData, setEmployeeData]: any = useState({});\r\n  const history = useHistory();\r\n\r\n  const [currentPage, setCurentPage] = useState(0);\r\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [limitPageLengthGoal] = useState(5);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\r\n\r\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\r\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n  const [orderByJobHistory] = useState(\"from_date asc\");\r\n  const [limitPageLengthDevelopment] = useState(5);\r\n  const [developmentData, setDevelopmentData]: any = useState([]);\r\n\r\n  const [goalData, setGoalData]: any = useState({});\r\n  const [goalCount, setGoalCount] = useState(0);\r\n  const [employeeCount, setEmployeeCount] = useState(0);\r\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\r\n  const [developmentCount, setDevelopmentCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const dispatch = useDispatch();\r\n  const jobHistoryDataLocal = useSelector(\r\n    (state: RootState) => state.jobHistory\r\n  );\r\n  const { jobHistory, isLoading, total_count }: any = jobHistoryDataLocal;\r\n  // console.log(\"jobHistoryDataLocal=>\", jobHistory);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    if (filtersByApprisal) {\r\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\r\n    }\r\n    fetchEmployeeDataByID(\r\n      doctype,\r\n      limit_start,\r\n      limit,\r\n      roleType,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      setLoading(true);\r\n      // console.log(\"employee response ==>\", response);\r\n      setEmployeeCount(response.count);\r\n      setEmployeeData(response.data[0]);\r\n      setLoading(false);\r\n    });\r\n  }, [doctype, limit_start, limit, roleType]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    dispatch(\r\n      jobHistoryData(\r\n        roleType,\r\n        JSON.stringify(filters),\r\n        limitStart,\r\n        limitPageLength,\r\n        orderByJobHistory\r\n      )\r\n    );\r\n  }, [roleType, limitStart, limitPageLength, orderByJobHistory]);\r\n  const newJobHistoryData = jobHistory.map((element: any) => {\r\n    const a = {\r\n      ...element,\r\n      from_date: moment(element.from_date).format(\"DD-MM-YYYY\"),\r\n      to_date: moment(element.to_date).format(\"DD-MM-YYYY\"),\r\n    };\r\n    return a;\r\n  });\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchGoalData(\r\n      limitStartGoal,\r\n      limitPageLengthGoal,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Goal===>\", response);\r\n      setGoalData(response.data);\r\n      setGoalCount(response.count);\r\n      setGoalTotalCount(response.total_count);\r\n    });\r\n  }, [limitStartGoal, limitPageLengthGoal]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchDevelopmentPlan(\r\n      limitStartDevelopment,\r\n      limitPageLengthDevelopment,\r\n      orderByDevelopment,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Development===>\", response.data);\r\n      setDevelopmentCount(response.count);\r\n      let res = response.data;\r\n      for (let i = response.count; i < 5; i++) {\r\n        let emptyPlan = {\r\n          name: \"\",\r\n          appraisal_id: params.appraisalId,\r\n          employee_id: params.employeeId,\r\n          serial_no: i + 1,\r\n          development_plan: \"\",\r\n          reviewer_remarks: \"\",\r\n          frozen: 0,\r\n        };\r\n        res.push(emptyPlan);\r\n      }\r\n      setDevelopmentData(res);\r\n    });\r\n  }, [limitStartGoal, limitPageLengthGoal]);\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/appraisal\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const updateJobhistory = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\r\n    );\r\n  };\r\n\r\n  const jobHistoryDetails = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\r\n    );\r\n  };\r\n\r\n  const handleDevelopemntChange = (\r\n    index: number | undefined,\r\n    value: string | undefined\r\n  ) => {\r\n    setDevelopmentData(\r\n      developmentData.map((item: any, i: any) =>\r\n        index === i\r\n          ? {\r\n            ...item,\r\n            development_plan: value || \"\",\r\n          }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleRemarkChange = (\r\n    index: number | undefined,\r\n    value: string | undefined\r\n  ) => {\r\n    setDevelopmentData(\r\n      developmentData.map((item: any, i: any) =>\r\n        index === i\r\n          ? {\r\n            ...item,\r\n            reviewer_remarks: value || \"\",\r\n          }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const columnsJobHistory: IColumn[] = [\r\n    {\r\n      key: \"06\",\r\n      name: \"Position Held\",\r\n      fieldName: \"position_held\",\r\n      minWidth: 50,\r\n      maxWidth: 140,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Place of Posting\",\r\n      fieldName: \"place_of_posting\",\r\n      minWidth: 50,\r\n      maxWidth: 110,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"09\",\r\n      name: \"From Date\",\r\n      fieldName: \"from_date\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"To Date\",\r\n      fieldName: \"to_date\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: \"Key Responsibilities\",\r\n      fieldName: \"key_responsibilities\",\r\n      minWidth: 60,\r\n      maxWidth: 350,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"01\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 100,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              jobHistoryDetails(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateJobhistory(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons \"\r\n            onClick={() => {\r\n              deleteJobHistoryData(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [jobHistoryUpdate, setJobHistoryUpdateData]: any = useState({});\r\n  const [showDeleteSuccessJob, setShowDeleteSuccessJob] = useState(false);\r\n  const [showDeleteJob, setShowDeleteJob] = useState(false);\r\n  const [deleteItemJobName, setDeleteItemJobName] = useState(null);\r\n\r\n  const deleteJobHistoryData = (item: any) => {\r\n    setDeleteItemId(item.name);\r\n    // console.log(\"item id\", item.name);\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"name\", \"=\", item.name]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      //   console.log(\"update response =>.>>>\", response.data);\r\n      setJobHistoryUpdateData(response.data[0]);\r\n    });\r\n    setShowDeleteJob(true);\r\n  };\r\n\r\n  // console.log(\"deleteItemId=>\", updateData)\r\n\r\n  const handleDeleteJobhistory = () => {\r\n    const deleteQuery = {\r\n      name: jobHistoryUpdate.name,\r\n      is_deleted: 1,\r\n    };\r\n    update_JobHistory(deleteQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      setShowDeleteJob(false);\r\n      setShowDeleteSuccessJob(true);\r\n      setDeleteItemJobName(null);\r\n      setJobHistoryUpdateData(null);\r\n    });\r\n  };\r\n\r\n  const columnsTraning: IColumn[] = [\r\n    // {\r\n    //   key: \"1\",\r\n    //   name: \"S.No.\",\r\n    //   fieldName: \"serial_no\",\r\n    //   minWidth: 20,\r\n    //   maxWidth: 40,\r\n    //   isSortedDescending: false,\r\n    //   isRowHeader: true,\r\n    //   isResizable: false,\r\n    //   // onRender: (item, index) => (index || 0) + 1,\r\n    // },\r\n    {\r\n      key: \"02\",\r\n      name: \"Development Plan/Training Needs\",\r\n      fieldName: \"development_plan\",\r\n      minWidth: 60,\r\n      maxWidth: 550,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n      onRender: (item, index) => (\r\n        <div>\r\n          <TextField\r\n            multiline\r\n            rows={3}\r\n            maxLength={140}\r\n            value={item.development_plan}\r\n            onChange={(\r\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n              text?: string\r\n            ) => handleDevelopemntChange(index, text)}\r\n            resizable={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"03\",\r\n      name: \"Remark by Appraiser\",\r\n      fieldName: \"reviewer_remarks\",\r\n      minWidth: 80,\r\n      maxWidth: 350,\r\n      isRowHeader: true,\r\n      onRender: (item, index) => (\r\n        <div>\r\n          <TextField\r\n            multiline\r\n            readOnly={roleType === \"Employee\" ? true : false}\r\n            rows={3}\r\n            maxLength={140}\r\n            onChange={(\r\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n              text?: string\r\n            ) => handleRemarkChange(index, text)}\r\n            value={item.reviewer_remarks}\r\n            resizable={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const columnsGoal: IColumn[] = [\r\n    {\r\n      key: \"02\",\r\n      name: \"S.No.\",\r\n      fieldName: \"order_no\",\r\n      minWidth: 20,\r\n      maxWidth: 50,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"11\",\r\n      name: \"Goal ID\",\r\n      fieldName: \"name\",\r\n      minWidth: 40,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"03\",\r\n      name: \"KRA\",\r\n      fieldName: \"kra\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: \"\",\r\n      fieldName: \"goal_type\",\r\n      minWidth: 10,\r\n      maxWidth: 30,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n      onRender: (item) => (\r\n        <div>\r\n          {item.goal_type == \"Goal\" ? (\r\n            <div\r\n              className=\"link-icons\"\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                // console.log(\"item\", item);\r\n              }}\r\n            >\r\n              <ArrowDropDownIcon\r\n                style={{ color: \"#00597d\", fontSize: \"30px\" }}\r\n              />\r\n            </div>\r\n          ) : (\r\n              <div\r\n                className=\"link-icons\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => {\r\n                  // console.log(\"item\", item);\r\n                }}\r\n              >\r\n                <RadioButtonUncheckedIcon\r\n                  style={{\r\n                    color: \"#00597d\",\r\n                    fontSize: \"10px\",\r\n                    marginLeft: \"25px\",\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Goal\",\r\n      fieldName: \"goal\",\r\n      minWidth: 50,\r\n      maxWidth: 280,\r\n      isMultiline: true,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"06\",\r\n      name: \"Measure\",\r\n      fieldName: \"measure\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: \"Weightage\",\r\n      fieldName: \"weightage\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"Target\",\r\n      fieldName: \"target\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"09\",\r\n      name: \"Threshold\",\r\n      fieldName: \"threshold\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"10\",\r\n      name: \"Stretch\",\r\n      fieldName: \"stretch\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"01\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 80,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              goalDetails(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateGoals(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#00597d\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              deleteGoalData(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [deleteItemId, setDeleteItemId] = useState(null);\r\n  const [updateData, setUpdateData]: any = useState({});\r\n  const [showDelete, setShowDelete] = useState(false);\r\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const deleteGoalData = (item: any) => {\r\n    setDeleteItemId(item.name);\r\n    // console.log(\"item id\", item.name);\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"name\", \"=\", item.name]);\r\n    }\r\n    fetchGoalDataName(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response: any) => {\r\n      setUpdateData(response.data[0]);\r\n    });\r\n    setShowDelete(true);\r\n  };\r\n\r\n\r\n  const handleDeleteGoal = () => {\r\n    const deleteQuery = {\r\n      name: updateData.name,\r\n      is_deleted: 1,\r\n    };\r\n    update_goals(deleteQuery).then((response) => {\r\n      setShowDelete(false);\r\n      setShowDeleteSuccess(true);\r\n      setDeleteItemId(null);\r\n      setUpdateData(null);\r\n    });\r\n  };\r\n\r\n\r\n  const [showDevelopment, setShowDevelopment] = useState(false);\r\n\r\n  const handleDevelpmentDatachange = () => {\r\n    const devPlan = [...developmentData];\r\n    const changedQuery = {\r\n      doctype: \"EmployeeDevelopmentPlan\",\r\n      data: {\r\n        dev_plans: devPlan,\r\n      },\r\n    };\r\n    handleDevelopmentDataChange(changedQuery).then((response: any) => {\r\n      setShowDevelopment(true);\r\n    });\r\n  };\r\n\r\n  const updateGoals = (item: any) => {\r\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\r\n  };\r\n\r\n  const goalDetails = (item: any) => {\r\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\r\n  };\r\n\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      marginTop: \"10px\",\r\n      backgroundColor: \"#344f84\",\r\n      paddingBottom: \"0px\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const renderNoData = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"center\",\r\n          marginTop: \"20px\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            color: \"#aaa\",\r\n            textAlign: \"center\",\r\n            padding: 50,\r\n            fontSize: 30,\r\n          }}\r\n        >\r\n          No Data Found\r\n        </Text>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistory = () => {\r\n    return (\r\n      <div>\r\n        {isLoading ? (\r\n          <Spinner\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              padding: \"50px\",\r\n              color: \"#00597d\",\r\n            }}\r\n            size={SpinnerSize.large}\r\n          />\r\n        ) : jobHistory.length === 0 ? (\r\n          renderNoData()\r\n        ) : (\r\n              <div>\r\n                <DetailsList\r\n                  styles={listStyle}\r\n                  items={newJobHistoryData}\r\n                  className=\"detail-list\"\r\n                  columns={columnsJobHistory}\r\n                  selectionMode={0}\r\n                />\r\n                <div className=\"pagination-style\">\r\n                  <Pagination\r\n                    format=\"buttons\"\r\n                    // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                    // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                    selectedPageIndex={currentPage}\r\n                    pageCount={Math.ceil(totalCount / limitPageLength)}\r\n                    itemsPerPage={limitPageLength}\r\n                    totalItemCount={totalCount}\r\n                    onPageChange={(page) => {\r\n                      setLimitSTart(page * limitPageLength);\r\n                      setCurentPage(page);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\r\n                  `/appraisal/goalsetting/view/addjobhistory/${params.employeeId}/${params.appraisalId}`\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/appraisal/goalsetting\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteJob}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Delete</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteJob(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Are you sure you want to delete this item?\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Delete\"\r\n                allowDisabledFocus\r\n                onClick={handleDeleteJobhistory}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccessJob}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccessJob(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Item successfully Deleted.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Ok\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDeleteSuccessJob(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderGoals = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        {goalCount === 0 ? (\r\n          renderNoData()\r\n        ) : (\r\n            <div>\r\n              <DetailsList\r\n                styles={listStyle}\r\n                items={goalData}\r\n                className=\"detail-list\"\r\n                columns={columnsGoal}\r\n                selectionMode={0}\r\n              />\r\n              <div className=\"pagination-style\">\r\n                <Pagination\r\n                  format=\"buttons\"\r\n                  selectedPageIndex={currentPageGoal}\r\n                  pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\r\n                  itemsPerPage={limitPageLengthGoal}\r\n                  totalItemCount={goalTotalCount}\r\n                  onPageChange={(pageGoal) => {\r\n                    setLimitSTartGoal(pageGoal * limitPageLengthGoal);\r\n                    setCurentPageGoal(pageGoal);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\r\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/appraisal/goalsetting\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDelete}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Delete</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Are you sure you want to delete this item?\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Delete\"\r\n                allowDisabledFocus\r\n                onClick={handleDeleteGoal}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccess}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Item successfully Deleted.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Ok\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTrainingDevelopment = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div>\r\n          <DetailsList\r\n            styles={listStyle}\r\n            items={developmentData}\r\n            className=\"detail-list\"\r\n            columns={columnsTraning}\r\n            selectionMode={0}\r\n          />\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Save\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  handleDevelpmentDatachange();\r\n                }}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.push(\"/appraisal/goalsetting\");\r\n                }}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDevelopment}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n          // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header-local\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDevelopment(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Development data saved successfully.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Ok\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDevelopment(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  const renderEmployeeDetails = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <div className=\"emp-details-section medium-text\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <span>Employee Id</span> : {employeeData.employee_id}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Employee Name</span> : {employeeData.employee_name}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Designation</span> : {employeeData.designation}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Location</span> : {employeeData.location}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Department</span> : {employeeData.department}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Date of Joining</span> :{\" \"}\r\n                {moment(employeeData.date_of_joining).format(\"DD-MM-YYYY\")}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Reporting Officer</span> : {employeeData.manager_name}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Reviewer</span> : {employeeData.reviewer_name}\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Counter signing</span> :{\" \"}\r\n                {employeeData.counter_signing_name}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <div\r\n          style={{ marginTop: \"10px\" }}\r\n          className=\"card employee-details-tabs\"\r\n        >\r\n          <Pivot linkFormat={PivotLinkFormat.tabs}>\r\n            <PivotItem\r\n              headerButtonProps={{\r\n                \"data-order\": 1,\r\n                \"data-title\": \"My Files Title\",\r\n              }}\r\n              headerText=\"Job History\"\r\n            >\r\n              {renderJobHistory()}\r\n            </PivotItem>\r\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\r\n            <PivotItem headerText=\"Training/ Development Plan\">\r\n              {renderTrainingDevelopment()}\r\n            </PivotItem>\r\n          </Pivot>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">\r\n          {loading ? (\r\n            <Spinner\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                padding: \"80px\",\r\n                color: \"#00597d\",\r\n              }}\r\n              size={SpinnerSize.large}\r\n            />\r\n          ) : employeeCount === 0 ? (\r\n            renderNoData()\r\n          ) : (\r\n                renderEmployeeDetails()\r\n              )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(EmployeeDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\index.tsx",["341","342","343"],"import React, { useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/reducers\";\r\nimport { setMenuType, setRoleType } from \"../redux/actions/roleType\";\r\nimport { ProSidebar, Menu, MenuItem, SubMenu, SidebarHeader } from \"react-pro-sidebar\";\r\nimport \"react-pro-sidebar/dist/css/styles.css\";\r\n//icons\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport CachedIcon from \"@material-ui/icons/Cached\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\r\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\r\n\r\nimport { DefaultTheme } from \"../../src/Utils/color\";\r\nimport { useTranslation } from \"react-i18next/\";\r\nimport { sideNavigationData } from \"../redux/actions/navigation\";\r\nimport { Spinner, SpinnerSize } from \"office-ui-fabric-react\";\r\n\r\nfunction SideNavigation() {\r\n  const { t, i18n } = useTranslation();\r\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\r\n  const sideMenuData = useSelector((state: RootState) => state.navigationData);\r\n  const menuData = sideMenuData.navigationData;\r\n  const isLoading = sideMenuData.isLoading;\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect((): void => {\r\n    dispatch(sideNavigationData(menuType));\r\n  }, [menuType]);\r\n\r\n  const handleRoleMenu = (e: any, item: any) => {\r\n    dispatch(setRoleType(item));\r\n  };\r\n\r\n  const checkMenuPermission = (role: any, menuType: any): boolean => {\r\n    for (let i = 0; i < menuData[\"ms-menu\"].length; i++) {\r\n      if (menuData[\"ms-menu\"][i].role === role) {\r\n        let menu = menuData[\"ms-menu\"];\r\n        for (let j = 0; j < menu[i][\"menu-items\"].length; j++) {\r\n          if (menu[i][\"menu-items\"][j] === menuType) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const menu: any = [];\r\n\r\n  if (!isLoading) {\r\n    for (let i = 0; i < menuData[\"ms-menu\"].length; i++) {\r\n      menu.push(\r\n        <button\r\n          onClick={(event) => {\r\n            handleRoleMenu(event, menuData[\"ms-menu\"][i].role);\r\n          }}\r\n        >\r\n          {menuData[\"ms-menu\"][i].role}\r\n        </button>\r\n      );\r\n      menu.push(\r\n        <Menu\r\n          style={\r\n            roleType !== menuData[\"ms-menu\"][i].role ? { display: \"none\" } : {}\r\n          }\r\n          popperArrow={true}\r\n          iconShape=\"circle\"\r\n        >\r\n          <SubMenu\r\n            title={i18n.t(\"nav.performance.appraisal-menu\")}\r\n            icon={<BarChartIcon />}\r\n          >\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.appraisal.setup\"\r\n            ) === true ? (\r\n                <MenuItem icon={<SettingsIcon />}>\r\n                  {i18n.t(\"nav.performance.appraisal.Setup\")}\r\n                  <Link to=\"/appraisal\" />\r\n                </MenuItem>\r\n              ) : null}\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.appraisal.goal-setting\"\r\n            ) === true ? (\r\n                <MenuItem icon={<ListIcon />}>\r\n                  {i18n.t(\"nav.performance.appraisal.goal-setting\")}\r\n                  <Link to=\"/appraisal/goalsetting\" />\r\n                </MenuItem>\r\n              ) : null}\r\n\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.appraisal.self-assessment\"\r\n            ) === true ? (\r\n                <MenuItem icon={<AssessmentIcon />}>\r\n                  {i18n.t(\"nav.performance.appraisal.self-assessment\")}\r\n                </MenuItem>\r\n              ) : null}\r\n\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.appraisal.team-goal-setting\"\r\n            ) === true ? (\r\n                <MenuItem icon={<ListIcon />}>\r\n                  {i18n.t(\"nav.performance.appraisal.team-goal-setting\")}\r\n                  <Link to=\"/appraisal/goalsetting\" />\r\n                </MenuItem>\r\n              ) : null}\r\n\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.appraisal.team-assessment\"\r\n            ) === true ? (\r\n                <MenuItem icon={<AssessmentIcon />}>\r\n                  {i18n.t(\"nav.performance.appraisal.team-assessment\")}\r\n                </MenuItem>\r\n              ) : null}\r\n          </SubMenu>\r\n          <SubMenu\r\n            title={i18n.t(\"nav.performance.confirmation-menu\")}\r\n            icon={<AssignmentTurnedInIcon />}\r\n          >\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.confirmation.letter\"\r\n            ) === true ? (\r\n                <MenuItem icon={<CachedIcon />}>\r\n                  {i18n.t(\"nav.performance.confirmation.confirmation-letter\")}\r\n                </MenuItem>\r\n              ) : null}\r\n\r\n            {checkMenuPermission(\r\n              menuData[\"ms-menu\"][i].role,\r\n              \"nav.performance.confirmation-status\"\r\n            ) === true ? (\r\n                <MenuItem icon={<CachedIcon />}>\r\n                  {i18n.t(\"nav.performance.confirmation.confirmation-status\")}\r\n                </MenuItem>\r\n              ) : null}\r\n          </SubMenu>\r\n        </Menu>\r\n      );\r\n    }\r\n  }\r\n\r\n  const menuItem = () => {\r\n    return (\r\n      <ProSidebar\r\n        collapsed={selectMenu}\r\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\r\n      >\r\n        <SidebarHeader\r\n          className=\"sidebar-ell\"\r\n        >\r\n          <HomeIcon\r\n            onClick={() => {\r\n              dispatch(setMenuType(\"1\"));\r\n              history.push('/home');\r\n            }}\r\n\r\n          /> <span>Performance</span>\r\n        </SidebarHeader>\r\n        {menu}\r\n      </ProSidebar>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const handleOtherMenu = (event: any, item: any) => {\r\n    dispatch(setMenuType(\"0\"));\r\n    history.push('/appraisal')\r\n  };\r\n\r\n  const localMenuItem = () => {\r\n    return !isLoading ? (\r\n      <ProSidebar\r\n        collapsed={selectMenu}\r\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\r\n      >\r\n        <SidebarHeader\r\n        // onClick={() => {\r\n        //   dispatch(setMenuType(\"0\"));\r\n        // }}\r\n        >\r\n          <HomeIcon />\r\n          HRMS\r\n        </SidebarHeader>\r\n        <Menu popperArrow={true} iconShape=\"circle\" style={{}}>\r\n          <MenuItem icon={<PersonIcon />} style={{ marginBottom: \"20px\" }}>\r\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][0])}\r\n          </MenuItem>\r\n          <MenuItem icon={<BarChartIcon />} style={{ marginBottom: \"20px\" }}>\r\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][1])}\r\n          </MenuItem>\r\n          <MenuItem\r\n            icon={<AssignmentTurnedInIcon />}\r\n            style={{ marginBottom: \"20px\" }}\r\n            onClick={(event) => {\r\n              handleOtherMenu(event, \"Performance\");\r\n            }}\r\n          >\r\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][2])}\r\n          </MenuItem>\r\n          <MenuItem\r\n            icon={<ImportExportIcon />}\r\n            style={{ marginBottom: \"20px\" }}\r\n          >\r\n            {i18n.t(menuData[\"ms-menu\"][0][\"menu-items\"][3])}\r\n          </MenuItem>\r\n        </Menu>\r\n      </ProSidebar>\r\n    ) : (\r\n        <Spinner\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            padding: \"50px\",\r\n            color: \"#00597d\",\r\n          }}\r\n          size={SpinnerSize.large}\r\n        />\r\n      );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {menuType == 0 ? menuItem() : localMenuItem()}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SideNavigation;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\developmentPlan.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx",["344"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\menuType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\auth.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\application.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Utils\\color.tsx",["345","346"],"import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/reducers\";\r\n\r\n// const colorsList = useSelector((state: RootState) => state.application);\r\n\r\n// console.log(\"colorsList\", colorsList);\r\n\r\nexport const DefaultTheme = {\r\n  colors: {\r\n    primary: \"#00597d\",\r\n    primaryDark: \"006994 \",\r\n    white: \"#FFF\",\r\n  },\r\n};\r\n",{"ruleId":"347","severity":1,"message":"348","line":8,"column":8,"nodeType":"349","messageId":"350","endLine":8,"endColumn":12},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","replacedBy":"354"},{"ruleId":"347","severity":1,"message":"355","line":23,"column":48,"nodeType":"349","messageId":"350","endLine":23,"endColumn":66},{"ruleId":"347","severity":1,"message":"356","line":35,"column":10,"nodeType":"349","messageId":"350","endLine":35,"endColumn":17},{"ruleId":"347","severity":1,"message":"357","line":35,"column":19,"nodeType":"349","messageId":"350","endLine":35,"endColumn":29},{"ruleId":"347","severity":1,"message":"358","line":36,"column":9,"nodeType":"349","messageId":"350","endLine":36,"endColumn":17},{"ruleId":"359","severity":1,"message":"360","line":82,"column":6,"nodeType":"361","endLine":82,"endColumn":8,"suggestions":"362"},{"ruleId":"363","severity":1,"message":"364","line":102,"column":54,"nodeType":"365","messageId":"366","endLine":102,"endColumn":56},{"ruleId":"363","severity":1,"message":"364","line":107,"column":44,"nodeType":"365","messageId":"366","endLine":107,"endColumn":46},{"ruleId":"363","severity":1,"message":"364","line":187,"column":28,"nodeType":"365","messageId":"366","endLine":187,"endColumn":30},{"ruleId":"347","severity":1,"message":"367","line":145,"column":10,"nodeType":"349","messageId":"350","endLine":145,"endColumn":24},{"ruleId":"347","severity":1,"message":"368","line":146,"column":9,"nodeType":"349","messageId":"350","endLine":146,"endColumn":20},{"ruleId":"369","severity":1,"message":"370","line":150,"column":39,"nodeType":"371","messageId":"372","endLine":150,"endColumn":41},{"ruleId":"369","severity":1,"message":"370","line":152,"column":34,"nodeType":"371","messageId":"372","endLine":152,"endColumn":36},{"ruleId":"369","severity":1,"message":"373","line":160,"column":13,"nodeType":"374","messageId":"375","endLine":160,"endColumn":20},{"ruleId":"369","severity":1,"message":"373","line":171,"column":11,"nodeType":"374","messageId":"375","endLine":171,"endColumn":18},{"ruleId":"347","severity":1,"message":"376","line":11,"column":10,"nodeType":"349","messageId":"350","endLine":11,"endColumn":16},{"ruleId":"347","severity":1,"message":"377","line":31,"column":10,"nodeType":"349","messageId":"350","endLine":31,"endColumn":22},{"ruleId":"347","severity":1,"message":"378","line":31,"column":24,"nodeType":"349","messageId":"350","endLine":31,"endColumn":39},{"ruleId":"347","severity":1,"message":"379","line":69,"column":9,"nodeType":"349","messageId":"350","endLine":69,"endColumn":16},{"ruleId":"359","severity":1,"message":"380","line":86,"column":6,"nodeType":"361","endLine":86,"endColumn":8,"suggestions":"381"},{"ruleId":"347","severity":1,"message":"382","line":88,"column":9,"nodeType":"349","messageId":"350","endLine":88,"endColumn":17},{"ruleId":"347","severity":1,"message":"383","line":93,"column":9,"nodeType":"349","messageId":"350","endLine":93,"endColumn":22},{"ruleId":"384","severity":1,"message":"385","line":104,"column":9,"nodeType":"386","endLine":104,"endColumn":33},{"ruleId":"384","severity":1,"message":"385","line":147,"column":7,"nodeType":"386","endLine":147,"endColumn":55},{"ruleId":"347","severity":1,"message":"387","line":3,"column":8,"nodeType":"349","messageId":"350","endLine":3,"endColumn":14},{"ruleId":"347","severity":1,"message":"388","line":6,"column":9,"nodeType":"349","messageId":"350","endLine":6,"endColumn":44},{"ruleId":"347","severity":1,"message":"389","line":10,"column":9,"nodeType":"349","messageId":"350","endLine":10,"endColumn":51},{"ruleId":"384","severity":1,"message":"385","line":28,"column":13,"nodeType":"386","endLine":28,"endColumn":60},{"ruleId":"347","severity":1,"message":"390","line":2,"column":32,"nodeType":"349","messageId":"350","endLine":2,"endColumn":43},{"ruleId":"347","severity":1,"message":"391","line":24,"column":10,"nodeType":"349","messageId":"350","endLine":24,"endColumn":21},{"ruleId":"347","severity":1,"message":"392","line":34,"column":10,"nodeType":"349","messageId":"350","endLine":34,"endColumn":16},{"ruleId":"347","severity":1,"message":"393","line":35,"column":10,"nodeType":"349","messageId":"350","endLine":35,"endColumn":18},{"ruleId":"359","severity":1,"message":"394","line":47,"column":6,"nodeType":"361","endLine":47,"endColumn":8,"suggestions":"395"},{"ruleId":"347","severity":1,"message":"396","line":51,"column":9,"nodeType":"349","messageId":"350","endLine":51,"endColumn":22},{"ruleId":"347","severity":1,"message":"397","line":62,"column":9,"nodeType":"349","messageId":"350","endLine":62,"endColumn":23},{"ruleId":"347","severity":1,"message":"398","line":65,"column":9,"nodeType":"349","messageId":"350","endLine":65,"endColumn":25},{"ruleId":"347","severity":1,"message":"399","line":8,"column":3,"nodeType":"349","messageId":"350","endLine":8,"endColumn":18},{"ruleId":"347","severity":1,"message":"391","line":22,"column":10,"nodeType":"349","messageId":"350","endLine":22,"endColumn":21},{"ruleId":"347","severity":1,"message":"400","line":27,"column":19,"nodeType":"349","messageId":"350","endLine":27,"endColumn":29},{"ruleId":"359","severity":1,"message":"401","line":44,"column":6,"nodeType":"361","endLine":44,"endColumn":8,"suggestions":"402"},{"ruleId":"347","severity":1,"message":"396","line":47,"column":9,"nodeType":"349","messageId":"350","endLine":47,"endColumn":22},{"ruleId":"359","severity":1,"message":"403","line":56,"column":6,"nodeType":"361","endLine":56,"endColumn":8,"suggestions":"404"},{"ruleId":"347","severity":1,"message":"405","line":191,"column":9,"nodeType":"349","messageId":"350","endLine":191,"endColumn":24},{"ruleId":"347","severity":1,"message":"406","line":5,"column":3,"nodeType":"349","messageId":"350","endLine":5,"endColumn":11},{"ruleId":"347","severity":1,"message":"407","line":26,"column":10,"nodeType":"349","messageId":"350","endLine":26,"endColumn":26},{"ruleId":"347","severity":1,"message":"408","line":27,"column":10,"nodeType":"349","messageId":"350","endLine":27,"endColumn":25},{"ruleId":"347","severity":1,"message":"409","line":31,"column":11,"nodeType":"349","messageId":"350","endLine":31,"endColumn":12},{"ruleId":"347","severity":1,"message":"410","line":32,"column":19,"nodeType":"349","messageId":"350","endLine":32,"endColumn":29},{"ruleId":"347","severity":1,"message":"411","line":33,"column":23,"nodeType":"349","messageId":"350","endLine":33,"endColumn":36},{"ruleId":"347","severity":1,"message":"412","line":34,"column":17,"nodeType":"349","messageId":"350","endLine":34,"endColumn":25},{"ruleId":"347","severity":1,"message":"413","line":35,"column":10,"nodeType":"349","messageId":"350","endLine":35,"endColumn":14},{"ruleId":"347","severity":1,"message":"414","line":35,"column":16,"nodeType":"349","messageId":"350","endLine":35,"endColumn":23},{"ruleId":"347","severity":1,"message":"415","line":37,"column":27,"nodeType":"349","messageId":"350","endLine":37,"endColumn":45},{"ruleId":"347","severity":1,"message":"416","line":38,"column":10,"nodeType":"349","messageId":"350","endLine":38,"endColumn":20},{"ruleId":"347","severity":1,"message":"417","line":41,"column":10,"nodeType":"349","messageId":"350","endLine":41,"endColumn":18},{"ruleId":"347","severity":1,"message":"418","line":45,"column":49,"nodeType":"349","messageId":"350","endLine":45,"endColumn":54},{"ruleId":"347","severity":1,"message":"419","line":46,"column":9,"nodeType":"349","messageId":"350","endLine":46,"endColumn":20},{"ruleId":"347","severity":1,"message":"420","line":47,"column":24,"nodeType":"349","messageId":"350","endLine":47,"endColumn":39},{"ruleId":"347","severity":1,"message":"421","line":57,"column":9,"nodeType":"349","messageId":"350","endLine":57,"endColumn":48},{"ruleId":"347","severity":1,"message":"422","line":66,"column":9,"nodeType":"349","messageId":"350","endLine":66,"endColumn":27},{"ruleId":"359","severity":1,"message":"380","line":93,"column":6,"nodeType":"361","endLine":93,"endColumn":75,"suggestions":"423"},{"ruleId":"347","severity":1,"message":"424","line":29,"column":8,"nodeType":"349","messageId":"350","endLine":29,"endColumn":24},{"ruleId":"347","severity":1,"message":"425","line":39,"column":10,"nodeType":"349","messageId":"350","endLine":39,"endColumn":25},{"ruleId":"347","severity":1,"message":"426","line":39,"column":27,"nodeType":"349","messageId":"350","endLine":39,"endColumn":45},{"ruleId":"347","severity":1,"message":"427","line":40,"column":10,"nodeType":"349","messageId":"350","endLine":40,"endColumn":24},{"ruleId":"347","severity":1,"message":"428","line":40,"column":26,"nodeType":"349","messageId":"350","endLine":40,"endColumn":43},{"ruleId":"347","severity":1,"message":"392","line":46,"column":10,"nodeType":"349","messageId":"350","endLine":46,"endColumn":16},{"ruleId":"347","severity":1,"message":"393","line":47,"column":10,"nodeType":"349","messageId":"350","endLine":47,"endColumn":18},{"ruleId":"359","severity":1,"message":"429","line":61,"column":6,"nodeType":"361","endLine":61,"endColumn":8,"suggestions":"430"},{"ruleId":"347","severity":1,"message":"397","line":115,"column":9,"nodeType":"349","messageId":"350","endLine":115,"endColumn":23},{"ruleId":"347","severity":1,"message":"398","line":118,"column":9,"nodeType":"349","messageId":"350","endLine":118,"endColumn":25},{"ruleId":"347","severity":1,"message":"356","line":163,"column":10,"nodeType":"349","messageId":"350","endLine":163,"endColumn":17},{"ruleId":"347","severity":1,"message":"357","line":163,"column":19,"nodeType":"349","messageId":"350","endLine":163,"endColumn":29},{"ruleId":"347","severity":1,"message":"425","line":40,"column":10,"nodeType":"349","messageId":"350","endLine":40,"endColumn":25},{"ruleId":"359","severity":1,"message":"429","line":60,"column":6,"nodeType":"361","endLine":60,"endColumn":8,"suggestions":"431"},{"ruleId":"347","severity":1,"message":"415","line":55,"column":27,"nodeType":"349","messageId":"350","endLine":55,"endColumn":45},{"ruleId":"347","severity":1,"message":"418","line":65,"column":37,"nodeType":"349","messageId":"350","endLine":65,"endColumn":42},{"ruleId":"347","severity":1,"message":"432","line":66,"column":10,"nodeType":"349","messageId":"350","endLine":66,"endColumn":20},{"ruleId":"347","severity":1,"message":"433","line":66,"column":22,"nodeType":"349","messageId":"350","endLine":66,"endColumn":35},{"ruleId":"347","severity":1,"message":"434","line":68,"column":9,"nodeType":"349","messageId":"350","endLine":68,"endColumn":15},{"ruleId":"359","severity":1,"message":"435","line":106,"column":6,"nodeType":"361","endLine":116,"endColumn":4,"suggestions":"436"},{"ruleId":"347","severity":1,"message":"437","line":269,"column":10,"nodeType":"349","messageId":"350","endLine":269,"endColumn":20},{"ruleId":"363","severity":1,"message":"364","line":484,"column":23,"nodeType":"365","messageId":"366","endLine":484,"endColumn":25},{"ruleId":"363","severity":1,"message":"364","line":487,"column":23,"nodeType":"365","messageId":"366","endLine":487,"endColumn":25},{"ruleId":"363","severity":1,"message":"364","line":594,"column":29,"nodeType":"365","messageId":"366","endLine":594,"endColumn":31},{"ruleId":"347","severity":1,"message":"438","line":9,"column":3,"nodeType":"349","messageId":"350","endLine":9,"endColumn":11},{"ruleId":"359","severity":1,"message":"403","line":96,"column":6,"nodeType":"361","endLine":96,"endColumn":8,"suggestions":"439"},{"ruleId":"347","severity":1,"message":"440","line":170,"column":26,"nodeType":"349","messageId":"350","endLine":170,"endColumn":43},{"ruleId":"347","severity":1,"message":"441","line":181,"column":10,"nodeType":"349","messageId":"350","endLine":181,"endColumn":21},{"ruleId":"347","severity":1,"message":"442","line":208,"column":9,"nodeType":"349","messageId":"350","endLine":208,"endColumn":28},{"ruleId":"347","severity":1,"message":"356","line":251,"column":10,"nodeType":"349","messageId":"350","endLine":251,"endColumn":17},{"ruleId":"347","severity":1,"message":"357","line":251,"column":19,"nodeType":"349","messageId":"350","endLine":251,"endColumn":29},{"ruleId":"359","severity":1,"message":"401","line":59,"column":6,"nodeType":"361","endLine":59,"endColumn":8,"suggestions":"443"},{"ruleId":"347","severity":1,"message":"444","line":137,"column":26,"nodeType":"349","messageId":"350","endLine":137,"endColumn":43},{"ruleId":"347","severity":1,"message":"445","line":7,"column":3,"nodeType":"349","messageId":"350","endLine":7,"endColumn":13},{"ruleId":"347","severity":1,"message":"424","line":25,"column":8,"nodeType":"349","messageId":"350","endLine":25,"endColumn":24},{"ruleId":"347","severity":1,"message":"446","line":40,"column":9,"nodeType":"349","messageId":"350","endLine":40,"endColumn":17},{"ruleId":"347","severity":1,"message":"400","line":43,"column":19,"nodeType":"349","messageId":"350","endLine":43,"endColumn":29},{"ruleId":"347","severity":1,"message":"392","line":56,"column":10,"nodeType":"349","messageId":"350","endLine":56,"endColumn":16},{"ruleId":"347","severity":1,"message":"393","line":57,"column":10,"nodeType":"349","messageId":"350","endLine":57,"endColumn":18},{"ruleId":"347","severity":1,"message":"447","line":60,"column":10,"nodeType":"349","messageId":"350","endLine":60,"endColumn":18},{"ruleId":"359","severity":1,"message":"448","line":76,"column":6,"nodeType":"361","endLine":76,"endColumn":8,"suggestions":"449"},{"ruleId":"347","severity":1,"message":"397","line":118,"column":9,"nodeType":"349","messageId":"350","endLine":118,"endColumn":23},{"ruleId":"347","severity":1,"message":"398","line":121,"column":9,"nodeType":"349","messageId":"350","endLine":121,"endColumn":25},{"ruleId":"347","severity":1,"message":"450","line":25,"column":3,"nodeType":"349","messageId":"350","endLine":25,"endColumn":14},{"ruleId":"347","severity":1,"message":"438","line":27,"column":3,"nodeType":"349","messageId":"350","endLine":27,"endColumn":11},{"ruleId":"347","severity":1,"message":"451","line":75,"column":9,"nodeType":"349","messageId":"350","endLine":75,"endColumn":20},{"ruleId":"347","severity":1,"message":"452","line":79,"column":10,"nodeType":"349","messageId":"350","endLine":79,"endColumn":21},{"ruleId":"347","severity":1,"message":"453","line":79,"column":23,"nodeType":"349","messageId":"350","endLine":79,"endColumn":37},{"ruleId":"347","severity":1,"message":"454","line":80,"column":10,"nodeType":"349","messageId":"350","endLine":80,"endColumn":19},{"ruleId":"347","severity":1,"message":"455","line":80,"column":21,"nodeType":"349","messageId":"350","endLine":80,"endColumn":33},{"ruleId":"347","severity":1,"message":"456","line":355,"column":10,"nodeType":"349","messageId":"350","endLine":355,"endColumn":18},{"ruleId":"347","severity":1,"message":"457","line":355,"column":20,"nodeType":"349","messageId":"350","endLine":355,"endColumn":31},{"ruleId":"347","severity":1,"message":"458","line":356,"column":10,"nodeType":"349","messageId":"350","endLine":356,"endColumn":18},{"ruleId":"347","severity":1,"message":"459","line":356,"column":20,"nodeType":"349","messageId":"350","endLine":356,"endColumn":31},{"ruleId":"347","severity":1,"message":"356","line":357,"column":10,"nodeType":"349","messageId":"350","endLine":357,"endColumn":17},{"ruleId":"347","severity":1,"message":"460","line":358,"column":10,"nodeType":"349","messageId":"350","endLine":358,"endColumn":17},{"ruleId":"347","severity":1,"message":"461","line":358,"column":19,"nodeType":"349","messageId":"350","endLine":358,"endColumn":29},{"ruleId":"347","severity":1,"message":"405","line":907,"column":9,"nodeType":"349","messageId":"350","endLine":907,"endColumn":24},{"ruleId":"347","severity":1,"message":"462","line":77,"column":33,"nodeType":"349","messageId":"350","endLine":77,"endColumn":57},{"ruleId":"347","severity":1,"message":"463","line":78,"column":30,"nodeType":"349","messageId":"350","endLine":78,"endColumn":51},{"ruleId":"347","severity":1,"message":"418","line":79,"column":10,"nodeType":"349","messageId":"350","endLine":79,"endColumn":15},{"ruleId":"347","severity":1,"message":"464","line":79,"column":17,"nodeType":"349","messageId":"350","endLine":79,"endColumn":25},{"ruleId":"347","severity":1,"message":"465","line":81,"column":22,"nodeType":"349","messageId":"350","endLine":81,"endColumn":35},{"ruleId":"347","severity":1,"message":"400","line":82,"column":19,"nodeType":"349","messageId":"350","endLine":82,"endColumn":29},{"ruleId":"347","severity":1,"message":"466","line":91,"column":10,"nodeType":"349","messageId":"350","endLine":91,"endColumn":26},{"ruleId":"347","severity":1,"message":"467","line":97,"column":34,"nodeType":"349","messageId":"350","endLine":97,"endColumn":45},{"ruleId":"359","severity":1,"message":"468","line":121,"column":6,"nodeType":"361","endLine":121,"endColumn":45,"suggestions":"469"},{"ruleId":"359","severity":1,"message":"470","line":137,"column":6,"nodeType":"361","endLine":137,"endColumn":64,"suggestions":"471"},{"ruleId":"359","severity":1,"message":"472","line":163,"column":6,"nodeType":"361","endLine":163,"endColumn":43,"suggestions":"473"},{"ruleId":"359","severity":1,"message":"474","line":193,"column":6,"nodeType":"361","endLine":193,"endColumn":43,"suggestions":"475"},{"ruleId":"347","severity":1,"message":"476","line":227,"column":9,"nodeType":"349","messageId":"350","endLine":227,"endColumn":50},{"ruleId":"347","severity":1,"message":"477","line":369,"column":10,"nodeType":"349","messageId":"350","endLine":369,"endColumn":27},{"ruleId":"363","severity":1,"message":"364","line":506,"column":27,"nodeType":"365","messageId":"366","endLine":506,"endColumn":29},{"ruleId":"347","severity":1,"message":"478","line":637,"column":10,"nodeType":"349","messageId":"350","endLine":637,"endColumn":22},{"ruleId":"347","severity":1,"message":"409","line":26,"column":11,"nodeType":"349","messageId":"350","endLine":26,"endColumn":12},{"ruleId":"359","severity":1,"message":"380","line":38,"column":6,"nodeType":"361","endLine":38,"endColumn":16,"suggestions":"479"},{"ruleId":"363","severity":1,"message":"364","line":240,"column":17,"nodeType":"365","messageId":"366","endLine":240,"endColumn":19},{"ruleId":"347","severity":1,"message":"376","line":3,"column":30,"nodeType":"349","messageId":"350","endLine":3,"endColumn":36},{"ruleId":"347","severity":1,"message":"480","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":21},{"ruleId":"347","severity":1,"message":"481","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","no-native-reassign",["482"],"no-negated-in-lhs",["483"],"'handleRefreshToken' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'menuType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkAccessToken', 'code', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["484"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'logout' is defined but never used.","'userInfoData' is assigned a value but never used.","'setUserInfoData' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["485"],"'userData' is assigned a value but never used.","'handleNewLang' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Header' is defined but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'useDispatch' is defined but never used.","'filtersById' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["486"],"'onChangeInput' is assigned a value but never used.","'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'IDropdownOption' is defined but never used.","'setOrderBy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["487"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', 'orderByField', and 'roleType'. Either include them or remove the dependency array.",["488"],"'handlemenuClick' is assigned a value but never used.","'ComboBox' is defined but never used.","'filterByEmployee' is defined but never used.","'setCollapedMenu' is defined but never used.","'t' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'order_by' is assigned a value but never used.","'count' is assigned a value but never used.","'comboBoxRef' is assigned a value but never used.","'setFilterOption' is assigned a value but never used.","'comboBoxBasicOptions' is assigned a value but never used.","'handleEmployeeName' is assigned a value but never used.",["489"],"'applicationError' is defined but never used.","'employeeDetails' is assigned a value but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["490"],["491"],"'formatDate' is assigned a value but never used.","'setFormatDate' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["492"],"'updateData' is assigned a value but never used.","'addYears' is defined but never used.",["493"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.",["494"],"'setErrMsgGoalType' is assigned a value but never used.","'DatePicker' is defined but never used.","'roleType' is assigned a value but never used.","'goalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["495"],"'ColorPicker' is defined but never used.","'updateColor' is assigned a value but never used.","'showPreview' is assigned a value but never used.","'setShowPreview' is assigned a value but never used.","'alphaType' is assigned a value but never used.","'setAlphaType' is assigned a value but never used.","'error400' is assigned a value but never used.","'setError400' is assigned a value but never used.","'error500' is assigned a value but never used.","'setError500' is assigned a value but never used.","'isError' is assigned a value but never used.","'setIsError' is assigned a value but never used.","'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'setCount' is assigned a value but never used.","'setTotalCount' is assigned a value but never used.","'developmentCount' is assigned a value but never used.","'total_count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["496"],"React Hook useEffect has missing dependencies: 'dispatch' and 'filtersById'. Either include them or remove the dependency array.",["497"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["498"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', 'orderByDevelopment', 'params.appraisalId', and 'params.employeeId'. Either include them or remove the dependency array.",["499"],"'textfelidStyle' is assigned a value but never used.","'deleteItemJobName' is assigned a value but never used.","'deleteItemId' is assigned a value but never used.",["500"],"'useSelector' is defined but never used.","'RootState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"513","fix":"515"},{"desc":"516","fix":"517"},{"desc":"509","fix":"518"},{"desc":"507","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"530","fix":"531"},"Update the dependencies array to be: [checkAccessToken, code, dispatch]",{"range":"532","text":"533"},"Update the dependencies array to be: [dispatch]",{"range":"534","text":"535"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"536","text":"537"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"538","text":"539"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField, roleType]",{"range":"540","text":"541"},"Update the dependencies array to be: [doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",{"range":"542","text":"543"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"544","text":"545"},{"range":"546","text":"545"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, roleType, dispatch, orderByField]",{"range":"547","text":"548"},{"range":"549","text":"541"},{"range":"550","text":"539"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"551","text":"552"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"553","text":"554"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",{"range":"555","text":"556"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"557","text":"558"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",{"range":"559","text":"560"},"Update the dependencies array to be: [dispatch, menuType]",{"range":"561","text":"562"},[2900,2902],"[checkAccessToken, code, dispatch]",[2525,2527],"[dispatch]",[1471,1473],"[filtersByName, roleType]",[1212,1214],"[filtersByName, limitPageLength, limit_start, orderBy]",[1632,1634],"[filtersById, limitPageLength, limitStart, orderBy, orderByField, roleType]",[2945,3014],"[doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",[1984,1986],"[filtersById, roleType]",[1868,1870],[3472,3663],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, roleType, dispatch, orderByField]",[2812,2814],[1690,1692],[2262,2264],"[filtersById, limitPageLength, limit_start, orderBy]",[4034,4073],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4405,4463],"[roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",[5203,5240],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[6108,6145],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",[1838,1848],"[dispatch, menuType]"]