[{"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx":"1","C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts":"2","C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx":"3","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx":"4","C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx":"5","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\auth.tsx":"6","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Login\\index.tsx":"7","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx":"8","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx":"9","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx":"10","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx":"11","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx":"12","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx":"13","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx":"14","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx":"15","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx":"16","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx":"17","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx":"18","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx":"19","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx":"20","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\MainHeader.tsx":"21","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx":"22","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx":"23","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx":"24","C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx":"25","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx":"26","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx":"27","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\developmentPlan.tsx":"28","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\index.tsx":"29","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\sideBar.tsx":"30","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\custom.tsx":"31","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx":"32","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx":"33","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx":"34","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx":"35","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\auth.tsx":"36","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx":"37","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx":"38","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx":"39","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\menuType.tsx":"40"},{"size":637,"mtime":1610944959237,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":5596,"mtime":1612786941067,"results":"44","hashOfConfig":"42"},{"size":212,"mtime":1611031594119,"results":"45","hashOfConfig":"42"},{"size":7192,"mtime":1612764238737,"results":"46","hashOfConfig":"42"},{"size":3123,"mtime":1612788818064,"results":"47","hashOfConfig":"42"},{"size":3927,"mtime":1612782972637,"results":"48","hashOfConfig":"42"},{"size":12586,"mtime":1612759298158,"results":"49","hashOfConfig":"42"},{"size":12967,"mtime":1612759298124,"results":"50","hashOfConfig":"42"},{"size":13156,"mtime":1612759298195,"results":"51","hashOfConfig":"42"},{"size":14367,"mtime":1612761486776,"results":"52","hashOfConfig":"42"},{"size":15113,"mtime":1612759298090,"results":"53","hashOfConfig":"42"},{"size":12509,"mtime":1612766340753,"results":"54","hashOfConfig":"42"},{"size":9168,"mtime":1612759298184,"results":"55","hashOfConfig":"42"},{"size":9598,"mtime":1612759298149,"results":"56","hashOfConfig":"42"},{"size":20358,"mtime":1612759298186,"results":"57","hashOfConfig":"42"},{"size":22575,"mtime":1612759298088,"results":"58","hashOfConfig":"42"},{"size":25965,"mtime":1612781923327,"results":"59","hashOfConfig":"42"},{"size":1477,"mtime":1612763933824,"results":"60","hashOfConfig":"42"},{"size":37945,"mtime":1612780652303,"results":"61","hashOfConfig":"42"},{"size":12370,"mtime":1612790859721,"results":"62","hashOfConfig":"42"},{"size":622,"mtime":1612790328390,"results":"63","hashOfConfig":"42"},{"size":1961,"mtime":1612157381886,"results":"64","hashOfConfig":"42"},{"size":3098,"mtime":1612761189442,"results":"65","hashOfConfig":"42"},{"size":2548,"mtime":1611747265015,"results":"66","hashOfConfig":"42"},{"size":5246,"mtime":1612791403613,"results":"67","hashOfConfig":"42"},{"size":2861,"mtime":1612336044605,"results":"68","hashOfConfig":"42"},{"size":931,"mtime":1612336512758,"results":"69","hashOfConfig":"42"},{"size":18717,"mtime":1612790564989,"results":"70","hashOfConfig":"42"},{"size":2915,"mtime":1612530802172,"results":"71","hashOfConfig":"42"},{"size":4822,"mtime":1612434429821,"results":"72","hashOfConfig":"42"},{"size":468,"mtime":1611837747887,"results":"73","hashOfConfig":"42"},{"size":832,"mtime":1611030790303,"results":"74","hashOfConfig":"42"},{"size":812,"mtime":1611815621575,"results":"75","hashOfConfig":"42"},{"size":790,"mtime":1611916486585,"results":"76","hashOfConfig":"42"},{"size":614,"mtime":1612414011899,"results":"77","hashOfConfig":"42"},{"size":872,"mtime":1611808946343,"results":"78","hashOfConfig":"42"},{"size":459,"mtime":1612154555075,"results":"79","hashOfConfig":"42"},{"size":443,"mtime":1611820350797,"results":"80","hashOfConfig":"42"},{"size":450,"mtime":1612790305270,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1jqg13p",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\acer\\Documents\\mega-soft\\src\\index.tsx",[],["181","182"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\reportWebVitals.ts",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\App.tsx",["183","184","185","186","187","188"],"import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Navigation from \"./Navigation\";\r\nimport Appraisal from \"./Views/Appraisal\";\r\nimport AddAppraisal from \"./Views/AddAppraisal\";\r\nimport UpdateAppraisal from \"./Views/UpdateAppraisal\";\r\nimport AppraisalDetail from \"./Views/AppraisalDetail\";\r\nimport GoalSetting from \"./Views/GoalSetting\";\r\nimport EmployeeDetails from \"./Views/EmployeeDetails\";\r\nimport JobHistory from \"./Views/JobHistory\";\r\nimport UpdateJobHistory from \"./Views/UpdateJobHistory\";\r\nimport JobHistoryDetails from \"./Views/JobHistoryDetails\";\r\nimport AddGoals from \"./Views/AddGoals\";\r\nimport UpdateGoals from \"./Views/UpdateGoals\";\r\nimport GoalDetails from \"./Views/GoalDetails\";\r\nimport Login from \"./Views/Login\";\r\n\r\nimport { validateLogin, login } from \"./redux/actions/auth\";\r\n\r\nimport \"./App.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./redux/reducers\";\r\n\r\nconst getQueryParms = (variable: string) => {\r\n  // console.log(\"variable===>\", variable);\r\n  var query = window.location.search.substring(1);\r\n  // console.log(\"query==>\", query); //\"app=article&act=news_content&aid=160990\"\r\n  var vars = query.split(\"&\");\r\n  console.log(vars); //[ 'app=article', 'act=news_content', 'aid=160990' ]\r\n  for (var i = 0; i < vars.length; i++) {\r\n    var pair = vars[i].split(\"=\");\r\n    console.log(pair); //[ 'app', 'article' ][ 'act', 'news_content' ][ 'aid', '160990' ]\r\n    if (pair[0] == variable) {\r\n      return pair[1];\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nfunction App(props: any) {\r\n  // console.log(\"props==>\", props.Auth.isLoggedIn);\r\n  const getAccessToken = () => {\r\n    const url = window.location.href;\r\n    console.log(\"url ==\", url);\r\n    const str = url;\r\n    const param = \"access_token=\";\r\n    let res = str.split(\"&\", 1);\r\n    let n = res[0].search(param);\r\n\r\n    if (n < 0) {\r\n      return;\r\n    }\r\n    n += param.length;\r\n    let access_token = res[0].substr(n);\r\n    console.log(\"access_token on load==>\", access_token);\r\n    sessionStorage.setItem(\"access_token\", access_token);\r\n  };\r\n  useEffect(() => {\r\n    getAccessToken();\r\n  }, []);\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state: RootState) => state.Auth);\r\n\r\n  useEffect(() => {\r\n    dispatch(validateLogin());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // const stateValue = getQueryParms(\"state\");\r\n    // const sessionStateValue = getQueryParms(\"session_state\");\r\n    // const access_token = getQueryParms(\"access_token\");\r\n    // console.log(\"access_token main==>\", access_token);\r\n    // if (stateValue && sessionStateValue && access_token) {\r\n    //   dispatch(login(sessionStateValue, stateValue, access_token));\r\n    // }\r\n\r\n    const access_token = sessionStorage.getItem(\"access_token\");\r\n    if (access_token) {\r\n      dispatch(login(access_token));\r\n    }\r\n  }, []);\r\n\r\n  if (auth.isLoading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {auth.isLoggedIn == true ? (\r\n        <Switch>\r\n          <div className=\"page-wrapper\">\r\n            <Navigation />\r\n            {/* <Route exact path=\"/\" component={Login} /> */}\r\n            <Route exact path=\"/home\" component={Appraisal} />\r\n            <Route exact path=\"/addApprisal\" component={AddAppraisal} />\r\n            {/* <Route exact path=\"/appraisal/add\" component={Form} /> */}\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/update/:appraisalId\"\r\n              component={UpdateAppraisal}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/view/:appraisalId\"\r\n              component={AppraisalDetail}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting\"\r\n              component={GoalSetting}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/:employeeId/:appraisalId\"\r\n              component={EmployeeDetails}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/addjobhistory/:employeeId/:appraisalId\"\r\n              component={JobHistory}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/jobhistory/updateJobHistory/:name\"\r\n              component={UpdateJobHistory}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/:name\"\r\n              component={JobHistoryDetails}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/addgoal/:employeeId/:appraisalId\"\r\n              component={AddGoals}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/goals/updategoal/:name\"\r\n              component={UpdateGoals}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/appraisal/goalsetting/view/goal/goaldetail/:name\"\r\n              component={GoalDetails}\r\n            />\r\n            <Route path=\"/*\" render={() => <Redirect to=\"/home\" />} />\r\n            <Route\r\n              path=\"/appraisal/goalsetting*\"\r\n              render={() => <Redirect to=\"/appraisal/goalsetting\" />}\r\n            />\r\n          </div>\r\n        </Switch>\r\n      ) : (\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Login} />\r\n          <Route path=\"/*\" render={() => <Redirect to=\"/\" />} />\r\n        </Switch>\r\n      )}\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Navigation.tsx",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208"],"import * as React from \"react\";\r\nimport {\r\n  Nav,\r\n  INavLink,\r\n  INavStyles,\r\n  INavLinkGroup,\r\n} from \"office-ui-fabric-react/lib/Nav\";\r\nimport { initializeIcons } from \"@uifabric/icons\";\r\nimport { useHistory, matchPath } from \"react-router-dom\";\r\n\r\nimport hrms_logo from \"./assets/img/hrms_logo.gif\";\r\nimport logo_nuage from \"./assets/img/logo_nuage.png\";\r\nimport {\r\n  fetchNavigationBar,\r\n  sideNavigationData,\r\n} from \"./redux/actions/navigation\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./redux/reducers\";\r\nimport SideNavigation from \"./SideNavigation\";\r\nimport MainHeader from \"./SideNavigation/MainHeader\";\r\n\r\ninitializeIcons();\r\n\r\nconst navLinkGroups: INavLinkGroup[] = [\r\n  {\r\n    links: [\r\n      {\r\n        name: \"Appraisal\",\r\n        url: \"\",\r\n        key: \"key01\",\r\n        // icon: \"UpgradeAnalysis\",\r\n        links: [\r\n          {\r\n            name: \"Setup\",\r\n            url: \"/\",\r\n            icon: \"Settings\",\r\n            key: \"key02\",\r\n          },\r\n          // {\r\n          //   name: \"Ratings\",\r\n          //   url: \"/apprisal/rating\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key03\",\r\n          // },\r\n          // {\r\n          //   name: \"Periods\",\r\n          //   url: \"/apprisal/periods\",\r\n          //   icon: \"Timer\",\r\n          //   key: \"key04\",\r\n          // },\r\n          {\r\n            name: \"Goal Setting\",\r\n            url: \"/appraisal/goalsetting\",\r\n            icon: \"6PointStar\",\r\n            key: \"key05\",\r\n          },\r\n          // {\r\n          //   name: \"Self Assessment\",\r\n          //   url: \"\",\r\n          //   icon: \"6PointStar\",\r\n          //   key: \"key06\",\r\n          // },\r\n          // {\r\n          //   name: \"Development Plan\",\r\n          //   url: \"/apprisal/developmentPlan\",\r\n          //   icon: \"TestPlan\",\r\n          //   key: \"key07\",\r\n          // },\r\n          // {\r\n          //   name: \"Release Appraisal\",\r\n          //   url: \"/apprisal/releaseApprisal\",\r\n          //   icon: \"ReleaseGate\",\r\n          //   key: \"key08\",\r\n          // },\r\n          // {\r\n          //   name: \"Market Bench Marketing\",\r\n          //   url: \"/apprisal/marketBenchMarketing\",\r\n          //   icon: \"Market\",\r\n          //   key: \"key09\",\r\n          // },\r\n        ],\r\n        isExpanded: true,\r\n      },\r\n      {\r\n        name: \"Manage\",\r\n        url: \"\",\r\n        key: \"key10\",\r\n        // icon:'MedicationAdmin',\r\n        links: [\r\n          {\r\n            name: \"Team Goal Setting\",\r\n            url: \"/manage/teamGoalSetting\",\r\n            icon: \"Settings\",\r\n            key: \"key11\",\r\n          },\r\n          {\r\n            name: \"Team assess\",\r\n            url: \"/manage/teamAssess\",\r\n            icon: \"AssessmentGroup\",\r\n            key: \"key12\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n      {\r\n        name: \"Confirmation\",\r\n        url: \"\",\r\n        key: \"key13\",\r\n        expandAriaLabel: \"Expand Admin section\",\r\n        collapseAriaLabel: \"Collapse admin section\",\r\n        links: [\r\n          {\r\n            name: \"Confirmation Status\",\r\n            url: \"/confirmation/status\",\r\n            icon: \"SplitObject\",\r\n            key: \"key14\",\r\n          },\r\n          {\r\n            name: \"Release\",\r\n            url: \"/confirmation/release\",\r\n            key: \"key15\",\r\n            icon: \"ReleaseGate\",\r\n          },\r\n          {\r\n            name: \"Approval\",\r\n            url: \"/confirmation/approval\",\r\n            key: \"key16\",\r\n            icon: \"DocumentApproval\",\r\n          },\r\n          {\r\n            name: \"Letter\",\r\n            url: \"/confirmation/letter\",\r\n            key: \"key17\",\r\n            icon: \"DietPlanNotebook\",\r\n          },\r\n          {\r\n            name: \"Probation Letter\",\r\n            url: \"/confirmation/probationLetter\",\r\n            key: \"key18\",\r\n            icon: \"QuickNote\",\r\n          },\r\n        ],\r\n        isExpanded: false,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst navStyles: Partial<INavStyles> = {\r\n  root: {\r\n    // overflowY: \"auto\",\r\n    // width: 208,\r\n    height: \"100%\",\r\n  },\r\n  link: {\r\n    width: \"200px\",\r\n  },\r\n  linkText: {\r\n    color: \"#FFF\",\r\n    // fontSize: 12,\r\n    selectors: {\r\n      \"&:hover\": {\r\n        color: \"#FFF\",\r\n      },\r\n    },\r\n  },\r\n  chevronIcon: {\r\n    color: \"#FFF\",\r\n  },\r\n  compositeLink: {\r\n    selectors: {\r\n      \"&.is-selected\": {\r\n        background: \"#29416f\",\r\n      },\r\n      \"&:hover\": {\r\n        \".ms-Button\": {\r\n          background: \"#29416f\",\r\n        },\r\n        \".ms-Nav-linkText\": {\r\n          // color: \"#FFF\", // your real styling here\r\n        },\r\n        \".ms-Icon\": {\r\n          color: \"#FFF\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nfunction Navigation() {\r\n  // const { children } = props;\r\n  const dispatch = useDispatch();\r\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [navData, setNavData]: any = useState();\r\n  // console.log(\"navData?????=>\", navData);\r\n\r\n  const navigation = useSelector(\r\n    (state: RootState) => state.navigationData.navigationData\r\n  );\r\n  // console.log(\"navigation data=>\", navigation.links);\r\n\r\n  // useEffect((): void => {\r\n  //   dispatch(fetchNavigationBar(doctype, roleType ? roleType : \"Employee\"));\r\n  // }, [doctype, roleType]);\r\n\r\n  // useEffect((): void => {\r\n  //   sideNavigationData(doctype).then((response) => {\r\n  //     console.log(\"side nav response\", response.message);\r\n  //     setNavData(response.message);\r\n  //   });\r\n  // }, [doctype]);\r\n\r\n  let history = useHistory();\r\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\r\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\r\n    setSelectedNavKey(item?.key || \"\");\r\n  };\r\n  React.useEffect(() => {\r\n    navLinkGroups[0].links.map((item) => {\r\n      if (item.links) {\r\n        item.links.map((subItem) => {\r\n          if (\r\n            matchPath(history.location.pathname, {\r\n              path: subItem.url,\r\n              exact: true,\r\n            })\r\n          ) {\r\n            setSelectedNavKey(subItem?.key || \"\");\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        if (\r\n          matchPath(history.location.pathname, {\r\n            path: item.url,\r\n            exact: true,\r\n          })\r\n        ) {\r\n          setSelectedNavKey(item?.key || \"\");\r\n          return;\r\n        }\r\n      }\r\n    });\r\n  }, [history.location.pathname]);\r\n  return (\r\n    <div id=\"main-wrapper\">\r\n      <MainHeader />\r\n      <div className=\"sidebar left-sidebar\">\r\n        {/* <div className=\"main-logo\">\r\n          <img src={logo_nuage} />\r\n        </div> */}\r\n        <div className=\"footer-logo\">\r\n          <img src={hrms_logo} />\r\n        </div>\r\n        {/* <Nav\r\n          onLinkClick={onLinkClick}\r\n          selectedKey={selectedNavKey}\r\n          ariaLabel=\"Nav basic example\"\r\n          styles={navStyles}\r\n          groups={navigation.links}\r\n        /> */}\r\n        <SideNavigation />\r\n        {/* <div dangerouslySetInnerHTML={{ __html: navData }} /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\auth.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Login\\index.tsx",["209","210","211","212","213","214","215","216"],"import {\r\n  ITextFieldStyles,\r\n  PrimaryButton,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { login } from \"../../redux/actions/auth\";\r\nimport logo_ms from \"../../assets/img/logo_ms.png\";\r\nimport banner_main from \"../../assets/img/megasoft_hrms.jpg\";\r\nimport \"./style.css\";\r\n\r\nfunction Login() {\r\n  const dispatch = useDispatch();\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      width: \"300px\",\r\n    },\r\n  };\r\n\r\n  // const handleLogin = () => {\r\n  //   login().then((response) => {\r\n  //     if (response.message == true) {\r\n  //       dispatch(auth('uayuyauyuyauyuay', {}));\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n  // const handleLogin = () => {\r\n  //    window.open( 'https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/auth?redirect_uri=http%3A%2F%2Flocalhost%3A3000&state=eyJzaXRlIjogImh0dHA6Ly81Mi4xNDYuMC4xNTQ6ODAwMSIsICJ0b2tlbiI6ICIzNWQxYTc3MDk4MGNiODY3Yzg2ZjM3ZTllNDlkYWM3YTc2MTM4Y2FhYzM4YTI2OTc3MTQzNDhjYiIsICJyZWRpcmVjdF90byI6IG51bGx9&scope=openid&response_type=code&client_id=ms-hrms')}\r\n  // };\r\n\r\n  return (\r\n    <div className=\"login-section\">\r\n      <div className=\"row\">\r\n        <div className=\"col-8\">\r\n          <div className=\"login-banner-image\">\r\n            <div className=\"login-banner-image-overlay\">\r\n              <div className=\"overlay-text-alignment\">\r\n                <div className=\"login-banner-text\">\r\n                  <h2>Making</h2>\r\n                  <p>\r\n                    Organizations Run Effectively By Providing Innovative HRMS\r\n                    Solutions Globally\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <div className=\"text-right pt-3 pr-4\">\r\n            <img src={logo_ms} className=\"ms-logo-login\" />\r\n          </div>\r\n          <div className=\"login-form\">\r\n            <div className=\"login-form-center\">\r\n              <div\r\n                style={{\r\n                  marginTop: \"3rem\",\r\n                  justifyContent: \"center\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <PrimaryButton\r\n                  text=\"Proceed with Megasoft Login\"\r\n                  style={{ marginTop: \"20px\" }}\r\n                  allowDisabledFocus\r\n                  onClick={() => {\r\n                    window.open(\r\n                      \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\r\n                      \"_self\"\r\n                    );\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div\r\n        style={{\r\n          display: \"flex\",\r\n          padding: \"10px\",\r\n          justifyContent: \"flex-end\",\r\n        }}\r\n      >\r\n        <img src={logo_ms} className=\"ms-logo\" />\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: \"10rem\",\r\n          justifyContent: \"center\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <PrimaryButton\r\n          text=\"Login\"\r\n          style={{ marginTop: \"20px\" }}\r\n          allowDisabledFocus\r\n          onClick={() => {\r\n            window.open(\r\n              \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\r\n              \"_self\"\r\n            );\r\n          }}\r\n        />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(Login);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistory\\index.tsx",["217","218","219","220","221","222","223","224"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  add_JobHistory,\r\n  fetchJobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n}\r\n\r\nfunction JobHistory(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      setEmployeeDetails(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryData({\r\n      ...jobHistoryData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\r\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\r\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\r\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\r\n\r\n  const handleAddJobHistory = () => {\r\n    if (jobHistoryData.responsibilities === \"\") {\r\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\r\n    }\r\n    if (jobHistoryData.place === \"\") {\r\n      setErrMsgPlace(\"Place of posting is required\");\r\n    }\r\n    if (jobHistoryData.position === \"\") {\r\n      setErrMsgPosition(\"Position held is required\");\r\n    }\r\n    if (jobHistoryData.qualifications === \"\") {\r\n      setErrMsgQualifications(\"Qualifications is required\");\r\n    }\r\n    const addQuery = {\r\n      appraisal_id: employeeDetails.appraisal_id,\r\n      employee_id: employeeDetails.employee_id,\r\n      key_responsibilities: jobHistoryData.responsibilities,\r\n      place_of_posting: jobHistoryData.place,\r\n      position_held: jobHistoryData.position,\r\n      qualifications: jobHistoryData.qualifications,\r\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\r\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\r\n    };\r\n    add_JobHistory(addQuery).then((response: any) => {\r\n      if (response.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"jobHistory-details\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgPosition}\r\n            label=\"Position Held\"\r\n            value={jobHistoryData.position}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div style={{ display: \"flex\" }}>\r\n            <TextField\r\n              required\r\n              errorMessage={errMsgPlace}\r\n              label=\"Place of Posting\"\r\n              value={jobHistoryData.place}\r\n              placeholder=\"Enter your place of posting\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"place\"\r\n              onChange={onChangeInput}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"From Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              onSelectDate={onchangeFromDate}\r\n              value={fromDate}\r\n              styles={datePickerStyle}\r\n              // textField={{ errorMessage: \"Form date is required\" }}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"To Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              onSelectDate={onchangeToDate}\r\n              value={toDate}\r\n              // textField={{ errorMessage = { errMsgPlace } }}\r\n              styles={datePickerStyle}\r\n            />\r\n          </div>\r\n\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgResponsibility}\r\n            label=\"Key Responsibilities\"\r\n            value={jobHistoryData.responsibilities}\r\n            placeholder=\"Describe your key responsibilities\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"responsibilities\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgQualifications}\r\n            label=\"Qualifications\"\r\n            value={jobHistoryData.qualifications}\r\n            placeholder=\"Qualifications\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"qualifications\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">Job History Added.</div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content\">\r\n              Somthing went wrong. Please try again\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={handleAddJobHistory}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(JobHistory);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AppraisalDetail\\index.tsx",["225","226","227","228","229","230","231","232","233"],"import {\r\n  Checkbox,\r\n  DatePicker,\r\n  Dropdown,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  ITextFieldStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  PrimaryButton,\r\n  Separator,\r\n  Stack,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nconst stackTokens = { childrenGap: 10 };\r\n\r\nconst textfelidStyle: Partial<ITextFieldStyles> = {\r\n  root: {\r\n    \".ms-TextField-wrapper\": {\r\n      borderRadius: \"10px\",\r\n    },\r\n\r\n    \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n      borderRadius: \"10px\",\r\n    },\r\n  },\r\n};\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"HR\" },\r\n  { key: \"key4\", text: \"Management\" },\r\n];\r\n\r\nconst controlClass = mergeStyleSets({\r\n  control: {\r\n    // margin: \"0 0 15px 0\",\r\n    // maxWidth: \"150px\",\r\n  },\r\n});\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\nconst datePickerStyle: Partial<IDatePickerStyles> = {\r\n  icon: {\r\n    color: \"rgb(111 144 220)\",\r\n  },\r\n};\r\n\r\nfunction AppraisalDetail(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n\r\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"key1\", text: \"Employee\" },\r\n  //   { key: \"key2\", text: \"Manager\" },\r\n  //   { key: \"key3\", text: \"HR content\" },\r\n  // ];\r\n\r\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n  //   key: \"\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setReviewSearch(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      setAppraisalDetail(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Appraisal Details\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  console.log(\"local data data=>\", appraisalDetail);\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              disabled={true}\r\n              placeholder=\"ID\"\r\n              value={appraisalDetail.id}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              // onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              disabled={true}\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={appraisalDetail.appraisal_description}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              // onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              disabled={true}\r\n              label=\"Review From\"\r\n              // value={updateData.review_from}\r\n              className={`${controlClass.control} flexGrow`}\r\n              // firstDayOfWeek={firstDayOfWeek}\r\n              // strings={DayPickerStrings}\r\n              value={new Date(appraisalDetail.review_from)}\r\n              // onSelectDate={(date) =>\r\n              //   setUpdateData({ ...updateData, review_from: date })\r\n              // }\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              disabled={true}\r\n              label=\"Appraisal To\"\r\n              value={new Date(appraisalDetail.appraisal_to)}\r\n              className={`${controlClass.control} flexGrow`}\r\n              // firstDayOfWeek={firstDayOfWeek}\r\n              // strings={DayPickerStrings}\r\n              // onSelectDate={(date) =>\r\n              //   setUpdateData({ ...updateData, appraisal_to: date })\r\n              // }\r\n              styles={datePickerStyle}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              disabled={true}\r\n              selectedKey={\r\n                reviewFrequencyOptions.find(\r\n                  (item) => item.text === appraisalDetail.review_frequency\r\n                )?.key\r\n              }\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              // onChange={(ev, item) =>\r\n              //   setUpdateData({ ...updateData, review_frequency: item?.text })\r\n              // }\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            disabled={true}\r\n            selectedKey={\r\n              typeOptions.find((item) => item.text === appraisalDetail.type)\r\n                ?.key\r\n            }\r\n            label=\"Type\"\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            // onChange={(ev, item) =>\r\n            //   setUpdateData({ ...appraisalDetail, type: item?.text })\r\n            // }\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            disabled={true}\r\n            selectedKey={\r\n              formateTypeOptions.find(\r\n                (item) => item.text === appraisalDetail.format_type\r\n              )?.key\r\n            }\r\n            label=\"Format Type\"\r\n            className=\"type-input\"\r\n            // onChange={(ev, item) =>\r\n            //   setUpdateData({ ...updateData, format_type: item?.text })\r\n            // }\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={appraisalDetail.appraisal_owner}\r\n            styles={textfelidStyle}\r\n            name=\"appraisal_owner\"\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={appraisalDetail.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={appraisalDetail.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n              />\r\n              <Checkbox\r\n                disabled={true}\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={appraisalDetail.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.kra_settings_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.assessment_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.assessment_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.assessment_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.assessment_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            ></div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Back\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/home\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            \r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()} </div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AppraisalDetail);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateJobHistory\\index.tsx",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  add_JobHistory,\r\n  fetchJobHistory,\r\n  update_JobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\n\r\ninterface ParamTypes {\r\n  name: string;\r\n}\r\n\r\nfunction UpdateJobHistory(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.name);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"name\", \"=\", filtersById]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      //   console.log(\"update response =>.>>>\", response.data);\r\n      setJobHistoryUpdateData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryUpdateData({\r\n      ...jobHistoryUpdateData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const jobHistoryClicked = () => {\r\n    history.goBack();\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\r\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\r\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\r\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\r\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\r\n\r\n  const handleUpdateJobHistory = () => {\r\n    if (jobHistoryUpdateData.responsibilities === \"\") {\r\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\r\n    }\r\n    if (jobHistoryUpdateData.place === \"\") {\r\n      setErrMsgPlace(\"Place of Posting is required\");\r\n    }\r\n    if (jobHistoryUpdateData.position === \"\") {\r\n      setErrMsgPosition(\"Position Held is required\");\r\n    }\r\n    if (jobHistoryUpdateData.qualifications === \"\") {\r\n      setErrMsgQualifications(\"Qualifications is required\");\r\n    }\r\n    const updateQuery = {\r\n      ...jobHistoryUpdateData,\r\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\r\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\r\n    };\r\n    update_JobHistory(updateQuery).then((response: any) => {\r\n      if (response.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"jobHistory-details\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgPosition}\r\n            label=\"Position Held\"\r\n            value={jobHistoryUpdateData.position_held}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position_held\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div style={{ display: \"flex\" }}>\r\n            <TextField\r\n              required\r\n              errorMessage={errMsgPlace}\r\n              label=\"Place of Posting\"\r\n              value={jobHistoryUpdateData.place_of_posting}\r\n              placeholder=\"Enter your place of posting\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"place_of_posting\"\r\n              onChange={onChangeInput}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"From Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              value={new Date(jobHistoryUpdateData.from_date)}\r\n              onSelectDate={(date) =>\r\n                setJobHistoryUpdateData({\r\n                  ...jobHistoryUpdateData,\r\n                  from_date: date,\r\n                })\r\n              }\r\n              styles={datePickerStyle}\r\n              // textField={{ errorMessage: \"Form date is required\" }}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"To Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              value={new Date(jobHistoryUpdateData.to_date)}\r\n              onSelectDate={(date) =>\r\n                setJobHistoryUpdateData({\r\n                  ...jobHistoryUpdateData,\r\n                  to_date: date,\r\n                })\r\n              }\r\n              // textField={{ errorMessage = { errMsgPlace } }}\r\n              styles={datePickerStyle}\r\n            />\r\n          </div>\r\n\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgResponsibility}\r\n            label=\"Key Responsibilities\"\r\n            value={jobHistoryUpdateData.key_responsibilities}\r\n            placeholder=\"Describe your key responsibilities\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"key_responsibilities\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgQualifications}\r\n            label=\"Qualifications\"\r\n            value={jobHistoryUpdateData.qualifications}\r\n            placeholder=\"Qualifications\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"qualifications\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">Job History Updated.</div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content\">\r\n              Somthing went wrong. Please try again\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Update\"\r\n              allowDisabledFocus\r\n              onClick={handleUpdateJobHistory}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateJobHistory);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateGoals\\index.tsx",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport {\r\n  fetchGoalData,\r\n  fetchGoalDataName,\r\n  update_goals,\r\n} from \"../../redux/actions/goal\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  name: string;\r\n}\r\n\r\nconst goalOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Goal\" },\r\n  { key: \"key2\", text: \"Sub-Goal\" },\r\n];\r\n\r\nfunction UpdateGoals(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [limitPageLength] = useState(5);\r\n  const [limit_start] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n  const [filtersByName] = useState(params.name);\r\n\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [goalData, setGoalData]: any = useState({});\r\n  const [updateGoalData, setUpdateGoalData]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersByName) {\r\n      filters.push([\"name\", \"=\", filtersByName]);\r\n    }\r\n    fetchGoalDataName(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response: any) => {\r\n      console.log(\"response of Goal===>\", response.data);\r\n      setUpdateGoalData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateGoalData({\r\n      ...updateGoalData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Update Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\r\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\r\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\r\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\r\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\r\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\r\n\r\n  const [goalType, setGoalType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const onChangeGoalType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setGoalType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleUpdateGoal = () => {\r\n    // if (goalInputData.order_no === \"\") {\r\n    //   setErrMsgOrder(\"Order number is required\");\r\n    // }\r\n    // if (goalInputData.kra === \"\") {\r\n    //   setErrMsgKra(\"KRA is required\");\r\n    // }\r\n    // if (goalInputData.goal === \"\") {\r\n    //   setErrMsgGoal(\"Goal is required\");\r\n    // }\r\n    // if (goalInputData.measure === \"\") {\r\n    //   setErrMsgMeasure(\"Measure is required\");\r\n    // }\r\n    // if (goalInputData.weightage === \"\") {\r\n    //   setErrMsgWeightage(\"Weightage is required\");\r\n    // }\r\n    // if (goalType.text === \"\") {\r\n    //   setErrMsgGoalType(\"Select goal type\");\r\n    // }\r\n    const addQuery = {\r\n      ...updateGoalData,\r\n    };\r\n    update_goals(addQuery).then((response: any) => {\r\n      if (response.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            readOnly={true}\r\n            label=\"ID\"\r\n            value={params.name}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgOrder}\r\n            label=\"Order Number\"\r\n            value={updateGoalData.order_no}\r\n            placeholder=\"Enter order number\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"order_no\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Dropdown\r\n            required\r\n            errorMessage={errMsgGoalType}\r\n            label=\"Goal Type\"\r\n            placeholder=\"Select goal type\"\r\n            className=\"flexGrow\"\r\n            selectedKey={\r\n              goalOptions.find((item) => item.text === updateGoalData.goal_type)\r\n                ?.key\r\n            }\r\n            onChange={(ev, item) =>\r\n              setUpdateGoalData({\r\n                ...updateGoalData,\r\n                goal_type: item?.text,\r\n              })\r\n            }\r\n            options={goalOptions}\r\n            // styles={dropdownStyles}\r\n          />\r\n          <TextField\r\n            disabled={updateGoalData.goal_type === \"Goal\" ? true : false}\r\n            label=\"Parent Goal\"\r\n            value={updateGoalData.parent_goal_id}\r\n            placeholder=\"Enter KRA\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"parent_goal_id\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\"></div>\r\n        <div>\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgKra}\r\n            label=\"KRA\"\r\n            value={updateGoalData.kra}\r\n            placeholder=\"Enter KRA\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"kra\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div className=\"goal-details\"></div>\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgGoal}\r\n            label=\"Goal\"\r\n            value={updateGoalData.goal}\r\n            placeholder=\"Enter Goal\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"goal\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgMeasure}\r\n            label=\"Measure\"\r\n            value={updateGoalData.measure}\r\n            placeholder=\"Enter Measure\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"measure\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgWeightage}\r\n            label=\"Weightage\"\r\n            value={updateGoalData.weightage}\r\n            placeholder=\"Enter Weightage\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"weightage\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            label=\"Target\"\r\n            value={updateGoalData.target}\r\n            placeholder=\"Enter Target\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"target\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            label=\"Threshold\"\r\n            value={updateGoalData.threshold}\r\n            placeholder=\"Enter Threshold\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"threshold\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            label=\"Stretch\"\r\n            value={updateGoalData.stretch}\r\n            placeholder=\"Enter Stretch\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"stretch\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Goal successfully Updated.\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content\">\r\n              Somthing went wrong. Please try again\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Update\"\r\n              allowDisabledFocus\r\n              onClick={handleUpdateGoal}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateGoals);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddGoals\\index.tsx",["275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  add_JobHistory,\r\n  fetchJobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport moment from \"moment\";\r\nimport { add_goals, fetchGoalData } from \"../../redux/actions/goal\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  appraisalId: string;\r\n}\r\n\r\nconst goalOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Goal\" },\r\n  { key: \"key2\", text: \"Sub-Goal\" },\r\n];\r\n\r\nfunction AddGoals(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [limitPageLength] = useState(5);\r\n  const [limit_start] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n  const [goalInputData, setGoalInputData] = useState({\r\n    goal: \"\",\r\n    goal_type: \"\",\r\n    kra: \"\",\r\n    measure: \"\",\r\n    order_no: \"\",\r\n    parent_goal_id: \"\",\r\n    stretch: \"\",\r\n    target: \"\",\r\n    threshold: \"\",\r\n    weightage: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const [goalData, setGoalData]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchGoalData(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Goal===>\", response);\r\n      setGoalData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setGoalInputData({\r\n      ...goalInputData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Add Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\r\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\r\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\r\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\r\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\r\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\r\n\r\n  const [goalType, setGoalType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const onChangeGoalType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setGoalType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleAddJobHistory = () => {\r\n    if (goalInputData.order_no === \"\") {\r\n      setErrMsgOrder(\"Order number is required\");\r\n    }\r\n    if (goalInputData.kra === \"\") {\r\n      setErrMsgKra(\"KRA is required\");\r\n    }\r\n    if (goalInputData.goal === \"\") {\r\n      setErrMsgGoal(\"Goal is required\");\r\n    }\r\n    if (goalInputData.measure === \"\") {\r\n      setErrMsgMeasure(\"Measure is required\");\r\n    }\r\n    if (goalInputData.weightage === \"\") {\r\n      setErrMsgWeightage(\"Weightage is required\");\r\n    }\r\n    if (goalType.text === \"\") {\r\n      setErrMsgGoalType(\"Select goal type\");\r\n    }\r\n    const addQuery = {\r\n      appraisal_id: params.appraisalId,\r\n      employee_id: params.employeeId,\r\n      goal_type: goalType.text,\r\n      goal: goalInputData.goal,\r\n      kra: goalInputData.kra,\r\n      order_no: goalInputData.order_no,\r\n      measure: goalInputData.measure,\r\n      parent_goal_id: goalInputData.parent_goal_id,\r\n      stretch: goalInputData.stretch,\r\n      target: goalInputData.target,\r\n      threshold: goalInputData.threshold,\r\n      weightage: goalInputData.weightage,\r\n    };\r\n    add_goals(addQuery).then((response: any) => {\r\n      if (response.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            disabled={true}\r\n            label=\"ID\"\r\n            // value={goalData.name}\r\n            placeholder=\"New\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgOrder}\r\n            label=\"Order Number\"\r\n            value={goalInputData.order_no}\r\n            placeholder=\"Enter order number\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"order_no\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Dropdown\r\n            required\r\n            errorMessage={errMsgGoalType}\r\n            label=\"Goal Type\"\r\n            placeholder=\"Select goal type\"\r\n            className=\"flexGrow\"\r\n            onChange={onChangeGoalType}\r\n            options={goalOptions}\r\n            // styles={dropdownStyles}\r\n          />\r\n          <TextField\r\n            disabled={goalType.text === \"Goal\" ? true : false}\r\n            label=\"Parent Goal\"\r\n            value={goalInputData.parent_goal_id}\r\n            placeholder=\"Enter parent goal ID \"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"parent_goal_id\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\"></div>\r\n        <div>\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgKra}\r\n            label=\"KRA\"\r\n            value={goalInputData.kra}\r\n            placeholder=\"Enter KRA\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"kra\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgGoal}\r\n            label=\"Goal\"\r\n            value={goalInputData.goal}\r\n            placeholder=\"Enter Goal\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"goal\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgMeasure}\r\n            label=\"Measure\"\r\n            value={goalInputData.measure}\r\n            placeholder=\"Enter Measure\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"measure\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            errorMessage={errMsgWeightage}\r\n            label=\"Weightage\"\r\n            value={goalInputData.weightage}\r\n            placeholder=\"Enter Weightage\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"weightage\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            label=\"Target\"\r\n            value={goalInputData.target}\r\n            placeholder=\"Enter Target\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"target\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            label=\"Threshold\"\r\n            value={goalInputData.threshold}\r\n            placeholder=\"Enter Threshold\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"threshold\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            label=\"Stretch\"\r\n            value={goalInputData.stretch}\r\n            placeholder=\"Enter Stretch\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"stretch\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={successModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setSuccessModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Goal successfully Added.\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"OK\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  history.goBack();\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title failed\"}\r\n            isOpen={failedModal}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Error</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content\">\r\n              Somthing went wrong. Please try again\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <PrimaryButton\r\n                text=\"Go Back\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setFailedModal(false);\r\n                }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={handleAddJobHistory}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AddGoals);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalSetting\\index.tsx",["296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport {\r\n  DetailsList,\r\n  Dropdown,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IColumn,\r\n  IDetailsListStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  PrimaryButton,\r\n  Text,\r\n} from \"office-ui-fabric-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\n\r\nfunction GoalSetting(props: any) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\r\n  const [limit_start, setLimitStart] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [role, setRole] = useState(\"Employee\");\r\n  const [currentPage, setCurentPage] = useState(0);\r\n  const [limitPageLength, setLimitPageLength] = useState(3);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n\r\n  const employee = useSelector((state: RootState) => state.employeeList);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const { employeeList, isLoading, total_count, count } = employee;\r\n  // console.log(\"employeeList=> \", employeeList);\r\n\r\n  const [employeData, setEmployeeData]: any = useState({});\r\n  // console.log(\"employee data=>\", employeeList);\r\n\r\n  useEffect((): void => {\r\n    dispatch(fetchEmployeeData(doctype, limit_start, limit, roleType));\r\n  }, [doctype, limit_start, limit, roleType]);\r\n\r\n  const [roles, setRoles] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [period, setPeriod] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [status, setStatus] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n  const history = useHistory();\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const rolesOption: IDropdownOption[] = [\r\n    { key: \"employee\", text: \"Employee\" },\r\n    { key: \"manager\", text: \"Manager\" },\r\n    { key: \"hrContact\", text: \"HR Contact\" },\r\n  ];\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 250,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      backgroundColor: \"#344f84\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  const periodOption: IDropdownOption[] = [\r\n    { key: \"key1\", text: \"2017-2018\" },\r\n    { key: \"key2\", text: \"2018-2019\" },\r\n    { key: \"key3\", text: \"2019-2020\" },\r\n  ];\r\n  const statusOption: IDropdownOption[] = [\r\n    { key: \"key1\", text: \"Pending with Employee\" },\r\n    { key: \"key2\", text: \"Pending with Reviewer\" },\r\n    { key: \"key3\", text: \"Pending Counter Signing\" },\r\n    { key: \"key4\", text: \"Complete\" },\r\n  ];\r\n\r\n  const operations = [\r\n    {\r\n      sno: \"01\",\r\n      action: \"action1\",\r\n      employeeID: \"145728\",\r\n      employeeName: \"PRIYA GUPTA\",\r\n      managerID: \"124590\",\r\n      managerName: \"PINKO KUMAR\",\r\n      status: \"Pending With Employee\",\r\n      apprisalType: \"Goal Sheet\",\r\n    },\r\n  ];\r\n\r\n  const columns: IColumn[] = [\r\n    // {\r\n    //   key: \"01\",\r\n    //   name: \"S.No\",\r\n    //   fieldName: \"sno\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 50,\r\n    //   isSorted: true,\r\n    //   className: \"idColumn\",\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   isRowHeader: true,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"02\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 110,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <PrimaryButton\r\n            text=\"KRA Setting\"\r\n            allowDisabledFocus\r\n            onClick={() => {\r\n              handleKraData(item);\r\n            }}\r\n            className=\"action-btn\"\r\n            style={{\r\n              padding: \"0px\",\r\n              fontSize: \"0.75rem\",\r\n              height: \"24px\",\r\n              borderRadius: \"3px\",\r\n            }}\r\n            disabled={false}\r\n            checked={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n\r\n    {\r\n      key: \"03\",\r\n      name: \"Employee ID\",\r\n      fieldName: \"employee_id\",\r\n      minWidth: 50,\r\n      maxWidth: 90,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: \"Employee Name\",\r\n      fieldName: \"employee_name\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"05\",\r\n    //   name: \"Manager ID\",\r\n    //   fieldName: \"manager_id\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 100,\r\n    //   isSortedDescending: false,\r\n    //   isRowHeader: true,\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"06\",\r\n      name: \"Manager Name\",\r\n      fieldName: \"manager_name\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: \"Status\",\r\n      fieldName: \"status\",\r\n      minWidth: 50,\r\n      maxWidth: 170,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"Appraisal Type\",\r\n      fieldName: \"appraisal_type\",\r\n      minWidth: 50,\r\n      maxWidth: 260,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n  ];\r\n\r\n  const handleKraData = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/${item.employee_id}/${item.appraisal_id}`\r\n    );\r\n    // history.push(\"/appraisal/goalsetting/view\");\r\n  };\r\n\r\n  const handleRoles = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setRoles(\r\n      item || {\r\n        key: \"employee\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const onChangePeriod = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setPeriod(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const onChangeStatus = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setStatus(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    // { text: \"Employee\", key: \"d3\", as: \"h4\" },\r\n    { text: \"Goal Setting\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            \r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">\r\n          <div\r\n            // className=\"card\"\r\n            style={{\r\n              display: \"flex\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            <Dropdown\r\n              label=\"Status\"\r\n              placeholder=\"Select\"\r\n              options={statusOption}\r\n              className=\"reviewFrequency\"\r\n              onChange={onChangeStatus}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n            <PrimaryButton\r\n              iconProps={{ iconName: \"Search\" }}\r\n              style={{\r\n                marginLeft: \"20px\",\r\n                alignSelf: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            />\r\n            {/* <Dropdown\r\n              label=\"Period\"\r\n              placeholder=\"Select\"\r\n              options={periodOption}\r\n              className=\"reviewFrequency\"\r\n              onChange={onChangePeriod}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            /> */}\r\n          </div>\r\n          <div className=\"card\">\r\n            <DetailsList\r\n              styles={listStyle}\r\n              items={employeeList}\r\n              className=\"detail-list\"\r\n              columns={columns}\r\n              selectionMode={0}\r\n            />\r\n            <div className=\"pagination-style\">\r\n              <Pagination\r\n                format=\"buttons\"\r\n                // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                selectedPageIndex={currentPage}\r\n                pageCount={Math.ceil(total_count / limitPageLength)}\r\n                itemsPerPage={limitPageLength}\r\n                totalItemCount={total_count}\r\n                onPageChange={(page) => {\r\n                  setLimitSTart(page * limitPageLength);\r\n                  setCurentPage(page);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* <div style={{ marginTop: \"10px\" }}>\r\n            <PrimaryButton\r\n              text=\"Export\"\r\n              allowDisabledFocus\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n            <PrimaryButton\r\n              text=\"Back\"\r\n              allowDisabledFocus\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n          </div> */}\r\n        </div>\r\n        {/* <div className=\"right-container\">\r\n          <div className=\"stepper\">\r\n            <ul className=\"progress\">\r\n              <li>\r\n                <div className=\"node green\"></div>\r\n                <p className=\"green\">\r\n                  <span>Provide your job history</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider green\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node green\"></div>\r\n                <p className=\"green\">\r\n                  <span>Perform goal setting</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider green\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node grey\"></div>\r\n                <p className=\"grey\">\r\n                  <span>Update training needs</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider grey\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node grey\"></div>\r\n                <p className=\"grey\">\r\n                  <span>Create development plan</span>\r\n                </p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(GoalSetting);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\JobHistoryDetails\\index.tsx",["322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  add_JobHistory,\r\n  fetchJobHistory,\r\n  fetchJobHistoryByName,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  DatePicker,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  name: string;\r\n}\r\n\r\nfunction JobHistoryDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByName] = useState(params.name);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n  const [jobHistoryData, setJobHistoryData] = useState({\r\n    position: \"\",\r\n    place: \"\",\r\n    responsibilities: \"\",\r\n    qualifications: \"\",\r\n  });\r\n  const [toDate, setToDate] = useState<Date | undefined>();\r\n  const [fromDate, setFromDate] = useState<Date | undefined>();\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersByName) {\r\n      filters.push([\"name\", \"=\", filtersByName]);\r\n    }\r\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\r\n      (response) => {\r\n        setEmployeeDetails(response.data[0]);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   width: \"250px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setJobHistoryData({\r\n      ...jobHistoryData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onchangeToDate = (date: Date | null | undefined): void => {\r\n    setToDate(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const onchangeFromDate = (date: Date | null | undefined): void => {\r\n    setFromDate(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\r\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\r\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\r\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"jobHistory-details\">\r\n          <TextField\r\n            disabled={true}\r\n            required\r\n            errorMessage={errMsgPosition}\r\n            label=\"Position Held\"\r\n            value={employeeDetails.position_held}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div style={{ display: \"flex\" }}>\r\n            <TextField\r\n              required\r\n              disabled={true}\r\n              errorMessage={errMsgPlace}\r\n              label=\"Place of Posting\"\r\n              value={employeeDetails.place_of_posting}\r\n              placeholder=\"Enter your place of posting\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"place\"\r\n              onChange={onChangeInput}\r\n            />\r\n            <DatePicker\r\n              disabled={true}\r\n              isRequired={true}\r\n              label=\"From Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              onSelectDate={onchangeFromDate}\r\n              value={new Date(employeeDetails.from_date)}\r\n              styles={datePickerStyle}\r\n              // textField={{ errorMessage: \"Form date is required\" }}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              disabled={true}\r\n              label=\"To Date\"\r\n              placeholder=\"Select a date\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              onSelectDate={onchangeToDate}\r\n              value={new Date(employeeDetails.to_date)}\r\n              // textField={{ errorMessage = { errMsgPlace } }}\r\n              styles={datePickerStyle}\r\n            />\r\n          </div>\r\n\r\n          <TextField\r\n            disabled={true}\r\n            required\r\n            errorMessage={errMsgResponsibility}\r\n            label=\"Key Responsibilities\"\r\n            value={employeeDetails.key_responsibilities}\r\n            placeholder=\"Describe your key responsibilities\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"responsibilities\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            required\r\n            disabled={true}\r\n            errorMessage={errMsgQualifications}\r\n            label=\"Qualifications\"\r\n            value={employeeDetails.qualifications}\r\n            placeholder=\"Qualifications\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"qualifications\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Back\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(JobHistoryDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\GoalDetails\\index.tsx",["344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport { fetchGoalData, fetchGoalDataName } from \"../../redux/actions/goal\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  name: string;\r\n}\r\n\r\nconst goalOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Goal\" },\r\n  { key: \"key2\", text: \"Sub-Goal\" },\r\n];\r\n\r\nfunction GoalDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByName] = useState(params.name);\r\n  const [limitPageLength] = useState(5);\r\n  //   console.log(params.name);\r\n  const [limit_start] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n\r\n  const [goalDetails, setGoalDetails]: any = useState({});\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersByName) {\r\n      filters.push([\"name\", \"=\", filtersByName]);\r\n    }\r\n    fetchGoalDataName(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Goal===>\", response.data);\r\n      setGoalDetails(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setGoalDetails({\r\n      ...goalDetails,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const history = useHistory();\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\r\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\r\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\r\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\r\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\r\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistoryForm = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            disabled={true}\r\n            label=\"ID\"\r\n            value={params.name}\r\n            placeholder=\"Enter your job position\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"position\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            errorMessage={errMsgOrder}\r\n            label=\"Order Number\"\r\n            value={goalDetails.order_no}\r\n            placeholder=\"Enter order number\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"order_no\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Dropdown\r\n            disabled={true}\r\n            errorMessage={errMsgGoalType}\r\n            label=\"Goal Type\"\r\n            placeholder=\"Select goal type\"\r\n            className=\"flexGrow\"\r\n            selectedKey={\r\n              goalOptions.find((item) => item.text === goalDetails.goal_type)\r\n                ?.key\r\n            }\r\n            // onChange={(ev, item) =>\r\n            //   setUpdateGoalData({\r\n            //     ...updateGoalData,\r\n            //     goal_type: item?.text,\r\n            //   })\r\n            // }\r\n            options={goalOptions}\r\n            // styles={dropdownStyles}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            label=\"Parent Goal\"\r\n            value={goalDetails.parent_goal_id}\r\n            placeholder=\"Enter KRA\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"parent_goal_id\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\"></div>\r\n        <div>\r\n          <TextField\r\n            disabled={true}\r\n            errorMessage={errMsgKra}\r\n            label=\"KRA\"\r\n            value={goalDetails.kra}\r\n            placeholder=\"Enter KRA\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"kra\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <div className=\"goal-details\"></div>\r\n          <TextField\r\n            disabled={true}\r\n            errorMessage={errMsgGoal}\r\n            label=\"Goal\"\r\n            value={goalDetails.goal}\r\n            placeholder=\"Enter Goal\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"goal\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            disabled={true}\r\n            errorMessage={errMsgMeasure}\r\n            label=\"Measure\"\r\n            value={goalDetails.measure}\r\n            placeholder=\"Enter Measure\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"measure\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            errorMessage={errMsgWeightage}\r\n            label=\"Weightage\"\r\n            value={goalDetails.weightage}\r\n            placeholder=\"Enter Weightage\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"weightage\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            disabled={true}\r\n            label=\"Target\"\r\n            value={goalDetails.target}\r\n            placeholder=\"Enter Target\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"target\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n        <div className=\"goal-details\">\r\n          <TextField\r\n            label=\"Threshold\"\r\n            disabled={true}\r\n            value={goalDetails.threshold}\r\n            placeholder=\"Enter Threshold\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"threshold\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <TextField\r\n            label=\"Stretch\"\r\n            disabled={true}\r\n            value={goalDetails.stretch}\r\n            placeholder=\"Enter Stretch\"\r\n            styles={textfelidStyle}\r\n            className=\"flexGrow\"\r\n            name=\"stretch\"\r\n            onChange={onChangeInput}\r\n          />\r\n        </div>\r\n\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Back\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.goBack();\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(GoalDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\UpdateAppraisal\\index.tsx",["370","371","372","373","374","375","376","377","378","379","380"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  ITextFieldStyles,\r\n} from \"office-ui-fabric-react/lib/TextField\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport \"./style.css\";\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Separator,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\r\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n  // { key: \"key4\", text: \"Management\" },\r\n];\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction UpdateAppraisal(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const stackTokens = { childrenGap: 10 };\r\n\r\n  const [limitStart] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [orderBy] = useState(\"asc\");\r\n  const [orderByField] = useState(\"id\");\r\n  const [filtersById] = useState(params.appraisalId);\r\n\r\n  const [updateData, setUpdateData]: any = useState({});\r\n\r\n  useEffect(() => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      setUpdateData(response.data[0]);\r\n    });\r\n  }, []);\r\n\r\n  // console.log(\"upadetdata==>\", updateData);\r\n\r\n  // const appraisalList = useSelector((state: RootState) => state.appraisal.appraisalList) || [];\r\n  //   const updateData = appraisalList.find(item => item.id === params.appraisalId);\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      \".ms-TextField-wrapper\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n\r\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    // root: {\r\n    //   marginRight: \"10px\",\r\n    // },\r\n    icon: {\r\n      color: \"rgb(111 144 220)\",\r\n    },\r\n  };\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setUpdateData({\r\n      ...updateData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  // const [dateReview, setDateReview] = useState<Date | null | undefined>(\r\n  //   new Date(updateData.review_from)\r\n  // );\r\n  // const [dateAppraisal, setdDateAppraisal] = useState<Date | null | undefined>(\r\n  //   new Date(updateData.appraisal_to)\r\n  // );\r\n\r\n  // const reviewFromDate = (date: Date | null | undefined): void => {\r\n  //   const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  //   // console.log(\"date==>\", reviewFrequencyDate);\r\n  //   setDateReview(reviewFrequencyDate);\r\n  // };\r\n  // const appraisalToDate = (date: Date | null | undefined): void => {\r\n  //   const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  //   // console.log(\"date==>\", reviewFrequencyDate);\r\n  //   setdDateAppraisal(appraisalDate);\r\n  // };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"key1\", text: \"HR\" },\r\n  //   { key: \"key2\", text: \"Manager\" },\r\n  //   { key: \"key3\", text: \"Employee\" },\r\n  // ];\r\n\r\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n  //   key: \"\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setReviewSearch(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n  // const dispatch = useDispatch();\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const handleUpdateApprisal = () => {\r\n    const updateQuery = {\r\n      ...updateData,\r\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\r\n      description: \"22\",\r\n      route: \"appraisal/BB00002\",\r\n    };\r\n    // console.log(\"updateQuery=>\", updateQuery);\r\n    edit_appraisal(updateQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      if (response?.status === 200) {\r\n        setSuccessModal(true);\r\n      } else {\r\n        setFailedModal(true);\r\n      }\r\n    });\r\n    // .catch((err) => {\r\n    //   console.log(\"Error in btnClick=>\", err);\r\n    // });\r\n  };\r\n\r\n  const renderUpdateForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              disabled\r\n              placeholder=\"ID\"\r\n              value={updateData.id}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={updateData.appraisal_description}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Review From\"\r\n              // value={updateData.review_from}\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={new Date(updateData.review_from)}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, review_from: date })\r\n              }\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired\r\n              label=\"Appraisal To\"\r\n              value={new Date(updateData.appraisal_to)}\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              onSelectDate={(date) =>\r\n                setUpdateData({ ...updateData, appraisal_to: date })\r\n              }\r\n              styles={datePickerStyle}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              selectedKey={\r\n                reviewFrequencyOptions.find(\r\n                  (item) => item.text === updateData.review_frequency\r\n                )?.key\r\n              }\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              onChange={(ev, item) =>\r\n                setUpdateData({ ...updateData, review_frequency: item?.text })\r\n              }\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            required\r\n            selectedKey={\r\n              typeOptions.find((item) => item.text === updateData.type)?.key\r\n            }\r\n            label=\"Type\"\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            onChange={(ev, item) =>\r\n              setUpdateData({ ...updateData, type: item?.text })\r\n            }\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            required\r\n            selectedKey={\r\n              formateTypeOptions.find(\r\n                (item) => item.text === updateData.format_type\r\n              )?.key\r\n            }\r\n            label=\"Format Type\"\r\n            className=\"type-input\"\r\n            onChange={(ev, item) =>\r\n              setUpdateData({ ...updateData, format_type: item?.text })\r\n            }\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            required\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={updateData.appraisal_owner}\r\n            styles={textfelidStyle}\r\n            name=\"appraisal_owner\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.kra_settings_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.kra_settings_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.kra_settings_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.kra_settings_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kra_settings_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={updateData.assessment_tab_goals}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_goals\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={updateData.assessment_tab_competencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_competencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={updateData.assessment_tab_development_plan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_development_plan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={updateData.assessment_tab_summary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessment_tab_summary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Success</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      history.push(\"/home\");\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  Appraisal Updated Successfully\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"OK\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/home\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content\">\r\n                  Somthing went wrong. Please try again\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Go Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Update\"\r\n                allowDisabledFocus\r\n                onClick={handleUpdateApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/home\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            \r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderUpdateForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(UpdateAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\AddAppraisal\\index.tsx",["381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  ITextFieldStyles,\r\n} from \"office-ui-fabric-react/lib/TextField\";\r\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\r\nimport \"./style.css\";\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  Dropdown,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IconButton,\r\n  IDatePickerStrings,\r\n  IDatePickerStyles,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  Label,\r\n  mergeStyleSets,\r\n  Modal,\r\n  PrimaryButton,\r\n  Separator,\r\n} from \"office-ui-fabric-react\";\r\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport Header from \"../../Header\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./style.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\r\n\r\nconst formateTypeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Sales Employees\" },\r\n  { key: \"key3\", text: \"Non Sales Employees\" },\r\n  // { key: \"key4\", text: \"Management\" },\r\n];\r\n\r\nconst reviewFrequencyOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Monthly\" },\r\n  { key: \"key2\", text: \"Yearly\" },\r\n];\r\n\r\nconst typeOptions: IDropdownOption[] = [\r\n  { key: \"key1\", text: \"Annual Appraisal\" },\r\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\r\n];\r\n\r\nconst dropdownStyles: Partial<IDropdownStyles> = {\r\n  dropdown: {\r\n    width: 170,\r\n    border: \"0px\",\r\n  },\r\n};\r\n\r\n// interface ParamTypes {\r\n//   id: string\r\n// }\r\n\r\nfunction AddAppraisal(props: any) {\r\n  // const params = useParams<ParamTypes>();\r\n  // console.log(\"id => \", params.id);\r\n  const stackTokens = { childrenGap: 10 };\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      borderRadius: \"10px\",\r\n      \".ms-TextField-wrapper\": {\r\n        // borderRadius: \"10px\",\r\n      },\r\n\r\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\r\n        // borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const DayPickerStrings: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\r\n    months: [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n\r\n    shortMonths: [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ],\r\n\r\n    days: [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n\r\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n\r\n    goToToday: \"Go to today\",\r\n    prevMonthAriaLabel: \"Go to previous month\",\r\n    nextMonthAriaLabel: \"Go to next month\",\r\n    prevYearAriaLabel: \"Go to previous year\",\r\n    nextYearAriaLabel: \"Go to next year\",\r\n    closeButtonAriaLabel: \"Close date picker\",\r\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\r\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\r\n  };\r\n\r\n  const controlClass = mergeStyleSets({\r\n    control: {\r\n      // margin: \"0 0 15px 0\",\r\n      // maxWidth: \"150px\",\r\n    },\r\n  });\r\n\r\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\r\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\r\n\r\n  const datePickerStyle: Partial<IDatePickerStyles> = {\r\n    icon: {\r\n      color: \"#344f84\",\r\n    },\r\n  };\r\n\r\n  const [claimsData, setClaimsData] = useState({\r\n    id: \"\",\r\n    description: \"\",\r\n    owner: \"\",\r\n    kraSettingGoal: false,\r\n    kraSettingCompetencies: false,\r\n    kraSettingDevelopmentPlan: false,\r\n    kraSettingSummary: false,\r\n    assessmentGoal: false,\r\n    assessmentCompetencies: false,\r\n    assessmentDevelopmentPlan: false,\r\n    assessmentSummary: false,\r\n  });\r\n\r\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [formateType, setFormateType] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  function onChangeCheckbox(\r\n    ev?: React.FormEvent<HTMLElement>,\r\n    isChecked?: boolean\r\n  ) {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: isChecked || false,\r\n    });\r\n  }\r\n\r\n  const onChangeInput = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    const target = ev?.target as HTMLInputElement;\r\n    setClaimsData({\r\n      ...claimsData,\r\n      [target.name]: target.value || \"\",\r\n    });\r\n  };\r\n\r\n  const onChangeType = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setSelectedType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n  // console.log(\"type==>\", selectedType.text )\r\n\r\n  const onChangeReviewFrequency = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewFrequency(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const onChangeFormateType = (\r\n    event?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setFormateType(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      isCurrentItem: true,\r\n      as: \"h4\",\r\n      onClick: _onBreadcrumbItemClicked,\r\n    },\r\n    { text: \"Add Appraisal\", key: \"d3\", as: \"h4\" },\r\n  ];\r\n\r\n  const [dateReview, setDateReview] = useState<Date | undefined>();\r\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\r\n\r\n  const reviewFromDate = (date: Date | null | undefined): void => {\r\n    setDateReview(date || undefined);\r\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n  const appraisalToDate = (date: Date | null | undefined): void => {\r\n    setdDateAppraisal(date || undefined);\r\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const history = useHistory();\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      marginTop: \"-1rem\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n\r\n  // // const rolesOption: IDropdownOption[] = [\r\n  // //   { key: \"employee\", text: \"Employee\" },\r\n  // //   { key: \"manager\", text: \"Manager\" },\r\n  // //   { key: \"hrContent\", text: \"HR content\" },\r\n  // // ];\r\n\r\n  // const [roles, setRoles] = useState<IDropdownOption>({\r\n  //   key: \"employee\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setRoles(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n  // const dispatch = useDispatch();\r\n\r\n  const [errMsg, setErrMsg] = useState(\"\");\r\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\r\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\r\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\r\n  const [errMsgType, setErrMsgType] = useState(\"\");\r\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\r\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\r\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\r\n  const [successModal, setSuccessModal] = useState(false);\r\n  const [failedModal, setFailedModal] = useState(false);\r\n\r\n  const theme = getTheme();\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const handleAddApprisal = () => {\r\n    if (claimsData.id === \"\") {\r\n      setErrMsg(\"ID is required\");\r\n    }\r\n    if (claimsData.description === \"\") {\r\n      setErrMsgDescription(\"Description is required\");\r\n    }\r\n    if (claimsData.owner === \"\") {\r\n      setErrMsgOwner(\"Owner is required\");\r\n    }\r\n    if (formateType.text === \"\") {\r\n      setErrMsgFormatType(\"Select format Type\");\r\n    }\r\n    if (reviewFrequency.text === \"\") {\r\n      setErrMsgReviewFrequency(\"Select review Frequency\");\r\n    }\r\n    if (selectedType.text === \"\") {\r\n      setErrMsgType(\"Select type\");\r\n    }\r\n    if (dateReview === null) {\r\n      setErrMsgReviewDate(\"Select review date\");\r\n    }\r\n    const addQuery = {\r\n      id: claimsData.id,\r\n      appraisal_description: claimsData.description,\r\n      description: \"22\",\r\n      format_type: formateType.text,\r\n      review_frequency: reviewFrequency.text,\r\n      type: selectedType.text,\r\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\r\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\r\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\r\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\r\n      assessment_tab_goals: claimsData.assessmentGoal,\r\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\r\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\r\n      assessment_tab_summary: claimsData.assessmentSummary,\r\n      route: \"appraisal/BB00002\",\r\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\r\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\r\n      appraisal_owner: claimsData.owner,\r\n    };\r\n    // console.log(\"addQueary=>\", addQuery);\r\n    add_apprisal(addQuery).then((response) => {\r\n      console.log(\"response=>\", response.data);\r\n      if (response?.status === 200) {\r\n        setSuccessModal(true);\r\n        // history.push(\"/home\");\r\n      } else {\r\n        // console.log(\"failed==>\", failedModal);\r\n        setFailedModal(true);\r\n      }\r\n\r\n      // else {\r\n      //   console.log(\"then error msg btnClick==>\", response);\r\n      // }\r\n    });\r\n    // .catch((err) => {\r\n    //   console.log(\"Error in btnClick=>\", err);\r\n    // });\r\n  };\r\n\r\n  const renderForm = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"form-container\">\r\n          <div className=\"row\">\r\n            <TextField\r\n              required\r\n              placeholder=\"ID\"\r\n              value={claimsData.id}\r\n              errorMessage={errMsg}\r\n              name=\"id\"\r\n              label=\"Id\"\r\n              onChange={onChangeInput}\r\n              className=\"flexGrowTextInput\"\r\n            />\r\n            <TextField\r\n              required\r\n              placeholder=\"Description\"\r\n              label=\"Description\"\r\n              value={claimsData.description}\r\n              errorMessage={errMsgDescription}\r\n              // styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"description\"\r\n              onChange={onChangeInput}\r\n            />\r\n          </div>\r\n          {/* <div className=\"input-form\"></div> */}\r\n          <div className=\"row\">\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"Review From\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeek}\r\n              strings={DayPickerStrings}\r\n              value={dateReview}\r\n              onSelectDate={reviewFromDate}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n              styles={datePickerStyle}\r\n            />\r\n            <DatePicker\r\n              isRequired={true}\r\n              label=\"Appraisal To\"\r\n              className={`${controlClass.control} flexGrow`}\r\n              firstDayOfWeek={firstDayOfWeekAppraisal}\r\n              strings={DayPickerStringsAppraisal}\r\n              onSelectDate={appraisalToDate}\r\n              styles={datePickerStyle}\r\n              value={dateAppraisal}\r\n              placeholder=\"Select a date\"\r\n              ariaLabel=\"Select a date\"\r\n            />\r\n            <Dropdown\r\n              required\r\n              errorMessage={errMsgReviewFrequency}\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              className=\"flexGrow\"\r\n              onChange={onChangeReviewFrequency}\r\n              options={reviewFrequencyOptions}\r\n              // styles={dropdownStyles}\r\n            />\r\n          </div>\r\n          <Dropdown\r\n            required\r\n            label=\"Type\"\r\n            errorMessage={errMsgType}\r\n            placeholder=\"Select Type\"\r\n            className=\"type-input\"\r\n            options={typeOptions}\r\n            onChange={onChangeType}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <Dropdown\r\n            required\r\n            label=\"Format Type\"\r\n            errorMessage={errMsgFormatType}\r\n            className=\"type-input\"\r\n            onChange={onChangeFormateType}\r\n            placeholder=\"Select Format Type\"\r\n            options={formateTypeOptions}\r\n            // styles={typeDropdownStyles}\r\n          />\r\n          <TextField\r\n            required\r\n            label=\"Owner\"\r\n            placeholder=\"Owner\"\r\n            value={claimsData.owner}\r\n            // styles={textfelidStyle}\r\n            errorMessage={errMsgOwner}\r\n            name=\"owner\"\r\n            onChange={onChangeInput}\r\n          />\r\n          <Separator />\r\n          <div className=\"rowCheckBox\">\r\n            <div>\r\n              <Label>KRA Settings Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Job History\"}\r\n                title={\"Competencies\"}\r\n                checked={claimsData.kraSettingCompetencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingCompetencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={claimsData.kraSettingGoal}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingGoal\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Training/ Development Plan\"}\r\n                title={\"Development Plans\"}\r\n                checked={claimsData.kraSettingDevelopmentPlan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingDevelopmentPlan\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              {/* <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={claimsData.kraSettingSummary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"kraSettingSummary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              {/* <Label>Assessment Tabs: </Label>\r\n              <Checkbox\r\n                label={\"Goals\"}\r\n                title={\"Goals\"}\r\n                checked={claimsData.assessmentGoal}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentGoal\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Competencies\"}\r\n                title={\"Competencies\"}\r\n                checked={claimsData.assessmentCompetencies}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentCompetencies\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Development Plans\"}\r\n                title={\"Development Plans\"}\r\n                checked={claimsData.assessmentDevelopmentPlan}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentSummary\"\r\n                onChange={onChangeCheckbox}\r\n              />\r\n              <Checkbox\r\n                label={\"Summary\"}\r\n                title={\"Summary\"}\r\n                checked={claimsData.assessmentSummary}\r\n                className=\"flexGrowCheckBox\"\r\n                name=\"assessmentSummary\"\r\n                onChange={onChangeCheckbox}\r\n              /> */}\r\n            </div>\r\n            <div>\r\n              <Modal\r\n                titleAriaId={\"Title\"}\r\n                isOpen={successModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Success</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setSuccessModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content-success\">\r\n                  Appraisal Added Successfully\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"OK\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      history.push(\"/home\");\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n              <Modal\r\n                titleAriaId={\"Title failed\"}\r\n                isOpen={failedModal}\r\n                isBlocking={false}\r\n                styles={modalStyle}\r\n                // containerClassName={contentStyles.container}\r\n              >\r\n                <div className=\"modal-header-local\">\r\n                  <div className=\"modal-title\">Error</div>\r\n                  <IconButton\r\n                    styles={iconButtonStyles}\r\n                    iconProps={cancelIcon}\r\n                    ariaLabel=\"Close popup modal\"\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-content\">\r\n                  Somthing went wrong. Please try again\r\n                </div>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  <PrimaryButton\r\n                    text=\"Go Back\"\r\n                    allowDisabledFocus\r\n                    onClick={() => {\r\n                      setFailedModal(false);\r\n                    }}\r\n                    disabled={false}\r\n                    checked={false}\r\n                  />\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n          <Stack\r\n            horizontal\r\n            tokens={stackTokens}\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Add Appraisal\"\r\n                allowDisabledFocus\r\n                onClick={handleAddApprisal}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{\r\n                marginTop: \"15px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                disabled={false}\r\n                onClick={() => {\r\n                  history.push(\"/home\");\r\n                }}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Stack>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderForm()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(AddAppraisal);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\Appraisal\\index.tsx",["392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  DetailsList,\r\n  DetailsRow,\r\n  IColumn,\r\n  IDetailsListProps,\r\n  IDetailsListStyles,\r\n  IDetailsRowStyles,\r\n} from \"office-ui-fabric-react/lib/DetailsList\";\r\nimport \"office-ui-fabric-react/dist/css/fabric.css\";\r\nimport {\r\n  PrimaryButton,\r\n  getTheme,\r\n  TextField,\r\n  Dropdown,\r\n  IDropdownOption,\r\n  IDropdownStyles,\r\n  Link,\r\n  Spinner,\r\n  SpinnerSize,\r\n  Modal,\r\n  IconButton,\r\n  IModalStyles,\r\n  IIconProps,\r\n} from \"office-ui-fabric-react\";\r\nimport {\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\r\nimport Header from \"../../Header\";\r\n// import Panel from \"../../components/Panel\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\";\r\n\r\nimport \"./style.css\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport {\r\n  edit_appraisal,\r\n  fetchAppraisalData,\r\n  fetchAppraisalDataById,\r\n} from \"../../redux/actions/apprisal\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { delete_appraisal } from \"../../redux/actions/apprisal\";\r\n// import { roleType } from \"../../redux/actions/roleType\";\r\n\r\ninterface ParamTypes {\r\n  appraisalId: string;\r\n}\r\n\r\nfunction Appraisal(props: any) {\r\n  // const [hasMoreRecord, setHasMoreRecord] = useState(true);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [limitPageLength, setLimitPageLength] = useState(5);\r\n  const [orderBy, setOrderBy] = useState(\"asc\");\r\n  const [orderByField, setOrderByField] = useState(\"id\");\r\n  const [filtersById, setFiltersById] = useState(\"\");\r\n  const [filtersByDescription, setFiltersByDescription] = useState(\"\");\r\n  const [filtersByReviewFreq, setFiltersByReviewFreq] = useState(\"\");\r\n  const [filtersByAppraisal, setFiltersByAppraisal] = useState(\"\");\r\n  const [filtersByFormat, setFiltersByFormat] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const appraisal = useSelector((state: RootState) => state.appraisal);\r\n  const { appraisalList, isLoading, count, total_count } = appraisal;\r\n\r\n  const params = useParams<ParamTypes>();\r\n\r\n  // console.log(\"data apppp=>\", appraisalList);\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"id\", \"like\", filtersById]);\r\n    }\r\n    if (filtersByDescription) {\r\n      filters.push([\"description\", \"like\", filtersByDescription]);\r\n    }\r\n    if (filtersByReviewFreq) {\r\n      filters.push([\"review_frequency\", \"=\", filtersByReviewFreq]);\r\n    }\r\n    if (filtersByAppraisal) {\r\n      filters.push([\"type\", \"=\", filtersByAppraisal]);\r\n    }\r\n    if (filtersByFormat) {\r\n      filters.push([\"format_type\", \"=\", filtersByFormat]);\r\n    }\r\n    dispatch(\r\n      fetchAppraisalData(\r\n        limitStart,\r\n        limitPageLength,\r\n        `${orderByField} ${orderBy}`,\r\n        JSON.stringify(filters)\r\n      )\r\n    );\r\n    // fetchAppraisalData(\r\n    //   limitStart,\r\n    //   limitPageLength,\r\n    //   `${orderByField} ${orderBy}`,\r\n    //   JSON.stringify(filters)\r\n    // ).then((response: any) => {\r\n    //   // setList(response.data);\r\n    //   // if (response.data.length == limitPageLength) {\r\n    //   //   setHasMoreRecord(true);\r\n    //   // } else {\r\n    //   //   setHasMoreRecord(false);\r\n    //   // }\r\n    // })\r\n    // console.log(\"filters==>\", filters)\r\n  }, [\r\n    limitStart,\r\n    limitPageLength,\r\n    orderBy,\r\n    filtersById,\r\n    filtersByDescription,\r\n    filtersByReviewFreq,\r\n    filtersByAppraisal,\r\n    filtersByFormat,\r\n  ]);\r\n\r\n  // const params = useParams<ParamTypes>();\r\n  // console.log(\"id => \", params.id);\r\n\r\n  const columns: IColumn[] = [\r\n    {\r\n      key: \"01\",\r\n      name: \"ID\",\r\n      fieldName: \"id\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSorted: true,\r\n      className: \"idColumn\",\r\n      isSortedDescending: false,\r\n      sortAscendingAriaLabel: \"Sorted A to Z\",\r\n      isRowHeader: true,\r\n      onColumnClick: _onColumnClick,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"03\",\r\n    //   name: \"Name\",\r\n    //   fieldName: \"name\",\r\n    //   minWidth: 10,\r\n    //   maxWidth: 110,\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   onColumnClick: _onColumnClick,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"04\",\r\n      name: \"Description\",\r\n      fieldName: \"appraisal_description\",\r\n      minWidth: 100,\r\n      maxWidth: 200,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Review From\",\r\n      fieldName: \"review_from\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"06\",\r\n      name: \"Appraisal Type\",\r\n      fieldName: \"type\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: \"Format Type\",\r\n      fieldName: \"format_type\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"Appraisal To\",\r\n      fieldName: \"appraisal_to\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    // {\r\n    //   key: \"07\",\r\n    //   name: \"Owner\",\r\n    //   fieldName: \"owner\",\r\n    //   minWidth: 10,\r\n    //   maxWidth: 170,\r\n    //   isSortedDescending: false,\r\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\r\n    //   isRowHeader: true,\r\n    //   onColumnClick: _onColumnClick,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"09\",\r\n      name: \"Review Frequency\",\r\n      fieldName: \"review_frequency\",\r\n      minWidth: 50,\r\n      maxWidth: 160,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"02\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 110,\r\n      maxWidth: 110,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              viewAppraisal(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateAppriasal(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              deleteAppraisal(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [showDelete, setShowDelete] = useState(false);\r\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const [deleteItemId, setDeleteItemId] = useState(null);\r\n  const [updateData, setUpdateData]: any = useState({});\r\n\r\n  const deleteAppraisal = (item: any) => {\r\n    // setDeleteItemId(item.id);\r\n    // console.log(\"item id\", item)\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"id\", \"like\", item.name]);\r\n    }\r\n    fetchAppraisalDataById(\r\n      limitStart,\r\n      limitPageLength,\r\n      `${orderByField} ${orderBy}`,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(response.data)\r\n      setUpdateData(response.data[0]);\r\n    });\r\n    setShowDelete(true);\r\n  };\r\n\r\n  // console.log(\"deleteItemId=>\", updateData)\r\n\r\n  const handleDeleteAppraisal = () => {\r\n    const deleteQuery = {\r\n      id: updateData.id,\r\n      is_deleted: 1,\r\n    };\r\n    edit_appraisal(deleteQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      setShowDelete(false);\r\n      setShowDeleteSuccess(true);\r\n      setDeleteItemId(null);\r\n      setUpdateData(null);\r\n    });\r\n  };\r\n\r\n  const viewAppraisal = (item: any) => {\r\n    history.push(`/appraisal/view/${item.id}`);\r\n  };\r\n\r\n  const updateAppriasal = (item: any) => {\r\n    // localStorage.setItem('apprisal_data', JSON.stringify(item));\r\n    history.push(`/appraisal/update/${item.id}`);\r\n  };\r\n\r\n  const _onBreadcrumbItemClicked = () => {};\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\", onClick: _onBreadcrumbItemClicked },\r\n    { text: \"Appraisal\", key: \"d2\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n\r\n  const handleSearchClick = () => {\r\n    setFiltersById(`${searchById}%`);\r\n    setFiltersByDescription(`${searchByDescription}%`);\r\n    setFiltersByReviewFreq(`${reviewSearch?.key || \"\"}`);\r\n    setFiltersByAppraisal(`${AppraisalSearch?.key || \"\"}`);\r\n    setFiltersByFormat(`${formatSearch?.key || \"\"}`);\r\n    setLimitSTart(0);\r\n    setCurentPage(0);\r\n  };\r\n\r\n  function _onColumnClick(\r\n    ev?: React.MouseEvent<HTMLElement>,\r\n    column?: IColumn\r\n  ): void {\r\n    // console.log('column', column)\r\n    if (column?.fieldName === orderByField) {\r\n      if (orderBy === \"asc\") {\r\n        setOrderBy(\"desc\");\r\n      } else {\r\n        setOrderBy(\"asc\");\r\n      }\r\n    } else {\r\n      setOrderByField(column?.fieldName || \"id\");\r\n    }\r\n  }\r\n\r\n  const controlStyles = {\r\n    root: {\r\n      margin: \"0 10px 20px 0\",\r\n      maxWidth: \"300px\",\r\n      // borderRadius: \"20px\",\r\n    },\r\n\r\n    wrapper: {\r\n      \".ms-TextField-fieldGroup fieldGroup-91\": {\r\n        borderRadius: \"10px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const [currentPage, setCurentPage] = useState(0);\r\n\r\n  const [searchById, setSearchById] = useState(\"\");\r\n  const [searchByDescription, setSearchByDescription] = useState(\"\");\r\n  // const [appraisalToSearch, setAppraisalToSearch] = useState(\"\");\r\n  // const [role, setRole] = useState<IDropdownOption>({\r\n  //   key: \"employee\",\r\n  //   text: \"\",\r\n  // });\r\n\r\n  const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [AppraisalSearch, setAppraisalSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const [formatSearch, setForamtSearch] = useState<IDropdownOption>({\r\n    key: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const itemSearch = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchById(text || \"\");\r\n    // if(text === \"\" && searchById !== \"\") {\r\n    //   setFiltersById(\"\");\r\n    //   setLimitSTart(0);\r\n    //   setCurentPage(0)\r\n    // }\r\n  };\r\n\r\n  const itemSearchDescription = (\r\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    text?: string\r\n  ): void => {\r\n    setSearchByDescription(text || \"\");\r\n    // if(text === \"\" && searchById !== \"\") {\r\n    //   setFiltersById(\"\");\r\n    //   setLimitSTart(0);\r\n    //   setCurentPage(0)\r\n    // }\r\n  };\r\n\r\n  const itemSearchReview = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setReviewSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const itemSearchAppraisal = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setAppraisalSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const itemSearchFormatType = (\r\n    ev?: React.FormEvent<HTMLDivElement>,\r\n    item?: IDropdownOption\r\n  ): void => {\r\n    setForamtSearch(\r\n      item || {\r\n        key: \"\",\r\n        text: \"\",\r\n      }\r\n    );\r\n  };\r\n\r\n  // const handleRoles = (\r\n  //   ev?: React.FormEvent<HTMLDivElement>,\r\n  //   item?: IDropdownOption\r\n  // ): void => {\r\n  //   setRole(\r\n  //     item || {\r\n  //       key: \"\",\r\n  //       text: \"\",\r\n  //     }\r\n  //   );\r\n  // };\r\n\r\n  // const itemSearchApprisalTo = (\r\n  //   ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  //   text?: string\r\n  // ): void => {\r\n  //   setAppraisalToSearch(text || \"\");\r\n  //   // if(text === \"\" && searchById !== \"\") {\r\n  //   //   setFiltersById(\"\");\r\n  //   //   setLimitSTart(0);\r\n  //   //   setCurentPage(0)\r\n  //   // }\r\n  // };\r\n\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      backgroundColor: \"#344f84\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const searchOptions: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Yearly\", text: \"Yearly\" },\r\n    { key: \"Monthly\", text: \"Monthly\" },\r\n  ];\r\n\r\n  const searchFormatType: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Sales Employees\", text: \"Sales Employees\" },\r\n    { key: \"Non Sales Employees\", text: \"Non Sales Employees\" },\r\n  ];\r\n\r\n  const searchAppraisal: IDropdownOption[] = [\r\n    { key: \"\", text: \"Select\" },\r\n    { key: \"Annual Appraisal\", text: \"Annual Appraisal\" },\r\n    { key: \"Quarterly Appraisal\", text: \"Quarterly Appraisal\" },\r\n  ];\r\n\r\n  // const rolesOption: IDropdownOption[] = [\r\n  //   { key: \"employee\", text: \"Employee\" },\r\n  //   { key: \"manager\", text: \"Manager\" },\r\n  //   { key: \"hrContact\", text: \"HR Contact\" },\r\n  // ];\r\n\r\n  const dropdownStyles: Partial<IDropdownStyles> = {\r\n    dropdown: {\r\n      width: 170,\r\n      border: \"0px\",\r\n    },\r\n  };\r\n\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n  const history = useHistory();\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const [advanceSearch, setAdvanceSearch] = useState(false);\r\n\r\n  const handleAdvanceSearch = () => {\r\n    if (advanceSearch == false) {\r\n      setAdvanceSearch(true);\r\n    }\r\n    if (advanceSearch == true) {\r\n      setAdvanceSearch(false);\r\n    }\r\n  };\r\n\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const renderRow: IDetailsListProps[\"onRenderRow\"] = (props) => {\r\n    const customStyles: Partial<IDetailsRowStyles> = {};\r\n    if (props) {\r\n      if (props.itemIndex % 2 === 0) {\r\n        // Every other row renders with a different background color\r\n        customStyles.root = { backgroundColor: theme.palette.themeLighterAlt };\r\n      }\r\n\r\n      return <DetailsRow {...props} styles={customStyles} />;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderNoData = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"center\",\r\n          marginTop: \"20px\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <PrimaryButton\r\n          text=\"New Appraisal\"\r\n          iconProps={{ iconName: \"Add\" }}\r\n          allowDisabledFocus\r\n          onClick={() => {\r\n            history.push(\"/addApprisal\");\r\n          }}\r\n          style={{ marginLeft: \"auto\", alignSelf: \"center\" }}\r\n          disabled={false}\r\n          checked={false}\r\n        />\r\n        <Text\r\n          style={{\r\n            color: \"#aaa\",\r\n            textAlign: \"center\",\r\n            padding: 50,\r\n            fontSize: 30,\r\n          }}\r\n        >\r\n          No Appraisal Data Found\r\n        </Text>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // console.log(\"appraisal data=>>\", appraisalList);\r\n\r\n  const renderData = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card advance-search-section\">\r\n          <div className=\"searchBarClass\">\r\n            <TextField\r\n              label=\"ID\"\r\n              onChange={itemSearch}\r\n              placeholder=\"Enter ID\"\r\n              className=\"searchInput\"\r\n              styles={controlStyles}\r\n            />\r\n            <TextField\r\n              label=\"Description\"\r\n              className=\"searchInput\"\r\n              onChange={itemSearchDescription}\r\n              placeholder=\"Enter Description\"\r\n              styles={controlStyles}\r\n            />\r\n            <Dropdown\r\n              label=\"Review Frequency\"\r\n              placeholder=\"Select\"\r\n              options={searchOptions}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchReview}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n            <div\r\n              style={{ marginTop: \"30px\", cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                handleAdvanceSearch();\r\n                // setAdvanceSearch(true);\r\n                // setAdvanceSearch(false);\r\n              }}\r\n            >\r\n              <MoreHorizIcon style={{ color: \"#344f84\", marginLeft: \"20px\" }} />\r\n            </div>\r\n            <PrimaryButton\r\n              iconProps={{ iconName: \"Search\" }}\r\n              onClick={handleSearchClick}\r\n              style={{\r\n                marginLeft: \"10px\",\r\n                alignSelf: \"center\",\r\n                marginTop: \"8px\",\r\n              }}\r\n            />\r\n            <PrimaryButton\r\n              text=\"New Appraisal\"\r\n              iconProps={{ iconName: \"Add\" }}\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/addApprisal\");\r\n              }}\r\n              style={{\r\n                marginLeft: \"auto\",\r\n                alignSelf: \"center\",\r\n                marginTop: \"8px\",\r\n              }}\r\n              disabled={false}\r\n              checked={false}\r\n            />\r\n          </div>\r\n          <div\r\n            className={\r\n              advanceSearch == true ? `advanceSearch` : `advanceSearchNull`\r\n            }\r\n          >\r\n            <Dropdown\r\n              label=\"Appraisal Type\"\r\n              placeholder=\"Select\"\r\n              options={searchAppraisal}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchAppraisal}\r\n              style={{ padding: \"0px\", marginRight: \"10px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n            <Dropdown\r\n              label=\"Format Type\"\r\n              placeholder=\"Select\"\r\n              options={searchFormatType}\r\n              className=\"reviewFrequency\"\r\n              onChange={itemSearchFormatType}\r\n              style={{ padding: \"0px\" }}\r\n              styles={dropdownStyles}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {isLoading ? (\r\n          <Spinner\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              padding: \"50px\",\r\n              color: \"#344f84\",\r\n            }}\r\n            size={SpinnerSize.large}\r\n          />\r\n        ) : appraisalList.length === 0 ? (\r\n          renderNoData()\r\n        ) : (\r\n          <div className=\"card\">\r\n            <DetailsList\r\n              styles={listStyle}\r\n              items={appraisalList}\r\n              className=\"detail-list\"\r\n              // onRenderRow={renderRow}\r\n              columns={columns}\r\n              selectionMode={0}\r\n            />\r\n            <div className=\"pagination-style\">\r\n              <Pagination\r\n                format=\"buttons\"\r\n                // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n                selectedPageIndex={currentPage}\r\n                // pageCount={hasMoreRecord ? currentPage + 2 : currentPage + 1}\r\n                pageCount={Math.ceil(total_count / limitPageLength)}\r\n                // itemsCount\r\n                itemsPerPage={limitPageLength}\r\n                // itemsPerPage={appraisalList.count}\r\n                // pageRangeDisplayed= {currentPage}\r\n                // totalItemCount={limitPageLength * 2}\r\n                totalItemCount={total_count}\r\n                // numberOfPageButton={2}\r\n                // lastPageIconProps={{\r\n                //   iconName: \"DoubleChevronRight\",\r\n                //   style: { display: \"none\" },\r\n                // }}\r\n                // firstPageIconProps={{\r\n                //   iconName: \"ChevronRight\",\r\n                //   style: { display: \"none\" },\r\n                // }}\r\n                onPageChange={(page) => {\r\n                  setLimitSTart(page * limitPageLength);\r\n                  setCurentPage(page);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDelete}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Delete</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Are you sure you want to delete this item?\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Delete\"\r\n                allowDisabledFocus\r\n                onClick={handleDeleteAppraisal}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccess}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Item successfully Deleted.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Okay\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  // console.log(\"data=>\", appraisal);\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            \r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderData()}</div>\r\n        {/* <div className=\"right-container\"></div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(Appraisal);\r\n\r\n// const styles = {\r\n//   advanceSearch:{\r\n//     dispaly:\"flex\"\r\n//   }\r\n// }\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\navigation.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Views\\EmployeeDetails\\index.tsx",["408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429"],"import {\r\n  DetailsList,\r\n  getTheme,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IColumn,\r\n  IconButton,\r\n  IDetailsListStyles,\r\n  IIconProps,\r\n  IModalStyles,\r\n  ITextFieldStyles,\r\n  Label,\r\n  Link,\r\n  Modal,\r\n  Pivot,\r\n  PivotItem,\r\n  PivotLinkFormat,\r\n  PrimaryButton,\r\n  Stack,\r\n  Text,\r\n  TextField,\r\n} from \"office-ui-fabric-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\r\nimport Header from \"../../Header\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  fetchJobHistory,\r\n  update_JobHistory,\r\n} from \"../../redux/actions/jobHistory\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\nimport { Pagination } from \"@uifabric/experiments\";\r\nimport jobHistory from \"../../redux/reducers/jobHistory\";\r\nimport JobHistoryDetails from \"../JobHistoryDetails\";\r\nimport {\r\n  fetchGoalData,\r\n  fetchGoalDataName,\r\n  update_goals,\r\n} from \"../../redux/actions/goal\";\r\nimport { fetchDevelopmentPlan } from \"../../redux/actions/developmentPlan\";\r\nimport \"./style.css\";\r\n\r\ninterface ParamTypes {\r\n  employeeId: string;\r\n  appraisalId: string;\r\n}\r\n\r\nfunction EmployeeDetails(props: any) {\r\n  const params = useParams<ParamTypes>();\r\n  const [doctype] = useState(\"EmployeeAppraisal\");\r\n  const [limit_start] = useState(0);\r\n  const [limit] = useState(10);\r\n  const [filtersById] = useState(params.employeeId);\r\n  const [filtersByApprisal] = useState(params.appraisalId);\r\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\r\n\r\n  const [employeeData, setEmployeeData]: any = useState({});\r\n  const history = useHistory();\r\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\r\n\r\n  const [currentPage, setCurentPage] = useState(0);\r\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\r\n  const [limitPageLength] = useState(5);\r\n  const [limitPageLengthGoal] = useState(5);\r\n  const [limitStart, setLimitSTart] = useState(0);\r\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\r\n\r\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\r\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\r\n  const [limitPageLengthDevelopment] = useState(5);\r\n  const [developmentData, setDevelopmentData]: any = useState({});\r\n\r\n  const [goalData, setGoalData]: any = useState({});\r\n  const [goalCount, setGoalCount] = useState(0);\r\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\r\n  const [tariningPlan, setTrainingPlan] = useState([\r\n    {\r\n      development: \"\",\r\n      remark: \"\",\r\n    },\r\n    {\r\n      development: \"\",\r\n      remark: \"\",\r\n    },\r\n    {\r\n      development: \"\",\r\n      remark: \"\",\r\n    },\r\n    {\r\n      development: \"\",\r\n      remark: \"\",\r\n    },\r\n    {\r\n      development: \"\",\r\n      remark: \"\",\r\n    },\r\n  ]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    if (filtersByApprisal) {\r\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\r\n    }\r\n    fetchEmployeeDataByID(\r\n      doctype,\r\n      limit_start,\r\n      limit,\r\n      roleType,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      setEmployeeData(response.data[0]);\r\n    });\r\n  }, [doctype, limit_start, limit, roleType]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchJobHistory(\r\n      roleType,\r\n      JSON.stringify(filters),\r\n      limitStart,\r\n      limitPageLength\r\n    ).then((response) => {\r\n      // console.log(\"response of job history=>\", response);\r\n      setEmployeeDetails(response.data);\r\n      setCount(response.count);\r\n      setTotalCount(response.total_count);\r\n    });\r\n  }, [roleType, limitStart, limitPageLength]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchGoalData(\r\n      limitStartGoal,\r\n      limitPageLengthGoal,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Goal===>\", response);\r\n      setGoalData(response.data);\r\n      setGoalCount(response.count);\r\n      setGoalTotalCount(response.total_count);\r\n    });\r\n  }, [limitStartGoal, limitPageLengthGoal]);\r\n\r\n  useEffect((): void => {\r\n    const filters = [];\r\n    if (filtersById) {\r\n      filters.push([\"employee_id\", \"=\", filtersById]);\r\n    }\r\n    fetchDevelopmentPlan(\r\n      limitStartDevelopment,\r\n      limitPageLengthDevelopment,\r\n      orderByDevelopment,\r\n      JSON.stringify(filters)\r\n    ).then((response) => {\r\n      // console.log(\"response of Development===>\", response);\r\n      setDevelopmentData(response.data);\r\n    });\r\n  }, [limitStartGoal, limitPageLengthGoal]);\r\n  const onBreadcrumbAppraisalClicked = () => {\r\n    history.push(\"/home\");\r\n  };\r\n  const onBreadcrumbGoalsettingClicked = () => {\r\n    history.push(\"/appraisal/goalsetting\");\r\n  };\r\n  const itemsWithHeading: IBreadcrumbItem[] = [\r\n    { text: \"Performance\", key: \"d1\" },\r\n    {\r\n      text: \"Appraisal\",\r\n      key: \"d2\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbAppraisalClicked,\r\n    },\r\n    {\r\n      text: \"Goal Setting\",\r\n      key: \"d3\",\r\n      as: \"h4\",\r\n      onClick: onBreadcrumbGoalsettingClicked,\r\n    },\r\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\r\n  ];\r\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n    root: {\r\n      margin: \"0px\",\r\n      padding: \"0px\",\r\n      marginTop: \"-10px\",\r\n    },\r\n    itemLink: {\r\n      fontSize: \"20px\",\r\n    },\r\n  };\r\n  const userName = props.userData.UserData[0].name;\r\n  const userId = props.userData.UserData[0].id;\r\n  const dateNow = new Date().toLocaleDateString();\r\n  const timeNow = new Date().toLocaleTimeString();\r\n\r\n  const textfelidStyle: Partial<ITextFieldStyles> = {\r\n    root: {\r\n      //   width: \"50px\",\r\n    },\r\n  };\r\n\r\n  const updateJobhistory = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\r\n    );\r\n  };\r\n\r\n  const jobHistoryDetails = (item: any) => {\r\n    history.push(\r\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\r\n    );\r\n  };\r\n\r\n  const handleDevelopemntChange = (\r\n    index: number | undefined,\r\n    value: string | undefined\r\n  ) => {\r\n    setTrainingPlan(\r\n      tariningPlan.map((item, i) =>\r\n        index === i\r\n          ? {\r\n              ...item,\r\n              development: value || \"\",\r\n            }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const columnsJobHistory: IColumn[] = [\r\n    // {\r\n    //   key: \"02\",\r\n    //   name: \"Appraisal ID\",\r\n    //   fieldName: \"appraisal_id\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 90,\r\n    //   isSortedDescending: false,\r\n    //   isRowHeader: true,\r\n    //   isResizable: false,\r\n    // },\r\n    // {\r\n    //   key: \"03\",\r\n    //   name: \"Employee ID\",\r\n    //   fieldName: \"employee_id\",\r\n    //   minWidth: 50,\r\n    //   maxWidth: 80,\r\n    //   isRowHeader: true,\r\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\r\n    //   isResizable: false,\r\n    // },\r\n    {\r\n      key: \"06\",\r\n      name: \"Position Held\",\r\n      fieldName: \"position_held\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Place of Posting\",\r\n      fieldName: \"place_of_posting\",\r\n      minWidth: 50,\r\n      maxWidth: 110,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"09\",\r\n      name: \"From Date\",\r\n      fieldName: \"from_date\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"To Date\",\r\n      fieldName: \"to_date\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: \"Key Responsibilities\",\r\n      fieldName: \"key_responsibilities\",\r\n      minWidth: 60,\r\n      maxWidth: 350,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"01\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 100,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              jobHistoryDetails(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateJobhistory(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons \"\r\n            onClick={() => {\r\n              deleteJobHistoryData(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [jobHistoryUpdate, setJobHistoryUpdateData]: any = useState({});\r\n  const [showDeleteSuccessJob, setShowDeleteSuccessJob] = useState(false);\r\n  const [showDeleteJob, setShowDeleteJob] = useState(false);\r\n  const [deleteItemJobName, setDeleteItemJobName] = useState(null);\r\n\r\n  const deleteJobHistoryData = (item: any) => {\r\n    setDeleteItemId(item.name);\r\n    // console.log(\"item id\", item.name);\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"name\", \"=\", item.name]);\r\n    }\r\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\r\n      //   console.log(\"update response =>.>>>\", response.data);\r\n      setJobHistoryUpdateData(response.data[0]);\r\n    });\r\n    setShowDeleteJob(true);\r\n  };\r\n\r\n  // console.log(\"deleteItemId=>\", updateData)\r\n\r\n  const handleDeleteJobhistory = () => {\r\n    const deleteQuery = {\r\n      name: jobHistoryUpdate.name,\r\n      is_deleted: 1,\r\n    };\r\n    update_JobHistory(deleteQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      setShowDeleteJob(false);\r\n      setShowDeleteSuccessJob(true);\r\n      setDeleteItemJobName(null);\r\n      setJobHistoryUpdateData(null);\r\n    });\r\n  };\r\n\r\n  const columnsTraning: IColumn[] = [\r\n    {\r\n      key: \"1\",\r\n      name: \"S.No.\",\r\n      fieldName: \"serial_no\",\r\n      minWidth: 20,\r\n      maxWidth: 40,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n      // onRender: (item, index) => (index || 0) + 1,\r\n    },\r\n    {\r\n      key: \"02\",\r\n      name: \"Development Plan/Training Needs\",\r\n      fieldName: \"development_plan\",\r\n      minWidth: 60,\r\n      maxWidth: 550,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n      onRender: (item, index) => (\r\n        <div>\r\n          <TextField\r\n            multiline\r\n            rows={3}\r\n            value={item.development_plan}\r\n            onChange={(\r\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n              text?: string\r\n            ) => handleDevelopemntChange(index, text)}\r\n            resizable={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"03\",\r\n      name: \"Remark by Appraiser\",\r\n      fieldName: \"reviewer_remarks\",\r\n      minWidth: 80,\r\n      maxWidth: 350,\r\n      isRowHeader: true,\r\n      onRender: (item, index) => (\r\n        <div>\r\n          <TextField\r\n            readOnly={true}\r\n            multiline\r\n            rows={3}\r\n            value={item.reviewer_remarks}\r\n            resizable={false}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const columnsGoal: IColumn[] = [\r\n    {\r\n      key: \"02\",\r\n      name: \"S.No.\",\r\n      fieldName: \"order_no\",\r\n      minWidth: 20,\r\n      maxWidth: 50,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"11\",\r\n      name: \"Goal ID\",\r\n      fieldName: \"name\",\r\n      minWidth: 40,\r\n      maxWidth: 60,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"03\",\r\n      name: \"KRA\",\r\n      fieldName: \"kra\",\r\n      minWidth: 50,\r\n      maxWidth: 120,\r\n      isRowHeader: true,\r\n      sortDescendingAriaLabel: \"Sorted Z to A\",\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"04\",\r\n      name: \"\",\r\n      fieldName: \"goal_type\",\r\n      minWidth: 10,\r\n      maxWidth: 30,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n      onRender: (item) => (\r\n        <div>\r\n          {item.goal_type == \"Sub-Goal\" ? (\r\n            <Link\r\n              className=\"link-icons\"\r\n              onClick={() => {\r\n                // console.log(\"item\", item);\r\n              }}\r\n            >\r\n              <ArrowRightIcon style={{ color: \"#344f84\", fontSize: \"30px\" }} />\r\n            </Link>\r\n          ) : (\r\n            <Link\r\n              className=\"link-icons\"\r\n              onClick={() => {\r\n                // console.log(\"item\", item);\r\n              }}\r\n            >\r\n              <RadioButtonUncheckedIcon\r\n                style={{\r\n                  color: \"#344f84\",\r\n                  fontSize: \"10px\",\r\n                  marginLeft: \"25px\",\r\n                }}\r\n              />\r\n            </Link>\r\n          )}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"05\",\r\n      name: \"Goal\",\r\n      fieldName: \"goal\",\r\n      minWidth: 50,\r\n      maxWidth: 280,\r\n      isMultiline: true,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"06\",\r\n      name: \"Measure\",\r\n      fieldName: \"measure\",\r\n      minWidth: 50,\r\n      maxWidth: 100,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"07\",\r\n      name: \"Weightage\",\r\n      fieldName: \"weightage\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"08\",\r\n      name: \"Target\",\r\n      fieldName: \"target\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"09\",\r\n      name: \"Threshold\",\r\n      fieldName: \"threshold\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"10\",\r\n      name: \"Stretch\",\r\n      fieldName: \"stretch\",\r\n      minWidth: 50,\r\n      maxWidth: 80,\r\n      isSortedDescending: false,\r\n      isRowHeader: true,\r\n      isResizable: false,\r\n    },\r\n    {\r\n      key: \"01\",\r\n      name: \"Action\",\r\n      fieldName: \"action\",\r\n      minWidth: 80,\r\n      maxWidth: 80,\r\n      isRowHeader: true,\r\n      onRender: (item) => (\r\n        <div>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              goalDetails(item);\r\n            }}\r\n          >\r\n            <VisibilityIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons mr-3\"\r\n            onClick={() => {\r\n              updateGoals(item);\r\n            }}\r\n          >\r\n            <CreateIcon style={{ color: \"#344f84\" }} />\r\n          </Link>\r\n          <Link\r\n            className=\"link-icons\"\r\n            onClick={() => {\r\n              deleteGoalData(item);\r\n            }}\r\n          >\r\n            <DeleteIcon style={{ color: \"#f04336\" }} />\r\n          </Link>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const [deleteItemId, setDeleteItemId] = useState(null);\r\n  const [updateData, setUpdateData]: any = useState({});\r\n  const [showDelete, setShowDelete] = useState(false);\r\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\r\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\r\n  const theme = getTheme();\r\n  const iconButtonStyles = {\r\n    root: {\r\n      color: \"#FFF\",\r\n      marginLeft: \"auto\",\r\n      marginTop: \"4px\",\r\n      marginRight: \"2px\",\r\n    },\r\n    rootHovered: {\r\n      color: theme.palette.neutralDark,\r\n    },\r\n  };\r\n  const modalStyle: Partial<IModalStyles> = {\r\n    root: {},\r\n    main: {\r\n      height: \"20%\",\r\n      width: \"20%\",\r\n      backgroundColor: \"#FFF\",\r\n      // padding: \"5px\",\r\n    },\r\n  };\r\n\r\n  const deleteGoalData = (item: any) => {\r\n    setDeleteItemId(item.name);\r\n    // console.log(\"item id\", item.name);\r\n    const filters = [];\r\n    if (item.name) {\r\n      filters.push([\"name\", \"=\", item.name]);\r\n    }\r\n    fetchGoalDataName(\r\n      limit_start,\r\n      limitPageLength,\r\n      orderBy,\r\n      JSON.stringify(filters)\r\n    ).then((response: any) => {\r\n      // console.log(response.data);\r\n      setUpdateData(response.data[0]);\r\n    });\r\n    setShowDelete(true);\r\n  };\r\n\r\n  // console.log(\"deleteItemId=>\", updateData)\r\n\r\n  const handleDeleteGoal = () => {\r\n    const deleteQuery = {\r\n      name: updateData.name,\r\n      is_deleted: 1,\r\n    };\r\n    update_goals(deleteQuery).then((response) => {\r\n      // console.log(\"response=>\", response);\r\n      setShowDelete(false);\r\n      setShowDeleteSuccess(true);\r\n      setDeleteItemId(null);\r\n      setUpdateData(null);\r\n    });\r\n  };\r\n\r\n  const operations = [\r\n    {\r\n      sno: \"01\",\r\n      action: \"action1\",\r\n      employeeID: \"145728\",\r\n      employeeName: \"PRIYA GUPTA\",\r\n      managerID: \"124590\",\r\n      managerName: \"PINKO KUMAR\",\r\n      status: \"Pending With Employee\",\r\n      apprisalType: \"Goal Sheet\",\r\n    },\r\n    {\r\n      sno: \"02\",\r\n      action: \"action1\",\r\n      employeeID: \"145728\",\r\n      employeeName: \"PRIYA GUPTA\",\r\n      managerID: \"124590\",\r\n      managerName: \"PINKO KUMAR\",\r\n      status: \"Pending With Employee\",\r\n      apprisalType: \"Goal Sheet\",\r\n    },\r\n  ];\r\n\r\n  const updateGoals = (item: any) => {\r\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\r\n  };\r\n\r\n  const goalDetails = (item: any) => {\r\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\r\n  };\r\n\r\n  const listStyle: Partial<IDetailsListStyles> = {\r\n    headerWrapper: {\r\n      \".root-106\": {\r\n        backgroundColor: \"#344f84\",\r\n      },\r\n    },\r\n    root: {\r\n      marginTop: \"10px\",\r\n      backgroundColor: \"#344f84\",\r\n      paddingBottom: \"0px\",\r\n      \".ms-Viewport\": {\r\n        minWidth: \"200px\",\r\n      },\r\n    },\r\n    contentWrapper: {\r\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\r\n        paddingTop: \"0px\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const stackTokens = { childrenGap: 10 };\r\n  const renderJobHistory = () => {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <DetailsList\r\n            styles={listStyle}\r\n            items={employeeDetails}\r\n            className=\"detail-list\"\r\n            columns={columnsJobHistory}\r\n            selectionMode={0}\r\n          />\r\n          <div className=\"pagination-style\">\r\n            <Pagination\r\n              format=\"buttons\"\r\n              // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n              // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n              selectedPageIndex={currentPage}\r\n              pageCount={Math.ceil(totalCount / limitPageLength)}\r\n              itemsPerPage={limitPageLength}\r\n              totalItemCount={totalCount}\r\n              onPageChange={(page) => {\r\n                setLimitSTart(page * limitPageLength);\r\n                setCurentPage(page);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\r\n                  `/appraisal/goalsetting/view/addjobhistory/${params.employeeId}/${params.appraisalId}`\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/appraisal/goalsetting\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteJob}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Delete</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteJob(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Are you sure you want to delete this item?\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Delete\"\r\n                allowDisabledFocus\r\n                onClick={handleDeleteJobhistory}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccessJob}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccessJob(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Item successfully Deleted.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Okay\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDeleteSuccessJob(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderGoals = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <DetailsList\r\n          styles={listStyle}\r\n          items={goalData}\r\n          className=\"detail-list\"\r\n          columns={columnsGoal}\r\n          selectionMode={0}\r\n        />\r\n        <div className=\"pagination-style\">\r\n          <Pagination\r\n            format=\"buttons\"\r\n            // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n            // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\r\n            selectedPageIndex={currentPageGoal}\r\n            pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\r\n            itemsPerPage={limitPageLengthGoal}\r\n            totalItemCount={goalTotalCount}\r\n            onPageChange={(pageGoal) => {\r\n              setLimitSTartGoal(pageGoal * limitPageLengthGoal);\r\n              setCurentPageGoal(pageGoal);\r\n            }}\r\n          />\r\n        </div>\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Add\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\r\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/appraisal/goalsetting\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n        <div>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDelete}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Delete</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Are you sure you want to delete this item?\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Delete\"\r\n                allowDisabledFocus\r\n                onClick={handleDeleteGoal}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n              <PrimaryButton\r\n                text=\"Cancel\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDelete(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n          <Modal\r\n            titleAriaId={\"Title\"}\r\n            isOpen={showDeleteSuccess}\r\n            isBlocking={false}\r\n            styles={modalStyle}\r\n            // containerClassName={contentStyles.container}\r\n          >\r\n            <div className=\"modal-header\">\r\n              <div className=\"modal-title\">Success</div>\r\n              <IconButton\r\n                styles={iconButtonStyles}\r\n                iconProps={cancelIcon}\r\n                ariaLabel=\"Close popup modal\"\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"modal-content-success\">\r\n              Item successfully Deleted.\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              <PrimaryButton\r\n                text=\"Okay\"\r\n                allowDisabledFocus\r\n                onClick={() => {\r\n                  setShowDeleteSuccess(false);\r\n                }}\r\n                style={{ marginLeft: \"10px\" }}\r\n                disabled={false}\r\n                checked={false}\r\n              />\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTrainingDevelopment = () => {\r\n    return (\r\n      <div className=\"form-conatiner\">\r\n        <DetailsList\r\n          styles={listStyle}\r\n          items={developmentData}\r\n          className=\"detail-list\"\r\n          columns={columnsTraning}\r\n          selectionMode={0}\r\n        />\r\n        <Stack\r\n          horizontal\r\n          tokens={stackTokens}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n        >\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Save\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                console.log(\"tariningPlan=> \", tariningPlan);\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            <PrimaryButton\r\n              text=\"Cancel\"\r\n              allowDisabledFocus\r\n              onClick={() => {\r\n                history.push(\"/appraisal/goalsetting\");\r\n              }}\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderEmployeeDetails = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <div className=\"emp-details-section\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <span>Employee Id</span> : 10075\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Employee Name</span> : Ayush Kansal\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Designation</span> : Project Manager\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Location</span> : NOIDA\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Department</span> : Delivery\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Date of Joining</span> : 2020-11-11\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Reporting Officer</span> : Reporting Officer\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Reviewer</span> : Piyush Rakhecha\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <span>Counter signing</span> : Munmun Some\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row-jobHistory d-none\">\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.employee_id}\r\n              placeholder=\"Employee ID\"\r\n              label=\"Employee Id\"\r\n              name=\"id\"\r\n              styles={textfelidStyle}\r\n              // value={jobHistory[0].employee_id}\r\n              // onChange={onChangeInput}\r\n              className=\"flexGrow\"\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.employee_name}\r\n              placeholder=\"Employee Name\"\r\n              label=\"Employee Name\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              // onChange={onChangeInput}\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.designation}\r\n              placeholder=\"Designation\"\r\n              label=\"Designation\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n            />\r\n          </div>\r\n          <div className=\"row-jobHistory d-none\">\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.location}\r\n              placeholder=\"Location\"\r\n              label=\"Location\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.department}\r\n              placeholder=\"Department\"\r\n              label=\"Department\"\r\n              name=\"id\"\r\n              // onChange={onChangeInput}\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.date_of_joining}\r\n              placeholder=\"Date of Joining\"\r\n              label=\"Date of Joining\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n            />\r\n          </div>\r\n          <div className=\"row-jobHistory d-none\">\r\n            <TextField\r\n              readOnly={true}\r\n              // value={employeeData.date_of_joining}\r\n              placeholder=\"Reporting Officer\"\r\n              label=\"Reporting Officer\"\r\n              styles={textfelidStyle}\r\n              className=\"flexGrow\"\r\n              name=\"appraisal_description\"\r\n              // onChange={onChangeInput}\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.reviewer_name}\r\n              placeholder=\"Reviewer\"\r\n              label=\"Reviewer\"\r\n              name=\"id\"\r\n              styles={textfelidStyle}\r\n              // onChange={onChangeInput}\r\n              className=\"flexGrow\"\r\n            />\r\n            <TextField\r\n              readOnly={true}\r\n              value={employeeData.counter_signing_name}\r\n              placeholder=\"Counter signing\"\r\n              label=\"Counter signing\"\r\n              name=\"id\"\r\n              styles={textfelidStyle}\r\n              // onChange={onChangeInput}\r\n              className=\"flexGrow\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{ marginTop: \"10px\" }}\r\n          className=\"card employee-details-tabs\"\r\n        >\r\n          <Pivot linkFormat={PivotLinkFormat.tabs}>\r\n            <PivotItem\r\n              headerButtonProps={{\r\n                \"data-order\": 1,\r\n                \"data-title\": \"My Files Title\",\r\n              }}\r\n              headerText=\"Job History\"\r\n            >\r\n              {renderJobHistory()}\r\n            </PivotItem>\r\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\r\n            <PivotItem headerText=\"Training/ Development Plan\">\r\n              {renderTrainingDevelopment()}\r\n            </PivotItem>\r\n          </Pivot>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"view\">\r\n      {/* <WelcomeHeader>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <Text style={{ marginRight: \"10px\" }}>\r\n              Welcome {userName} ({userId})\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\r\n              Logged In:\r\n            </Text>\r\n            <Text style={{ marginRight: \"5px\" }}>\r\n              {dateNow} {timeNow}\r\n            </Text>\r\n          </div>\r\n        </div>\r\n      </WelcomeHeader> */}\r\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\r\n      <div className=\"content\">\r\n        <div className=\"data-container\">{renderEmployeeDetails()}</div>\r\n        {/* <div className=\"right-container\">\r\n          <div className=\"stepper\">\r\n            <ul className=\"progress\">\r\n              <li>\r\n                <div className=\"node green\"></div>\r\n                <p className=\"green\">\r\n                  <span>Provide your job history</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider green\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node green\"></div>\r\n                <p className=\"green\">\r\n                  <span>Perform goal setting</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider green\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node grey\"></div>\r\n                <p className=\"grey\">\r\n                  <span>Update training needs</span>\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <div className=\"divider grey\"></div>\r\n              </li>\r\n              <li>\r\n                <div className=\"node grey\"></div>\r\n                <p className=\"grey\">\r\n                  <span>Create development plan</span>\r\n                </p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect((state) => ({\r\n  ...state,\r\n}))(EmployeeDetails);\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\MainHeader.tsx",["430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\index.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\employeeData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\goal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\Header.tsx",["448","449","450"],"import * as React from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  IBreadcrumbItem,\r\n  IBreadcrumbStyles,\r\n  IDividerAsProps,\r\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\r\nimport { IContextualMenuProps } from \"office-ui-fabric-react\";\r\nimport { TooltipHost } from \"office-ui-fabric-react/lib/Tooltip\";\r\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\r\nimport \"./Header.css\";\r\n\r\nconst menuProps: IContextualMenuProps = {\r\n  items: [\r\n    {\r\n      key: \"action01\",\r\n      text: \"Action 1\",\r\n      //   iconProps: { iconName: 'Mail' },\r\n    },\r\n    {\r\n      key: \"action02\",\r\n      text: \"Action 2\",\r\n      //   iconProps: { iconName: 'Calendar' },\r\n    },\r\n  ],\r\n};\r\nfunction _onBreadcrumbItemClicked(\r\n  ev?: React.MouseEvent<HTMLElement>,\r\n  item?: IBreadcrumbItem\r\n): void {\r\n  console.log(`Breadcrumb item with key \"${item?.key}\" has been clicked.`);\r\n}\r\nconst itemsWithHeading: IBreadcrumbItem[] = [\r\n  {\r\n    text: \"Performance\",\r\n    key: \"Files\",\r\n    onClick: _onBreadcrumbItemClicked,\r\n    href: \"\",\r\n  },\r\n  { text: \"Appraisal\", key: \"d1\", isCurrentItem: true },\r\n];\r\nfunction _getCustomOverflowIcon(): JSX.Element {\r\n  return <Icon iconName={\"ChevronDown\"} />;\r\n}\r\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\r\n  const tooltipText = dividerProps.item ? dividerProps.item.text : \"\";\r\n  return (\r\n    <TooltipHost\r\n      content={`Show ${tooltipText} contents`}\r\n      calloutProps={{ gapSpace: 0 }}\r\n    >\r\n      <span aria-hidden=\"true\" style={{ cursor: \"pointer\", padding: 5 }}>\r\n        /\r\n      </span>\r\n    </TooltipHost>\r\n  );\r\n}\r\n\r\nconst breadCrumStyle: Partial<IBreadcrumbStyles> = {\r\n  root: {\r\n    margin: \"0px\",\r\n    padding: \"0px\",\r\n    marginTop: \"-10px\",\r\n  },\r\n  itemLink: {\r\n    fontSize: \"22px\",\r\n  },\r\n};\r\n\r\nfunction Header(props: { item?: IBreadcrumbItem[]; styles: any }) {\r\n  // const _alertClicked = () => {\r\n  //   console.log(\"clicked==>\")\r\n  // }\r\n  // const horizontalStackProps: IStackProps = {\r\n  //     horizontal: true,\r\n  //     tokens: { childrenGap: 100, },\r\n  // };\r\n  // const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Breadcrumb\r\n        // items={itemsWithHeading}\r\n        items={props.item || []}\r\n        styles={props.styles}\r\n        maxDisplayedItems={5}\r\n        ariaLabel=\"With custom rendered divider and overflow icon\"\r\n        dividerAs={_getCustomDivider}\r\n        onRenderOverflowIcon={_getCustomOverflowIcon}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\apprisal.tsx",["451"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\actions\\developmentPlan.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\index.tsx",["452","453","454","455","456","457","458","459"],"C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\sideBar.tsx",["460","461"],"/*\r\nTemplate Name: Admin Template\r\nAuthor: Wrappixel\r\n\r\nFile: js\r\n*/\r\n// ==============================================================\r\n// Auto select left navbar\r\n// ==============================================================\r\nimport $ from \"jquery\";\r\n\r\nexport const initSideBar = function () {\r\n  (\"use strict\");\r\n  var url = window.location + \"\";\r\n  var path = url.replace(\r\n    window.location.protocol + \"//\" + window.location.host + \"/\",\r\n    \"\"\r\n  );\r\n  var element = $(\"ul#sidebarnav a\").filter(function () {\r\n    // return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;\r\n    return true;\r\n  });\r\n  element.parentsUntil(\".sidebar-nav\").each(function (index) {\r\n    if ($(this).is(\"li\") && $(this).children(\"a\").length !== 0) {\r\n      $(this).children(\"a\").addClass(\"active\");\r\n      $(this).parent(\"ul#sidebarnav\").length === 0\r\n        ? $(this).addClass(\"active\")\r\n        : $(this).addClass(\"selected\");\r\n    } else if (!$(this).is(\"ul\") && $(this).children(\"a\").length === 0) {\r\n      $(this).addClass(\"selected\");\r\n    } else if ($(this).is(\"ul\")) {\r\n      $(this).addClass(\"in\");\r\n    }\r\n  });\r\n\r\n  element.addClass(\"active\");\r\n  $(\"#sidebarnav a\").on(\"click\", function (e) {\r\n    // console.log(\"side nav clicked==>\");\r\n\r\n    if (!$(this).hasClass(\"active\")) {\r\n      // hide any open menus and remove all other classes\r\n      $(\"ul\", $(this).parents(\"ul:first\")).removeClass(\"in\");\r\n      $(\"a\", $(this).parents(\"ul:first\")).removeClass(\"active\");\r\n\r\n      // open our new menu and add the open class\r\n      $(this).next(\"ul\").addClass(\"in\");\r\n      $(this).addClass(\"active\");\r\n    } else if ($(this).hasClass(\"active\")) {\r\n      $(this).removeClass(\"active\");\r\n      $(this).parents(\"ul:first\").removeClass(\"active\");\r\n      $(this).next(\"ul\").removeClass(\"in\");\r\n    }\r\n  });\r\n  $(\"#sidebarnav >li >a.has-arrow\").on(\"click\", function (e) {\r\n    e.preventDefault();\r\n  });\r\n\r\n  // JQuery function\r\n  $(\".nav_employee\").show();\r\n  $(\".nav_manager\").hide();\r\n  $(\".nav_hr_contact\").hide();\r\n\r\n  $(\"#nav_employee\").click(function () {\r\n    $(\".nav_employee\").show();\r\n    $(\".nav_manager\").hide();\r\n    $(\".nav_hr_contact\").hide();\r\n    // $(\"#nav_employee\").addClass(\"active\");\r\n    // $(\"#nav_manager\").removeClass(\"active\");\r\n    // $(\"#nav_hr\").removeClass(\"active\");\r\n  });\r\n\r\n  $(\"#nav_manager\").click(function () {\r\n    $(\".nav_employee\").hide();\r\n    $(\".nav_manager\").show();\r\n    $(\".nav_hr_contact\").hide();\r\n    // $(\"#nav_manager\").addClass(\"active\");\r\n    // $(\"#nav_employee\").removeClass(\"active\");\r\n    // $(\"#nav_hr\").removeClass(\"active\");\r\n  });\r\n\r\n  $(\"#nav_hr_contact\").click(function () {\r\n    $(\".nav_employee\").hide();\r\n    $(\".nav_manager\").hide();\r\n    $(\".nav_hr_contact\").show();\r\n    // $(\"#nav_hr\").addClass(\"active\");\r\n    // $(\"#nav_employee\").removeClass(\"active\");\r\n    // $(\"#nav_manager\").removeClass(\"active\");\r\n  });\r\n};\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\SideNavigation\\custom.tsx",["462","463"],"import $ from \"jquery\";\r\n\r\nexport const customSideBar = function () {\r\n  (\"use strict\");\r\n  console.log(\"inside customside bar==>\");\r\n\r\n  $(\".preloader\").fadeOut();\r\n  // ==============================================================\r\n  // Theme options\r\n  // ==============================================================\r\n  // ==============================================================\r\n  // sidebar-hover\r\n  // ==============================================================\r\n\r\n  $(\".left-sidebar\").hover(\r\n    function () {\r\n      $(\".navbar-header\").addClass(\"expand-logo\");\r\n    },\r\n    function () {\r\n      $(\".navbar-header\").removeClass(\"expand-logo\");\r\n    }\r\n  );\r\n  // this is for close icon when navigation open in mobile view\r\n  $(\".nav-toggler\").on(\"click\", function () {\r\n    $(\"#main-wrapper\").toggleClass(\"show-sidebar\");\r\n    $(\".nav-toggler i\").toggleClass(\"ti-menu\");\r\n  });\r\n  $(\".nav-lock\").on(\"click\", function () {\r\n    $(\"body\").toggleClass(\"lock-nav\");\r\n    $(\".nav-lock i\").toggleClass(\"mdi-toggle-switch-off\");\r\n    $(\"body, .page-wrapper\").trigger(\"resize\");\r\n  });\r\n  $(\".search-box a, .search-box .app-search .srh-btn\").on(\"click\", function () {\r\n    $(\".app-search\").toggle(200);\r\n    $(\".app-search input\").focus();\r\n  });\r\n\r\n  // ==============================================================\r\n  // Right sidebar options\r\n  // ==============================================================\r\n  console.log(\"custom side bar2==>\");\r\n  $(function () {\r\n    $(\".service-panel-toggle\").on(\"click\", function () {\r\n      $(\".customizer\").toggleClass(\"show-service-panel\");\r\n    });\r\n    $(\".page-wrapper\").on(\"click\", function () {\r\n      $(\".customizer\").removeClass(\"show-service-panel\");\r\n    });\r\n  });\r\n  // ==============================================================\r\n  // This is for the floating labels\r\n  // ==============================================================\r\n  //   $(\".floating-labels .form-control\")\r\n  //     .on(\"focus blur\", function (e) {\r\n  //       $(this)\r\n  //         .parents(\".form-group\")\r\n  //         .toggleClass(\"focused\", e.type === \"focus\" || this.value.length > 0);\r\n  //     })\r\n  //     .trigger(\"blur\");\r\n\r\n  // ==============================================================\r\n  //tooltip\r\n  // ==============================================================\r\n  //   $(function () {\r\n  //     $('[data-toggle=\"tooltip\"]').tooltip();\r\n  //   });\r\n  // ==============================================================\r\n  //Popover\r\n  // ==============================================================\r\n  //   $(function () {\r\n  //     $('[data-toggle=\"popover\"]').popover();\r\n  //   });\r\n\r\n  // ==============================================================\r\n  // Perfact scrollbar\r\n  // ==============================================================\r\n  //   $(\".message-center, .customizer-body, .scrollable\").perfectScrollbar({\r\n  //     wheelPropagation: !0,\r\n  //   });\r\n\r\n  /*var ps = new PerfectScrollbar('.message-body');\r\n      var ps = new PerfectScrollbar('.notifications');\r\n      var ps = new PerfectScrollbar('.scroll-sidebar');\r\n      var ps = new PerfectScrollbar('.customizer-body');*/\r\n\r\n  // ==============================================================\r\n  // Resize all elements\r\n  // ==============================================================\r\n  $(\"body, .page-wrapper\").trigger(\"resize\");\r\n  $(\".page-wrapper\").show();\r\n  // ==============================================================\r\n  // To do list\r\n  // ==============================================================\r\n  $(\".list-task li label\").click(function () {\r\n    $(this).toggleClass(\"task-done\");\r\n  });\r\n\r\n  //****************************\r\n  /* This is for the mini-sidebar if width is less then 1170*/\r\n  //****************************\r\n  console.log(\"custom side bar3==>\");\r\n  var setsidebartype = function () {\r\n    // var width = (window.innerWidth > 0) ? window.innerWidth : this.screen.width;\r\n    // if (width < 1170) {\r\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\r\n    // } else {\r\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\r\n    // }\r\n  };\r\n  // $(window).ready(setsidebartype);\r\n  // $(window).on(\"resize\", setsidebartype);\r\n  //****************************\r\n  /* This is for sidebartoggler*/\r\n  //****************************\r\n  $(\".sidebartoggler\").on(\"click\", function () {\r\n    console.log(\"Sidebar toggle inner function ==>\");\r\n    $(\"#main-wrapper\").toggleClass(\"mini-sidebar\");\r\n    if ($(\"#main-wrapper\").hasClass(\"mini-sidebar\")) {\r\n      $(\".sidebartoggler\").prop(\"checked\", !0);\r\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\r\n    } else {\r\n      $(\".sidebartoggler\").prop(\"checked\", !1);\r\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\r\n    }\r\n  });\r\n};\r\n","C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\userData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\tasks.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\employeeList.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\jobHistory.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\auth.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\apprisal.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\roleType.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\navigationData.tsx",[],"C:\\Users\\acer\\Documents\\mega-soft\\src\\redux\\reducers\\menuType.tsx",[],{"ruleId":"464","replacedBy":"465"},{"ruleId":"466","replacedBy":"467"},{"ruleId":"468","severity":1,"message":"469","line":1,"column":28,"nodeType":"470","messageId":"471","endLine":1,"endColumn":36},{"ruleId":"468","severity":1,"message":"472","line":24,"column":7,"nodeType":"470","messageId":"471","endLine":24,"endColumn":20},{"ruleId":"473","severity":1,"message":"474","line":33,"column":17,"nodeType":"475","messageId":"476","endLine":33,"endColumn":19},{"ruleId":"477","severity":1,"message":"478","line":66,"column":6,"nodeType":"479","endLine":66,"endColumn":8,"suggestions":"480"},{"ruleId":"477","severity":1,"message":"478","line":81,"column":6,"nodeType":"479","endLine":81,"endColumn":8,"suggestions":"481"},{"ruleId":"473","severity":1,"message":"474","line":89,"column":24,"nodeType":"475","messageId":"476","endLine":89,"endColumn":26},{"ruleId":"468","severity":1,"message":"482","line":3,"column":3,"nodeType":"470","messageId":"471","endLine":3,"endColumn":6},{"ruleId":"468","severity":1,"message":"483","line":12,"column":8,"nodeType":"470","messageId":"471","endLine":12,"endColumn":18},{"ruleId":"468","severity":1,"message":"484","line":14,"column":3,"nodeType":"470","messageId":"471","endLine":14,"endColumn":21},{"ruleId":"468","severity":1,"message":"485","line":15,"column":3,"nodeType":"470","messageId":"471","endLine":15,"endColumn":21},{"ruleId":"468","severity":1,"message":"486","line":17,"column":10,"nodeType":"470","messageId":"471","endLine":17,"endColumn":19},{"ruleId":"468","severity":1,"message":"487","line":150,"column":7,"nodeType":"470","messageId":"471","endLine":150,"endColumn":37},{"ruleId":"468","severity":1,"message":"488","line":193,"column":9,"nodeType":"470","messageId":"471","endLine":193,"endColumn":17},{"ruleId":"468","severity":1,"message":"489","line":194,"column":10,"nodeType":"470","messageId":"471","endLine":194,"endColumn":17},{"ruleId":"468","severity":1,"message":"490","line":194,"column":19,"nodeType":"470","messageId":"471","endLine":194,"endColumn":29},{"ruleId":"468","severity":1,"message":"491","line":195,"column":9,"nodeType":"470","messageId":"471","endLine":195,"endColumn":17},{"ruleId":"468","severity":1,"message":"492","line":196,"column":10,"nodeType":"470","messageId":"471","endLine":196,"endColumn":17},{"ruleId":"468","severity":1,"message":"493","line":196,"column":19,"nodeType":"470","messageId":"471","endLine":196,"endColumn":29},{"ruleId":"468","severity":1,"message":"494","line":199,"column":9,"nodeType":"470","messageId":"471","endLine":199,"endColumn":19},{"ruleId":"468","severity":1,"message":"495","line":216,"column":10,"nodeType":"470","messageId":"471","endLine":216,"endColumn":24},{"ruleId":"468","severity":1,"message":"496","line":217,"column":9,"nodeType":"470","messageId":"471","endLine":217,"endColumn":20},{"ruleId":"497","severity":1,"message":"498","line":221,"column":39,"nodeType":"499","messageId":"500","endLine":221,"endColumn":41},{"ruleId":"497","severity":1,"message":"498","line":223,"column":34,"nodeType":"499","messageId":"500","endLine":223,"endColumn":36},{"ruleId":"497","severity":1,"message":"501","line":231,"column":13,"nodeType":"502","messageId":"503","endLine":231,"endColumn":20},{"ruleId":"497","severity":1,"message":"501","line":242,"column":11,"nodeType":"502","messageId":"503","endLine":242,"endColumn":18},{"ruleId":"504","severity":1,"message":"505","line":255,"column":11,"nodeType":"506","endLine":255,"endColumn":34},{"ruleId":"468","severity":1,"message":"507","line":4,"column":3,"nodeType":"470","messageId":"471","endLine":4,"endColumn":12},{"ruleId":"468","severity":1,"message":"486","line":6,"column":17,"nodeType":"470","messageId":"471","endLine":6,"endColumn":26},{"ruleId":"468","severity":1,"message":"469","line":6,"column":28,"nodeType":"470","messageId":"471","endLine":6,"endColumn":36},{"ruleId":"468","severity":1,"message":"508","line":8,"column":10,"nodeType":"470","messageId":"471","endLine":8,"endColumn":15},{"ruleId":"468","severity":1,"message":"509","line":10,"column":8,"nodeType":"470","messageId":"471","endLine":10,"endColumn":19},{"ruleId":"468","severity":1,"message":"488","line":14,"column":9,"nodeType":"470","messageId":"471","endLine":14,"endColumn":17},{"ruleId":"468","severity":1,"message":"510","line":15,"column":9,"nodeType":"470","messageId":"471","endLine":15,"endColumn":50},{"ruleId":"504","severity":1,"message":"505","line":53,"column":13,"nodeType":"506","endLine":53,"endColumn":60},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":25,"column":3,"nodeType":"470","messageId":"471","endLine":25,"endColumn":7},{"ruleId":"477","severity":1,"message":"514","line":58,"column":6,"nodeType":"479","endLine":58,"endColumn":8,"suggestions":"515"},{"ruleId":"468","severity":1,"message":"516","line":157,"column":9,"nodeType":"470","messageId":"471","endLine":157,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":158,"column":9,"nodeType":"470","messageId":"471","endLine":158,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":159,"column":9,"nodeType":"470","messageId":"471","endLine":159,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":160,"column":9,"nodeType":"470","messageId":"471","endLine":160,"endColumn":16},{"ruleId":"468","severity":1,"message":"512","line":21,"column":8,"nodeType":"470","messageId":"471","endLine":21,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":23,"column":10,"nodeType":"470","messageId":"471","endLine":23,"endColumn":14},{"ruleId":"468","severity":1,"message":"520","line":67,"column":7,"nodeType":"470","messageId":"471","endLine":67,"endColumn":47},{"ruleId":"468","severity":1,"message":"520","line":114,"column":9,"nodeType":"470","messageId":"471","endLine":114,"endColumn":49},{"ruleId":"468","severity":1,"message":"518","line":121,"column":9,"nodeType":"470","messageId":"471","endLine":121,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":122,"column":9,"nodeType":"470","messageId":"471","endLine":122,"endColumn":16},{"ruleId":"468","severity":1,"message":"516","line":123,"column":9,"nodeType":"470","messageId":"471","endLine":123,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":124,"column":9,"nodeType":"470","messageId":"471","endLine":124,"endColumn":15},{"ruleId":"477","severity":1,"message":"521","line":140,"column":6,"nodeType":"479","endLine":140,"endColumn":8,"suggestions":"522"},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"523","line":7,"column":3,"nodeType":"470","messageId":"471","endLine":7,"endColumn":17},{"ruleId":"468","severity":1,"message":"513","line":26,"column":3,"nodeType":"470","messageId":"471","endLine":26,"endColumn":7},{"ruleId":"468","severity":1,"message":"524","line":39,"column":10,"nodeType":"470","messageId":"471","endLine":39,"endColumn":25},{"ruleId":"468","severity":1,"message":"525","line":39,"column":27,"nodeType":"470","messageId":"471","endLine":39,"endColumn":45},{"ruleId":"468","severity":1,"message":"526","line":40,"column":10,"nodeType":"470","messageId":"471","endLine":40,"endColumn":24},{"ruleId":"468","severity":1,"message":"527","line":40,"column":26,"nodeType":"470","messageId":"471","endLine":40,"endColumn":43},{"ruleId":"468","severity":1,"message":"528","line":46,"column":10,"nodeType":"470","messageId":"471","endLine":46,"endColumn":16},{"ruleId":"468","severity":1,"message":"529","line":47,"column":10,"nodeType":"470","messageId":"471","endLine":47,"endColumn":18},{"ruleId":"477","severity":1,"message":"514","line":61,"column":6,"nodeType":"479","endLine":61,"endColumn":8,"suggestions":"530"},{"ruleId":"468","severity":1,"message":"531","line":118,"column":9,"nodeType":"470","messageId":"471","endLine":118,"endColumn":23},{"ruleId":"468","severity":1,"message":"532","line":122,"column":9,"nodeType":"470","messageId":"471","endLine":122,"endColumn":25},{"ruleId":"468","severity":1,"message":"516","line":164,"column":9,"nodeType":"470","messageId":"471","endLine":164,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":165,"column":9,"nodeType":"470","messageId":"471","endLine":165,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":166,"column":9,"nodeType":"470","messageId":"471","endLine":166,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":167,"column":9,"nodeType":"470","messageId":"471","endLine":167,"endColumn":16},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":22,"column":3,"nodeType":"470","messageId":"471","endLine":22,"endColumn":7},{"ruleId":"468","severity":1,"message":"533","line":26,"column":3,"nodeType":"470","messageId":"471","endLine":26,"endColumn":16},{"ruleId":"468","severity":1,"message":"534","line":43,"column":10,"nodeType":"470","messageId":"471","endLine":43,"endColumn":21},{"ruleId":"468","severity":1,"message":"491","line":44,"column":9,"nodeType":"470","messageId":"471","endLine":44,"endColumn":17},{"ruleId":"468","severity":1,"message":"535","line":47,"column":19,"nodeType":"470","messageId":"471","endLine":47,"endColumn":29},{"ruleId":"468","severity":1,"message":"536","line":52,"column":10,"nodeType":"470","messageId":"471","endLine":52,"endColumn":18},{"ruleId":"468","severity":1,"message":"537","line":52,"column":20,"nodeType":"470","messageId":"471","endLine":52,"endColumn":31},{"ruleId":"477","severity":1,"message":"538","line":69,"column":6,"nodeType":"479","endLine":69,"endColumn":8,"suggestions":"539"},{"ruleId":"468","severity":1,"message":"540","line":94,"column":9,"nodeType":"470","messageId":"471","endLine":94,"endColumn":52},{"ruleId":"468","severity":1,"message":"541","line":108,"column":9,"nodeType":"470","messageId":"471","endLine":108,"endColumn":21},{"ruleId":"468","severity":1,"message":"516","line":159,"column":9,"nodeType":"470","messageId":"471","endLine":159,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":160,"column":9,"nodeType":"470","messageId":"471","endLine":160,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":161,"column":9,"nodeType":"470","messageId":"471","endLine":161,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":162,"column":9,"nodeType":"470","messageId":"471","endLine":162,"endColumn":16},{"ruleId":"468","severity":1,"message":"542","line":164,"column":23,"nodeType":"470","messageId":"471","endLine":164,"endColumn":37},{"ruleId":"468","severity":1,"message":"543","line":165,"column":22,"nodeType":"470","messageId":"471","endLine":165,"endColumn":35},{"ruleId":"468","severity":1,"message":"544","line":166,"column":26,"nodeType":"470","messageId":"471","endLine":166,"endColumn":43},{"ruleId":"468","severity":1,"message":"545","line":167,"column":25,"nodeType":"470","messageId":"471","endLine":167,"endColumn":41},{"ruleId":"468","severity":1,"message":"546","line":168,"column":27,"nodeType":"470","messageId":"471","endLine":168,"endColumn":45},{"ruleId":"468","severity":1,"message":"547","line":169,"column":21,"nodeType":"470","messageId":"471","endLine":169,"endColumn":33},{"ruleId":"468","severity":1,"message":"548","line":171,"column":10,"nodeType":"470","messageId":"471","endLine":171,"endColumn":18},{"ruleId":"468","severity":1,"message":"549","line":176,"column":9,"nodeType":"470","messageId":"471","endLine":176,"endColumn":25},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"523","line":7,"column":3,"nodeType":"470","messageId":"471","endLine":7,"endColumn":17},{"ruleId":"468","severity":1,"message":"550","line":8,"column":3,"nodeType":"470","messageId":"471","endLine":8,"endColumn":18},{"ruleId":"468","severity":1,"message":"551","line":12,"column":3,"nodeType":"470","messageId":"471","endLine":12,"endColumn":13},{"ruleId":"468","severity":1,"message":"513","line":27,"column":3,"nodeType":"470","messageId":"471","endLine":27,"endColumn":7},{"ruleId":"468","severity":1,"message":"552","line":30,"column":8,"nodeType":"470","messageId":"471","endLine":30,"endColumn":14},{"ruleId":"468","severity":1,"message":"491","line":46,"column":9,"nodeType":"470","messageId":"471","endLine":46,"endColumn":17},{"ruleId":"468","severity":1,"message":"535","line":49,"column":19,"nodeType":"470","messageId":"471","endLine":49,"endColumn":29},{"ruleId":"468","severity":1,"message":"528","line":62,"column":10,"nodeType":"470","messageId":"471","endLine":62,"endColumn":16},{"ruleId":"468","severity":1,"message":"529","line":63,"column":10,"nodeType":"470","messageId":"471","endLine":63,"endColumn":18},{"ruleId":"468","severity":1,"message":"536","line":66,"column":10,"nodeType":"470","messageId":"471","endLine":66,"endColumn":18},{"ruleId":"477","severity":1,"message":"553","line":82,"column":6,"nodeType":"479","endLine":82,"endColumn":8,"suggestions":"554"},{"ruleId":"468","severity":1,"message":"540","line":107,"column":9,"nodeType":"470","messageId":"471","endLine":107,"endColumn":52},{"ruleId":"468","severity":1,"message":"541","line":121,"column":9,"nodeType":"470","messageId":"471","endLine":121,"endColumn":21},{"ruleId":"468","severity":1,"message":"531","line":139,"column":9,"nodeType":"470","messageId":"471","endLine":139,"endColumn":23},{"ruleId":"468","severity":1,"message":"532","line":143,"column":9,"nodeType":"470","messageId":"471","endLine":143,"endColumn":25},{"ruleId":"468","severity":1,"message":"516","line":181,"column":9,"nodeType":"470","messageId":"471","endLine":181,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":182,"column":9,"nodeType":"470","messageId":"471","endLine":182,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":183,"column":9,"nodeType":"470","messageId":"471","endLine":183,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":184,"column":9,"nodeType":"470","messageId":"471","endLine":184,"endColumn":16},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":15,"column":3,"nodeType":"470","messageId":"471","endLine":15,"endColumn":7},{"ruleId":"468","severity":1,"message":"490","line":25,"column":19,"nodeType":"470","messageId":"471","endLine":25,"endColumn":29},{"ruleId":"468","severity":1,"message":"555","line":26,"column":23,"nodeType":"470","messageId":"471","endLine":26,"endColumn":36},{"ruleId":"468","severity":1,"message":"556","line":27,"column":17,"nodeType":"470","messageId":"471","endLine":27,"endColumn":25},{"ruleId":"468","severity":1,"message":"557","line":28,"column":10,"nodeType":"470","messageId":"471","endLine":28,"endColumn":14},{"ruleId":"468","severity":1,"message":"558","line":28,"column":16,"nodeType":"470","messageId":"471","endLine":28,"endColumn":23},{"ruleId":"468","severity":1,"message":"559","line":30,"column":27,"nodeType":"470","messageId":"471","endLine":30,"endColumn":45},{"ruleId":"468","severity":1,"message":"560","line":31,"column":10,"nodeType":"470","messageId":"471","endLine":31,"endColumn":20},{"ruleId":"468","severity":1,"message":"561","line":35,"column":25,"nodeType":"470","messageId":"471","endLine":35,"endColumn":34},{"ruleId":"468","severity":1,"message":"562","line":35,"column":49,"nodeType":"470","messageId":"471","endLine":35,"endColumn":54},{"ruleId":"468","severity":1,"message":"563","line":38,"column":10,"nodeType":"470","messageId":"471","endLine":38,"endColumn":21},{"ruleId":"468","severity":1,"message":"564","line":38,"column":23,"nodeType":"470","messageId":"471","endLine":38,"endColumn":38},{"ruleId":"477","severity":1,"message":"478","line":43,"column":6,"nodeType":"479","endLine":43,"endColumn":45,"suggestions":"565"},{"ruleId":"468","severity":1,"message":"566","line":45,"column":10,"nodeType":"470","messageId":"471","endLine":45,"endColumn":15},{"ruleId":"468","severity":1,"message":"567","line":50,"column":10,"nodeType":"470","messageId":"471","endLine":50,"endColumn":16},{"ruleId":"468","severity":1,"message":"568","line":55,"column":10,"nodeType":"470","messageId":"471","endLine":55,"endColumn":16},{"ruleId":"468","severity":1,"message":"518","line":60,"column":9,"nodeType":"470","messageId":"471","endLine":60,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":61,"column":9,"nodeType":"470","messageId":"471","endLine":61,"endColumn":16},{"ruleId":"468","severity":1,"message":"569","line":63,"column":9,"nodeType":"470","messageId":"471","endLine":63,"endColumn":39},{"ruleId":"468","severity":1,"message":"516","line":94,"column":9,"nodeType":"470","messageId":"471","endLine":94,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":95,"column":9,"nodeType":"470","messageId":"471","endLine":95,"endColumn":15},{"ruleId":"468","severity":1,"message":"570","line":108,"column":9,"nodeType":"470","messageId":"471","endLine":108,"endColumn":40},{"ruleId":"468","severity":1,"message":"571","line":120,"column":9,"nodeType":"470","messageId":"471","endLine":120,"endColumn":19},{"ruleId":"468","severity":1,"message":"572","line":246,"column":9,"nodeType":"470","messageId":"471","endLine":246,"endColumn":20},{"ruleId":"468","severity":1,"message":"573","line":258,"column":9,"nodeType":"470","messageId":"471","endLine":258,"endColumn":23},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"523","line":7,"column":3,"nodeType":"470","messageId":"471","endLine":7,"endColumn":17},{"ruleId":"468","severity":1,"message":"550","line":8,"column":3,"nodeType":"470","messageId":"471","endLine":8,"endColumn":18},{"ruleId":"468","severity":1,"message":"574","line":17,"column":3,"nodeType":"470","messageId":"471","endLine":17,"endColumn":13},{"ruleId":"468","severity":1,"message":"575","line":23,"column":3,"nodeType":"470","messageId":"471","endLine":23,"endColumn":8},{"ruleId":"468","severity":1,"message":"513","line":26,"column":3,"nodeType":"470","messageId":"471","endLine":26,"endColumn":7},{"ruleId":"468","severity":1,"message":"534","line":37,"column":10,"nodeType":"470","messageId":"471","endLine":37,"endColumn":21},{"ruleId":"468","severity":1,"message":"528","line":47,"column":10,"nodeType":"470","messageId":"471","endLine":47,"endColumn":16},{"ruleId":"468","severity":1,"message":"529","line":48,"column":10,"nodeType":"470","messageId":"471","endLine":48,"endColumn":18},{"ruleId":"477","severity":1,"message":"576","line":60,"column":6,"nodeType":"479","endLine":60,"endColumn":8,"suggestions":"577"},{"ruleId":"468","severity":1,"message":"578","line":63,"column":9,"nodeType":"470","messageId":"471","endLine":63,"endColumn":31},{"ruleId":"468","severity":1,"message":"579","line":64,"column":9,"nodeType":"470","messageId":"471","endLine":64,"endColumn":25},{"ruleId":"468","severity":1,"message":"580","line":75,"column":9,"nodeType":"470","messageId":"471","endLine":75,"endColumn":42},{"ruleId":"468","severity":1,"message":"516","line":159,"column":9,"nodeType":"470","messageId":"471","endLine":159,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":160,"column":9,"nodeType":"470","messageId":"471","endLine":160,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":161,"column":9,"nodeType":"470","messageId":"471","endLine":161,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":162,"column":9,"nodeType":"470","messageId":"471","endLine":162,"endColumn":16},{"ruleId":"468","severity":1,"message":"581","line":164,"column":32,"nodeType":"470","messageId":"471","endLine":164,"endColumn":55},{"ruleId":"468","severity":1,"message":"582","line":165,"column":23,"nodeType":"470","messageId":"471","endLine":165,"endColumn":37},{"ruleId":"468","severity":1,"message":"583","line":166,"column":26,"nodeType":"470","messageId":"471","endLine":166,"endColumn":43},{"ruleId":"468","severity":1,"message":"584","line":167,"column":32,"nodeType":"470","messageId":"471","endLine":167,"endColumn":55},{"ruleId":"468","severity":1,"message":"585","line":2,"column":19,"nodeType":"470","messageId":"471","endLine":2,"endColumn":30},{"ruleId":"468","severity":1,"message":"511","line":2,"column":32,"nodeType":"470","messageId":"471","endLine":2,"endColumn":43},{"ruleId":"468","severity":1,"message":"512","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":21},{"ruleId":"468","severity":1,"message":"586","line":6,"column":10,"nodeType":"470","messageId":"471","endLine":6,"endColumn":19},{"ruleId":"468","severity":1,"message":"587","line":9,"column":3,"nodeType":"470","messageId":"471","endLine":9,"endColumn":11},{"ruleId":"468","severity":1,"message":"574","line":12,"column":3,"nodeType":"470","messageId":"471","endLine":12,"endColumn":13},{"ruleId":"468","severity":1,"message":"588","line":13,"column":3,"nodeType":"470","messageId":"471","endLine":13,"endColumn":20},{"ruleId":"468","severity":1,"message":"589","line":15,"column":3,"nodeType":"470","messageId":"471","endLine":15,"endColumn":13},{"ruleId":"468","severity":1,"message":"590","line":16,"column":3,"nodeType":"470","messageId":"471","endLine":16,"endColumn":15},{"ruleId":"468","severity":1,"message":"591","line":18,"column":3,"nodeType":"470","messageId":"471","endLine":18,"endColumn":17},{"ruleId":"468","severity":1,"message":"575","line":19,"column":3,"nodeType":"470","messageId":"471","endLine":19,"endColumn":8},{"ruleId":"468","severity":1,"message":"513","line":22,"column":3,"nodeType":"470","messageId":"471","endLine":22,"endColumn":7},{"ruleId":"468","severity":1,"message":"533","line":25,"column":10,"nodeType":"470","messageId":"471","endLine":25,"endColumn":23},{"ruleId":"468","severity":1,"message":"534","line":39,"column":10,"nodeType":"470","messageId":"471","endLine":39,"endColumn":21},{"ruleId":"468","severity":1,"message":"535","line":44,"column":19,"nodeType":"470","messageId":"471","endLine":44,"endColumn":29},{"ruleId":"477","severity":1,"message":"538","line":62,"column":6,"nodeType":"479","endLine":62,"endColumn":8,"suggestions":"592"},{"ruleId":"468","severity":1,"message":"516","line":114,"column":9,"nodeType":"470","messageId":"471","endLine":114,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":115,"column":9,"nodeType":"470","messageId":"471","endLine":115,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":116,"column":9,"nodeType":"470","messageId":"471","endLine":116,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":117,"column":9,"nodeType":"470","messageId":"471","endLine":117,"endColumn":16},{"ruleId":"468","severity":1,"message":"542","line":119,"column":23,"nodeType":"470","messageId":"471","endLine":119,"endColumn":37},{"ruleId":"468","severity":1,"message":"543","line":120,"column":22,"nodeType":"470","messageId":"471","endLine":120,"endColumn":35},{"ruleId":"468","severity":1,"message":"544","line":121,"column":26,"nodeType":"470","messageId":"471","endLine":121,"endColumn":43},{"ruleId":"468","severity":1,"message":"545","line":122,"column":25,"nodeType":"470","messageId":"471","endLine":122,"endColumn":41},{"ruleId":"468","severity":1,"message":"546","line":123,"column":27,"nodeType":"470","messageId":"471","endLine":123,"endColumn":45},{"ruleId":"468","severity":1,"message":"547","line":124,"column":21,"nodeType":"470","messageId":"471","endLine":124,"endColumn":33},{"ruleId":"468","severity":1,"message":"512","line":30,"column":8,"nodeType":"470","messageId":"471","endLine":30,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":31,"column":10,"nodeType":"470","messageId":"471","endLine":31,"endColumn":14},{"ruleId":"468","severity":1,"message":"520","line":56,"column":7,"nodeType":"470","messageId":"471","endLine":56,"endColumn":47},{"ruleId":"477","severity":1,"message":"521","line":92,"column":6,"nodeType":"479","endLine":92,"endColumn":8,"suggestions":"593"},{"ruleId":"468","severity":1,"message":"594","line":171,"column":26,"nodeType":"470","messageId":"471","endLine":171,"endColumn":43},{"ruleId":"468","severity":1,"message":"595","line":182,"column":10,"nodeType":"470","messageId":"471","endLine":182,"endColumn":21},{"ruleId":"468","severity":1,"message":"596","line":209,"column":9,"nodeType":"470","messageId":"471","endLine":209,"endColumn":28},{"ruleId":"468","severity":1,"message":"518","line":254,"column":9,"nodeType":"470","messageId":"471","endLine":254,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":255,"column":9,"nodeType":"470","messageId":"471","endLine":255,"endColumn":16},{"ruleId":"468","severity":1,"message":"516","line":256,"column":9,"nodeType":"470","messageId":"471","endLine":256,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":257,"column":9,"nodeType":"470","messageId":"471","endLine":257,"endColumn":15},{"ruleId":"468","severity":1,"message":"512","line":29,"column":8,"nodeType":"470","messageId":"471","endLine":29,"endColumn":21},{"ruleId":"468","severity":1,"message":"513","line":30,"column":10,"nodeType":"470","messageId":"471","endLine":30,"endColumn":14},{"ruleId":"468","severity":1,"message":"520","line":55,"column":7,"nodeType":"470","messageId":"471","endLine":55,"endColumn":47},{"ruleId":"468","severity":1,"message":"510","line":71,"column":9,"nodeType":"470","messageId":"471","endLine":71,"endColumn":50},{"ruleId":"468","severity":1,"message":"518","line":320,"column":9,"nodeType":"470","messageId":"471","endLine":320,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":321,"column":9,"nodeType":"470","messageId":"471","endLine":321,"endColumn":16},{"ruleId":"468","severity":1,"message":"516","line":322,"column":9,"nodeType":"470","messageId":"471","endLine":322,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":323,"column":9,"nodeType":"470","messageId":"471","endLine":323,"endColumn":15},{"ruleId":"468","severity":1,"message":"597","line":365,"column":10,"nodeType":"470","messageId":"471","endLine":365,"endColumn":26},{"ruleId":"468","severity":1,"message":"598","line":366,"column":10,"nodeType":"470","messageId":"471","endLine":366,"endColumn":29},{"ruleId":"468","severity":1,"message":"599","line":366,"column":31,"nodeType":"470","messageId":"471","endLine":366,"endColumn":53},{"ruleId":"468","severity":1,"message":"512","line":32,"column":8,"nodeType":"470","messageId":"471","endLine":32,"endColumn":21},{"ruleId":"468","severity":1,"message":"600","line":40,"column":8,"nodeType":"470","messageId":"471","endLine":40,"endColumn":18},{"ruleId":"468","severity":1,"message":"601","line":50,"column":10,"nodeType":"470","messageId":"471","endLine":50,"endColumn":26},{"ruleId":"468","severity":1,"message":"559","line":60,"column":27,"nodeType":"470","messageId":"471","endLine":60,"endColumn":45},{"ruleId":"468","severity":1,"message":"562","line":70,"column":37,"nodeType":"470","messageId":"471","endLine":70,"endColumn":42},{"ruleId":"468","severity":1,"message":"602","line":72,"column":9,"nodeType":"470","messageId":"471","endLine":72,"endColumn":15},{"ruleId":"477","severity":1,"message":"603","line":114,"column":6,"nodeType":"479","endLine":123,"endColumn":4,"suggestions":"604"},{"ruleId":"468","severity":1,"message":"605","line":292,"column":10,"nodeType":"470","messageId":"471","endLine":292,"endColumn":22},{"ruleId":"468","severity":1,"message":"518","line":544,"column":9,"nodeType":"470","messageId":"471","endLine":544,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":545,"column":9,"nodeType":"470","messageId":"471","endLine":545,"endColumn":16},{"ruleId":"468","severity":1,"message":"516","line":547,"column":9,"nodeType":"470","messageId":"471","endLine":547,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":548,"column":9,"nodeType":"470","messageId":"471","endLine":548,"endColumn":15},{"ruleId":"473","severity":1,"message":"474","line":552,"column":23,"nodeType":"475","messageId":"476","endLine":552,"endColumn":25},{"ruleId":"473","severity":1,"message":"474","line":555,"column":23,"nodeType":"475","messageId":"476","endLine":555,"endColumn":25},{"ruleId":"468","severity":1,"message":"606","line":570,"column":9,"nodeType":"470","messageId":"471","endLine":570,"endColumn":52},{"ruleId":"473","severity":1,"message":"474","line":686,"column":29,"nodeType":"475","messageId":"476","endLine":686,"endColumn":31},{"ruleId":"468","severity":1,"message":"607","line":12,"column":3,"nodeType":"470","messageId":"471","endLine":12,"endColumn":8},{"ruleId":"468","severity":1,"message":"513","line":20,"column":3,"nodeType":"470","messageId":"471","endLine":20,"endColumn":7},{"ruleId":"468","severity":1,"message":"512","line":25,"column":8,"nodeType":"470","messageId":"471","endLine":25,"endColumn":21},{"ruleId":"468","severity":1,"message":"608","line":40,"column":8,"nodeType":"470","messageId":"471","endLine":40,"endColumn":18},{"ruleId":"468","severity":1,"message":"609","line":41,"column":8,"nodeType":"470","messageId":"471","endLine":41,"endColumn":25},{"ruleId":"468","severity":1,"message":"610","line":75,"column":33,"nodeType":"470","messageId":"471","endLine":75,"endColumn":57},{"ruleId":"468","severity":1,"message":"611","line":76,"column":30,"nodeType":"470","messageId":"471","endLine":76,"endColumn":51},{"ruleId":"468","severity":1,"message":"562","line":77,"column":10,"nodeType":"470","messageId":"471","endLine":77,"endColumn":15},{"ruleId":"468","severity":1,"message":"535","line":80,"column":19,"nodeType":"470","messageId":"471","endLine":80,"endColumn":29},{"ruleId":"468","severity":1,"message":"612","line":85,"column":10,"nodeType":"470","messageId":"471","endLine":85,"endColumn":19},{"ruleId":"477","severity":1,"message":"613","line":127,"column":6,"nodeType":"479","endLine":127,"endColumn":45,"suggestions":"614"},{"ruleId":"477","severity":1,"message":"615","line":145,"column":6,"nodeType":"479","endLine":145,"endColumn":45,"suggestions":"616"},{"ruleId":"477","severity":1,"message":"617","line":163,"column":6,"nodeType":"479","endLine":163,"endColumn":43,"suggestions":"618"},{"ruleId":"477","severity":1,"message":"619","line":179,"column":6,"nodeType":"479","endLine":179,"endColumn":43,"suggestions":"620"},{"ruleId":"468","severity":1,"message":"516","line":212,"column":9,"nodeType":"470","messageId":"471","endLine":212,"endColumn":17},{"ruleId":"468","severity":1,"message":"517","line":213,"column":9,"nodeType":"470","messageId":"471","endLine":213,"endColumn":15},{"ruleId":"468","severity":1,"message":"518","line":214,"column":9,"nodeType":"470","messageId":"471","endLine":214,"endColumn":16},{"ruleId":"468","severity":1,"message":"519","line":215,"column":9,"nodeType":"470","messageId":"471","endLine":215,"endColumn":16},{"ruleId":"468","severity":1,"message":"621","line":363,"column":10,"nodeType":"470","messageId":"471","endLine":363,"endColumn":27},{"ruleId":"473","severity":1,"message":"474","line":494,"column":27,"nodeType":"475","messageId":"476","endLine":494,"endColumn":29},{"ruleId":"468","severity":1,"message":"605","line":621,"column":10,"nodeType":"470","messageId":"471","endLine":621,"endColumn":22},{"ruleId":"468","severity":1,"message":"571","line":683,"column":9,"nodeType":"470","messageId":"471","endLine":683,"endColumn":19},{"ruleId":"468","severity":1,"message":"622","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":13},{"ruleId":"623","severity":1,"message":"624","line":47,"column":11,"nodeType":"506","endLine":50,"endColumn":12},{"ruleId":"623","severity":1,"message":"624","line":53,"column":11,"nodeType":"506","endLine":59,"endColumn":12},{"ruleId":"623","severity":1,"message":"624","line":69,"column":11,"nodeType":"506","endLine":77,"endColumn":12},{"ruleId":"623","severity":1,"message":"624","line":88,"column":15,"nodeType":"506","endLine":93,"endColumn":16},{"ruleId":"504","severity":1,"message":"505","line":98,"column":15,"nodeType":"506","endLine":98,"endColumn":39},{"ruleId":"623","severity":1,"message":"624","line":162,"column":15,"nodeType":"506","endLine":168,"endColumn":16},{"ruleId":"625","severity":1,"message":"626","line":162,"column":15,"nodeType":"506","endLine":168,"endColumn":16},{"ruleId":"623","severity":1,"message":"624","line":173,"column":17,"nodeType":"506","endLine":173,"endColumn":55},{"ruleId":"623","severity":1,"message":"624","line":176,"column":17,"nodeType":"506","endLine":176,"endColumn":55},{"ruleId":"623","severity":1,"message":"624","line":180,"column":17,"nodeType":"506","endLine":180,"endColumn":55},{"ruleId":"625","severity":1,"message":"626","line":186,"column":15,"nodeType":"506","endLine":193,"endColumn":16},{"ruleId":"623","severity":1,"message":"624","line":186,"column":15,"nodeType":"506","endLine":193,"endColumn":16},{"ruleId":"623","severity":1,"message":"624","line":204,"column":23,"nodeType":"506","endLine":204,"endColumn":63},{"ruleId":"623","severity":1,"message":"624","line":217,"column":23,"nodeType":"506","endLine":217,"endColumn":63},{"ruleId":"623","severity":1,"message":"624","line":230,"column":23,"nodeType":"506","endLine":230,"endColumn":63},{"ruleId":"623","severity":1,"message":"624","line":243,"column":23,"nodeType":"506","endLine":243,"endColumn":63},{"ruleId":"504","severity":1,"message":"505","line":269,"column":13,"nodeType":"506","endLine":269,"endColumn":61},{"ruleId":"468","severity":1,"message":"627","line":13,"column":7,"nodeType":"470","messageId":"471","endLine":13,"endColumn":38},{"ruleId":"468","severity":1,"message":"628","line":33,"column":7,"nodeType":"470","messageId":"471","endLine":33,"endColumn":42},{"ruleId":"468","severity":1,"message":"629","line":59,"column":7,"nodeType":"470","messageId":"471","endLine":59,"endColumn":49},{"ruleId":"468","severity":1,"message":"630","line":2,"column":8,"nodeType":"470","messageId":"471","endLine":2,"endColumn":19},{"ruleId":"468","severity":1,"message":"631","line":3,"column":8,"nodeType":"470","messageId":"471","endLine":3,"endColumn":9},{"ruleId":"468","severity":1,"message":"632","line":11,"column":7,"nodeType":"470","messageId":"471","endLine":11,"endColumn":20},{"ruleId":"468","severity":1,"message":"490","line":17,"column":19,"nodeType":"470","messageId":"471","endLine":17,"endColumn":29},{"ruleId":"468","severity":1,"message":"633","line":18,"column":10,"nodeType":"470","messageId":"471","endLine":18,"endColumn":19},{"ruleId":"468","severity":1,"message":"634","line":18,"column":21,"nodeType":"470","messageId":"471","endLine":18,"endColumn":32},{"ruleId":"468","severity":1,"message":"635","line":26,"column":12,"nodeType":"470","messageId":"471","endLine":26,"endColumn":22},{"ruleId":"477","severity":1,"message":"636","line":38,"column":6,"nodeType":"479","endLine":38,"endColumn":15,"suggestions":"637"},{"ruleId":"468","severity":1,"message":"638","line":46,"column":9,"nodeType":"470","messageId":"471","endLine":46,"endColumn":23},{"ruleId":"639","severity":1,"message":"640","line":13,"column":3,"nodeType":"641","messageId":"642","endLine":13,"endColumn":18,"fix":"643"},{"ruleId":"468","severity":1,"message":"644","line":15,"column":7,"nodeType":"470","messageId":"471","endLine":15,"endColumn":11},{"ruleId":"639","severity":1,"message":"640","line":4,"column":3,"nodeType":"641","messageId":"642","endLine":4,"endColumn":18,"fix":"645"},{"ruleId":"468","severity":1,"message":"646","line":102,"column":7,"nodeType":"470","messageId":"471","endLine":102,"endColumn":21},"no-native-reassign",["647"],"no-negated-in-lhs",["648"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getQueryParms' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["649"],["650"],"'Nav' is defined but never used.","'logo_nuage' is defined but never used.","'fetchNavigationBar' is defined but never used.","'sideNavigationData' is defined but never used.","'useEffect' is defined but never used.","'navStyles' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'doctype' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'roleType' is assigned a value but never used.","'navData' is assigned a value but never used.","'setNavData' is assigned a value but never used.","'navigation' is assigned a value but never used.","'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TextField' is defined but never used.","'login' is defined but never used.","'banner_main' is defined but never used.","'textfelidStyle' is assigned a value but never used.","'useDispatch' is defined but never used.","'WelcomeHeader' is defined but never used.","'Text' is defined but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["651"],"'userName' is assigned a value but never used.","'userId' is assigned a value but never used.","'dateNow' is assigned a value but never used.","'timeNow' is assigned a value but never used.","'dropdownStyles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["652"],"'add_JobHistory' is defined but never used.","'employeeDetails' is assigned a value but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.",["653"],"'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'fetchGoalData' is defined but never used.","'filtersById' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.","'goalData' is assigned a value but never used.","'setGoalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["654"],"'datePickerStyle' is assigned a value but never used.","'controlClass' is assigned a value but never used.","'setErrMsgOrder' is assigned a value but never used.","'setErrMsgGoal' is assigned a value but never used.","'setErrMsgGoalType' is assigned a value but never used.","'setErrMsgMeasure' is assigned a value but never used.","'setErrMsgWeightage' is assigned a value but never used.","'setErrMsgKra' is assigned a value but never used.","'goalType' is assigned a value but never used.","'onChangeGoalType' is assigned a value but never used.","'fetchJobHistory' is defined but never used.","'DatePicker' is defined but never used.","'moment' is defined but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["655"],"'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'count' is assigned a value but never used.","'employeData' is assigned a value but never used.","'setEmployeeData' is assigned a value but never used.",["656"],"'roles' is assigned a value but never used.","'period' is assigned a value but never used.","'status' is assigned a value but never used.","'rolesOption' is assigned a value but never used.","'periodOption' is assigned a value but never used.","'operations' is assigned a value but never used.","'handleRoles' is assigned a value but never used.","'onChangePeriod' is assigned a value but never used.","'IconButton' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["657"],"'cancelIcon' is assigned a value but never used.","'iconButtonStyles' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'setErrMsgResponsibility' is assigned a value but never used.","'setErrMsgPlace' is assigned a value but never used.","'setErrMsgPosition' is assigned a value but never used.","'setErrMsgQualifications' is assigned a value but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","'getTheme' is defined but never used.","'IDatePickerStyles' is defined but never used.","'IIconProps' is defined but never used.","'IModalStyles' is defined but never used.","'mergeStyleSets' is defined but never used.",["658"],["659"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","'ZoomInIcon' is defined but never used.","'delete_appraisal' is defined but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["660"],"'deleteItemId' is assigned a value but never used.","'renderRow' is assigned a value but never used.","'Label' is defined but never used.","'jobHistory' is defined but never used.","'JobHistoryDetails' is defined but never used.","'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'goalCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["661"],"React Hook useEffect has a missing dependency: 'filtersById'. Either include it or remove the dependency array.",["662"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["663"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', and 'orderByDevelopment'. Either include them or remove the dependency array.",["664"],"'deleteItemJobName' is assigned a value but never used.","'user1' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/role-supports-aria-props","The attribute aria-haspopup is not supported by the role link. This role is implicit on the element a.","'menuProps' is assigned a value but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'accessToken' is defined but never used.","'$' is defined but never used.","'handleSideBar' is assigned a value but never used.","'home_menu' is assigned a value but never used.","'setHomeMenu' is assigned a value but never used.","'route2page' is defined but never used.","React Hook useEffect has a missing dependency: 'menuType'. Either include it or remove the dependency array.",["665"],"'handleGoalPage' is assigned a value but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"666","text":"667"},"'path' is assigned a value but never used.",{"range":"668","text":"667"},"'setsidebartype' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"669","fix":"670"},{"desc":"669","fix":"671"},{"desc":"672","fix":"673"},{"desc":"674","fix":"675"},{"desc":"672","fix":"676"},{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"683","fix":"684"},{"desc":"677","fix":"685"},{"desc":"674","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"desc":"697","fix":"698"},[303,318],"",[73,88],"Update the dependencies array to be: [dispatch]",{"range":"699","text":"700"},{"range":"701","text":"700"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"702","text":"703"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"704","text":"705"},{"range":"706","text":"703"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"707","text":"708"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"709","text":"710"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, dispatch]",{"range":"711","text":"712"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"713","text":"714"},{"range":"715","text":"708"},{"range":"716","text":"705"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",{"range":"717","text":"718"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"719","text":"720"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, filtersById]",{"range":"721","text":"722"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"723","text":"724"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment]",{"range":"725","text":"726"},"Update the dependencies array to be: [doctype, menuType]",{"range":"727","text":"728"},[2364,2366],"[dispatch]",[2917,2919],[1738,1740],"[filtersById, roleType]",[3451,3453],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[1896,1898],[1967,1969],"[filtersByName, limitPageLength, limit_start, orderBy]",[2317,2319],"[filtersById, limitPageLength, limit_start, orderBy]",[1607,1646],"[doctype, limit_start, limit, roleType, dispatch]",[1711,1713],"[filtersByName, roleType]",[1713,1715],[2507,2509],[3753,3930],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",[3865,3904],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4385,4424],"[roleType, limitStart, limitPageLength, filtersById]",[4906,4943],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[5386,5423],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment]",[1147,1156],"[doctype, menuType]"]