[{"/home/pratik/Documents/mega-soft/src/index.tsx":"1","/home/pratik/Documents/mega-soft/src/reportWebVitals.ts":"2","/home/pratik/Documents/mega-soft/src/App.tsx":"3","/home/pratik/Documents/mega-soft/src/redux/index.tsx":"4","/home/pratik/Documents/mega-soft/src/Navigation.tsx":"5","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx":"6","/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx":"7","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx":"8","/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx":"9","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx":"10","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx":"11","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx":"12","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx":"13","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx":"14","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx":"15","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx":"16","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx":"17","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx":"18","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx":"19","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx":"20","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx":"21","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx":"22","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx":"23","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx":"24","/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx":"25","/home/pratik/Documents/mega-soft/src/i18n.tsx":"26","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx":"27","/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx":"28","/home/pratik/Documents/mega-soft/src/Header.tsx":"29","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx":"30","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx":"31","/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx":"32","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx":"33","/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx":"34","/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx":"35","/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx":"36","/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx":"37","/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx":"38","/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx":"39","/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx":"40","/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx":"41","/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx":"42","/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx":"43","/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx":"44","/home/pratik/Documents/mega-soft/src/Utils/color.tsx":"45"},{"size":643,"mtime":1613404687635,"results":"46","hashOfConfig":"47"},{"size":425,"mtime":1610466480732,"results":"48","hashOfConfig":"47"},{"size":5972,"mtime":1613842588085,"results":"49","hashOfConfig":"47"},{"size":205,"mtime":1611071583172,"results":"50","hashOfConfig":"47"},{"size":4824,"mtime":1613842849895,"results":"51","hashOfConfig":"47"},{"size":3090,"mtime":1612888024571,"results":"52","hashOfConfig":"47"},{"size":4996,"mtime":1613404687631,"results":"53","hashOfConfig":"47"},{"size":476,"mtime":1613666111750,"results":"54","hashOfConfig":"47"},{"size":8217,"mtime":1613833829658,"results":"55","hashOfConfig":"47"},{"size":3405,"mtime":1612890108996,"results":"56","hashOfConfig":"47"},{"size":3809,"mtime":1612799899538,"results":"57","hashOfConfig":"47"},{"size":985,"mtime":1613666111750,"results":"58","hashOfConfig":"47"},{"size":6182,"mtime":1613843588005,"results":"59","hashOfConfig":"47"},{"size":11161,"mtime":1613844012966,"results":"60","hashOfConfig":"47"},{"size":15688,"mtime":1613844333656,"results":"61","hashOfConfig":"47"},{"size":20013,"mtime":1613843527704,"results":"62","hashOfConfig":"47"},{"size":19695,"mtime":1613843075999,"results":"63","hashOfConfig":"47"},{"size":11284,"mtime":1613844079459,"results":"64","hashOfConfig":"47"},{"size":34714,"mtime":1613843817930,"results":"65","hashOfConfig":"47"},{"size":4727,"mtime":1613844201894,"results":"66","hashOfConfig":"47"},{"size":11520,"mtime":1613844503618,"results":"67","hashOfConfig":"47"},{"size":11584,"mtime":1613844411854,"results":"68","hashOfConfig":"47"},{"size":13235,"mtime":1613843195330,"results":"69","hashOfConfig":"47"},{"size":4672,"mtime":1613843921440,"results":"70","hashOfConfig":"47"},{"size":468,"mtime":1613666111750,"results":"71","hashOfConfig":"47"},{"size":769,"mtime":1613833426034,"results":"72","hashOfConfig":"47"},{"size":653,"mtime":1613404687639,"results":"73","hashOfConfig":"47"},{"size":7930,"mtime":1613844859439,"results":"74","hashOfConfig":"47"},{"size":1207,"mtime":1613842669951,"results":"75","hashOfConfig":"47"},{"size":6281,"mtime":1613888608669,"results":"76","hashOfConfig":"47"},{"size":2223,"mtime":1613888965558,"results":"77","hashOfConfig":"47"},{"size":3437,"mtime":1612888024579,"results":"78","hashOfConfig":"47"},{"size":4509,"mtime":1613404687639,"results":"79","hashOfConfig":"47"},{"size":1657,"mtime":1613404687635,"results":"80","hashOfConfig":"47"},{"size":553,"mtime":1613833423946,"results":"81","hashOfConfig":"47"},{"size":422,"mtime":1612888024579,"results":"82","hashOfConfig":"47"},{"size":584,"mtime":1612372890972,"results":"83","hashOfConfig":"47"},{"size":750,"mtime":1611997864766,"results":"84","hashOfConfig":"47"},{"size":624,"mtime":1613666111754,"results":"85","hashOfConfig":"47"},{"size":419,"mtime":1611848900136,"results":"86","hashOfConfig":"47"},{"size":772,"mtime":1611848900136,"results":"87","hashOfConfig":"47"},{"size":442,"mtime":1611848900136,"results":"88","hashOfConfig":"47"},{"size":1029,"mtime":1613404687639,"results":"89","hashOfConfig":"47"},{"size":793,"mtime":1610987455768,"results":"90","hashOfConfig":"47"},{"size":332,"mtime":1613666111726,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"1fk01iq",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108","usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"111","usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"95"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"95"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"95"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"95"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"95"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"95"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"95"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"95"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"95"},"/home/pratik/Documents/mega-soft/src/index.tsx",["206"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\nimport i18n from \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["207","208"],"/home/pratik/Documents/mega-soft/src/reportWebVitals.ts",[],"/home/pratik/Documents/mega-soft/src/App.tsx",["209","210","211","212"],"import React, { Suspense, useEffect } from \"react\";\nimport {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\nimport Appraisal from \"./Views/Appraisal\";\nimport AddAppraisal from \"./Views/AddAppraisal\";\nimport UpdateAppraisal from \"./Views/UpdateAppraisal\";\nimport AppraisalDetail from \"./Views/AppraisalDetail\";\nimport GoalSetting from \"./Views/GoalSetting\";\nimport EmployeeDetails from \"./Views/EmployeeDetails\";\nimport JobHistory from \"./Views/JobHistory\";\nimport UpdateJobHistory from \"./Views/UpdateJobHistory\";\nimport JobHistoryDetails from \"./Views/JobHistoryDetails\";\nimport AddGoals from \"./Views/AddGoals\";\nimport UpdateGoals from \"./Views/UpdateGoals\";\nimport GoalDetails from \"./Views/GoalDetails\";\nimport Login from \"./Views/Login\";\nimport ChanageColor from \"./components/ChanageColor\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\n\nimport { validateLogin, login } from \"./redux/actions/auth\";\n\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport MainHeader from \"./SideNavigation/MainHeader\";\nimport { setCollapedMenu } from \"./redux/actions/roleType\";\n\nconst getQueryParms = () => {\n  const url = window.location.href;\n  const str = url;\n  const param = \"access_token=\";\n  let res = str.split(\"&\", 1);\n  let n = res[0].search(param);\n\n  if (n < 0) {\n    return;\n  }\n  n += param.length;\n  let access_token = res[0].substr(n);\n  return access_token;\n};\n\nfunction App(props: any) {\n  const dispatch = useDispatch();\n  const auth = useSelector((state: RootState) => state.Auth);\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n\n\n  useEffect(() => {\n    dispatch(validateLogin());\n  }, []);\n\n\n  useEffect(() => {\n    // const stateValue = getQueryParms(\"state\");\n    // const sessionStateValue = getQueryParms(\"session_state\");\n    const access_token = getQueryParms();\n    // console.log(\"access_token main==>\", access_token);\n    // if (stateValue && sessionStateValue && access_token) {\n    //   dispatch(login(sessionStateValue, stateValue, access_token));\n    // }\n\n    if (access_token) {\n      dispatch(login(access_token));\n    }\n  }, []);\n\n  if (auth.isLoading) {\n    return null;\n  }\n\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <Suspense fallback={null}>\n      <BrowserRouter>\n        {auth.isLoggedIn === true ? (\n          <Switch>\n            <div className=\"page-wrapper\">\n              <Navigation />\n              <main>\n                <div className={selectMenu == false ? `view` : `miniSideBar`}>\n                  <MainHeader>\n                    <div onClick={handlemenuClick}>\n                      <ChevronLeftIcon style={{ color: \"#FFF\" }} />\n                    </div>\n                  </MainHeader>\n\n                  {/* <Route exact path=\"/\" component={Login} /> */}\n                  <Route exact path=\"/home\" component={Appraisal} />\n                  <Route exact path=\"/addApprisal\" component={AddAppraisal} />\n                  {/* <Route exact path=\"/appraisal/add\" component={Form} /> */}\n                  <Route\n                    exact\n                    path=\"/appraisal/update/:appraisalId\"\n                    component={UpdateAppraisal}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/view/:appraisalId\"\n                    component={AppraisalDetail}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting\"\n                    component={GoalSetting}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/:employeeId/:appraisalId\"\n                    component={EmployeeDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/addjobhistory/:employeeId/:appraisalId\"\n                    component={JobHistory}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/jobhistory/updateJobHistory/:name\"\n                    component={UpdateJobHistory}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/:name\"\n                    component={JobHistoryDetails}\n                  />\n\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/addgoal/:employeeId/:appraisalId\"\n                    component={AddGoals}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/goals/updategoal/:name\"\n                    component={UpdateGoals}\n                  />\n                  <Route\n                    exact\n                    path=\"/appraisal/goalsetting/view/goal/goaldetail/:name\"\n                    component={GoalDetails}\n                  />\n                  <Route\n                    exact\n                    path=\"/home/changecolor\"\n                    component={ChanageColor}\n                  />\n                  <Route path=\"/*\" render={() => <Redirect to=\"/home\" />} />\n                  <Route\n                    path=\"/appraisal/goalsetting*\"\n                    render={() => <Redirect to=\"/appraisal/goalsetting\" />}\n                  />\n                </div>\n              </main>\n            </div>\n          </Switch>\n        ) : (\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/*\" render={() => <Redirect to=\"/\" />} />\n          </Switch>\n        )}\n      </BrowserRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","/home/pratik/Documents/mega-soft/src/redux/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Navigation.tsx",["213","214","215","216","217","218"],"import * as React from \"react\";\nimport {\n  INavLink,\n  INavLinkGroup,\n} from \"office-ui-fabric-react/lib/Nav\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { useHistory, matchPath } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport SideNavigation from \"./SideNavigation\";\n\ninitializeIcons();\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Appraisal\",\n        url: \"\",\n        key: \"key01\",\n        // icon: \"UpgradeAnalysis\",\n        links: [\n          {\n            name: \"Setup\",\n            url: \"/\",\n            icon: \"Settings\",\n            key: \"key02\",\n          },\n          // {\n          //   name: \"Ratings\",\n          //   url: \"/apprisal/rating\",\n          //   icon: \"6PointStar\",\n          //   key: \"key03\",\n          // },\n          // {\n          //   name: \"Periods\",\n          //   url: \"/apprisal/periods\",\n          //   icon: \"Timer\",\n          //   key: \"key04\",\n          // },\n          {\n            name: \"Goal Setting\",\n            url: \"/appraisal/goalsetting\",\n            icon: \"6PointStar\",\n            key: \"key05\",\n          },\n          // {\n          //   name: \"Self Assessment\",\n          //   url: \"\",\n          //   icon: \"6PointStar\",\n          //   key: \"key06\",\n          // },\n          // {\n          //   name: \"Development Plan\",\n          //   url: \"/apprisal/developmentPlan\",\n          //   icon: \"TestPlan\",\n          //   key: \"key07\",\n          // },\n          // {\n          //   name: \"Release Appraisal\",\n          //   url: \"/apprisal/releaseApprisal\",\n          //   icon: \"ReleaseGate\",\n          //   key: \"key08\",\n          // },\n          // {\n          //   name: \"Market Bench Marketing\",\n          //   url: \"/apprisal/marketBenchMarketing\",\n          //   icon: \"Market\",\n          //   key: \"key09\",\n          // },\n        ],\n        isExpanded: true,\n      },\n      {\n        name: \"Manage\",\n        url: \"\",\n        key: \"key10\",\n        // icon:'MedicationAdmin',\n        links: [\n          {\n            name: \"Team Goal Setting\",\n            url: \"/manage/teamGoalSetting\",\n            icon: \"Settings\",\n            key: \"key11\",\n          },\n          {\n            name: \"Team assess\",\n            url: \"/manage/teamAssess\",\n            icon: \"AssessmentGroup\",\n            key: \"key12\",\n          },\n        ],\n        isExpanded: false,\n      },\n      {\n        name: \"Confirmation\",\n        url: \"\",\n        key: \"key13\",\n        expandAriaLabel: \"Expand Admin section\",\n        collapseAriaLabel: \"Collapse admin section\",\n        links: [\n          {\n            name: \"Confirmation Status\",\n            url: \"/confirmation/status\",\n            icon: \"SplitObject\",\n            key: \"key14\",\n          },\n          {\n            name: \"Release\",\n            url: \"/confirmation/release\",\n            key: \"key15\",\n            icon: \"ReleaseGate\",\n          },\n          {\n            name: \"Approval\",\n            url: \"/confirmation/approval\",\n            key: \"key16\",\n            icon: \"DocumentApproval\",\n          },\n          {\n            name: \"Letter\",\n            url: \"/confirmation/letter\",\n            key: \"key17\",\n            icon: \"DietPlanNotebook\",\n          },\n          {\n            name: \"Probation Letter\",\n            url: \"/confirmation/probationLetter\",\n            key: \"key18\",\n            icon: \"QuickNote\",\n          },\n        ],\n        isExpanded: false,\n      },\n    ],\n  },\n];\n\n\nfunction Navigation() {\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n\n  \n  let history = useHistory();\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\n    setSelectedNavKey(item?.key || \"\");\n  };\n  React.useEffect(() => {\n    navLinkGroups[0].links.map((item) => {\n      if (item.links) {\n        item.links.map((subItem) => {\n          if (\n            matchPath(history.location.pathname, {\n              path: subItem.url,\n              exact: true,\n            })\n          ) {\n            setSelectedNavKey(subItem?.key || \"\");\n            return;\n          }\n        });\n      } else {\n        if (\n          matchPath(history.location.pathname, {\n            path: item.url,\n            exact: true,\n          })\n        ) {\n          setSelectedNavKey(item?.key || \"\");\n          return;\n        }\n      }\n    });\n  }, [history.location.pathname]);\n  return (\n    <div id=\"main-wrapper\">\n      {/* <MainHeader /> */}\n      <div\n        className={\n          selectMenu === false\n            ? `sidebar left-sidebar`\n            : `sidebar left-sidebar-collapsed`\n        }\n      >\n        <SideNavigation />\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;\n","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx",["219","220","221","222","223"],"/*\nTemplate Name: Admin Template\nAuthor: Wrappixel\n\nFile: js\n*/\n// ==============================================================\n// Auto select left navbar\n// ==============================================================\nimport $ from \"jquery\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\n\nexport const initSideBar = function () {\n  (\"use strict\");\n  var url = window.location + \"\";\n  var path = url.replace(\n    window.location.protocol + \"//\" + window.location.host + \"/\",\n    \"\"\n  );\n  var element = $(\"ul#sidebarnav a\").filter(function () {\n    // return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;\n    return true;\n  });\n  element.parentsUntil(\".sidebar-nav\").each(function (index) {\n    if ($(this).is(\"li\") && $(this).children(\"a\").length !== 0) {\n      $(this).children(\"a\").addClass(\"active\");\n      $(this).parent(\"ul#sidebarnav\").length === 0\n        ? $(this).addClass(\"active\")\n        : $(this).addClass(\"selected\");\n    } else if (!$(this).is(\"ul\") && $(this).children(\"a\").length === 0) {\n      $(this).addClass(\"selected\");\n    } else if ($(this).is(\"ul\")) {\n      $(this).addClass(\"in\");\n    }\n  });\n\n  element.addClass(\"active\");\n  $(\"#sidebarnav a\").on(\"click\", function (e) {\n    // console.log(\"side nav clicked==>\");\n\n    if (!$(this).hasClass(\"active\")) {\n      // hide any open menus and remove all other classes\n      $(\"ul\", $(this).parents(\"ul:first\")).removeClass(\"in\");\n      $(\"a\", $(this).parents(\"ul:first\")).removeClass(\"active\");\n\n      // open our new menu and add the open class\n      $(this).next(\"ul\").addClass(\"in\");\n      $(this).addClass(\"active\");\n    } else if ($(this).hasClass(\"active\")) {\n      $(this).removeClass(\"active\");\n      $(this).parents(\"ul:first\").removeClass(\"active\");\n      $(this).next(\"ul\").removeClass(\"in\");\n    }\n  });\n  $(\"#sidebarnav >li >a.has-arrow\").on(\"click\", function (e) {\n    e.preventDefault();\n  });\n\n  // JQuery function\n  $(\".nav_employee\").show();\n  $(\".nav_manager\").hide();\n  $(\".nav_hr_contact\").hide();\n\n  $(\"#nav_employee\").click(function () {\n    $(\".nav_employee\").show();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").hide();\n\n    sessionStorage.setItem(\"roleType\", \"Employee\");\n\n    // $(\"#nav_employee\").addClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n  });\n\n  $(\"#nav_manager\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").show();\n    $(\".nav_hr_contact\").hide();\n    // $(\"#nav_manager\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n\n    sessionStorage.setItem(\"roleType\", \"Manager\");\n  });\n\n  $(\"#nav_hr_contact\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").show();\n    // $(\"#nav_hr\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n\n    sessionStorage.setItem(\"roleType\", \"HR Contact\");\n  });\n};\n","/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx",["224","225"],"import $ from \"jquery\";\n\nexport const customSideBar = function () {\n  (\"use strict\");\n  // console.log(\"inside customside bar==>\");\n\n  $(\".preloader\").fadeOut();\n  // ==============================================================\n  // Theme options\n  // ==============================================================\n  // ==============================================================\n  // sidebar-hover\n  // ==============================================================\n\n  $(\".left-sidebar\").hover(\n    function () {\n      $(\".navbar-header\").addClass(\"expand-logo\");\n    },\n    function () {\n      $(\".navbar-header\").removeClass(\"expand-logo\");\n    }\n  );\n  // this is for close icon when navigation open in mobile view\n  $(\".nav-toggler\").on(\"click\", function () {\n    $(\"#main-wrapper\").toggleClass(\"show-sidebar\");\n    $(\".nav-toggler i\").toggleClass(\"ti-menu\");\n  });\n  $(\".nav-lock\").on(\"click\", function () {\n    $(\"body\").toggleClass(\"lock-nav\");\n    $(\".nav-lock i\").toggleClass(\"mdi-toggle-switch-off\");\n    $(\"body, .page-wrapper\").trigger(\"resize\");\n  });\n  $(\".search-box a, .search-box .app-search .srh-btn\").on(\"click\", function () {\n    $(\".app-search\").toggle(200);\n    $(\".app-search input\").focus();\n  });\n\n  // ==============================================================\n  // Right sidebar options\n  // ==============================================================\n  // console.log(\"custom side bar2==>\");\n  $(function () {\n    $(\".service-panel-toggle\").on(\"click\", function () {\n      $(\".customizer\").toggleClass(\"show-service-panel\");\n    });\n    $(\".page-wrapper\").on(\"click\", function () {\n      $(\".customizer\").removeClass(\"show-service-panel\");\n    });\n  });\n  // ==============================================================\n  // This is for the floating labels\n  // ==============================================================\n  //   $(\".floating-labels .form-control\")\n  //     .on(\"focus blur\", function (e) {\n  //       $(this)\n  //         .parents(\".form-group\")\n  //         .toggleClass(\"focused\", e.type === \"focus\" || this.value.length > 0);\n  //     })\n  //     .trigger(\"blur\");\n\n  // ==============================================================\n  //tooltip\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"tooltip\"]').tooltip();\n  //   });\n  // ==============================================================\n  //Popover\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"popover\"]').popover();\n  //   });\n\n  // ==============================================================\n  // Perfact scrollbar\n  // ==============================================================\n  //   $(\".message-center, .customizer-body, .scrollable\").perfectScrollbar({\n  //     wheelPropagation: !0,\n  //   });\n\n  /*var ps = new PerfectScrollbar('.message-body');\n      var ps = new PerfectScrollbar('.notifications');\n      var ps = new PerfectScrollbar('.scroll-sidebar');\n      var ps = new PerfectScrollbar('.customizer-body');*/\n\n  // ==============================================================\n  // Resize all elements\n  // ==============================================================\n  $(\"body, .page-wrapper\").trigger(\"resize\");\n  $(\".page-wrapper\").show();\n  // ==============================================================\n  // To do list\n  // ==============================================================\n  $(\".list-task li label\").click(function () {\n    $(this).toggleClass(\"task-done\");\n  });\n\n  //****************************\n  /* This is for the mini-sidebar if width is less then 1170*/\n  //****************************\n  // console.log(\"custom side bar3==>\");\n  var setsidebartype = function () {\n    // var width = (window.innerWidth > 0) ? window.innerWidth : this.screen.width;\n    // if (width < 1170) {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    // } else {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    // }\n  };\n  // $(window).ready(setsidebartype);\n  // $(window).on(\"resize\", setsidebartype);\n  //****************************\n  /* This is for sidebartoggler*/\n  //****************************\n  // var i = 0;\n  $(\".sidebartoggler\").on(\"click\", function () {\n    // console.log(\"Sidebar toggle inner function ==>\", i++);\n    $(\"#main-wrapper\").toggleClass(\"mini-sidebar\");\n    if ($(\"#main-wrapper\").hasClass(\"mini-sidebar\")) {\n      $(\".sidebartoggler\").prop(\"checked\", !0);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    } else {\n      $(\".sidebartoggler\").prop(\"checked\", !1);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    }\n  });\n\n  // Use react routes instead of href from the menu\n  // $(\"a.sidebar-link\").on(\"click\", function () {\n  //   const route = $(this).attr(\"href\");\n  //   // console.log(\"Menu Option selected ==>\", route);\n\n  //   // React routing code:\n\n  //   return false;\n  // });\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"import logo_text from \"../../src/assets/img/logo-text.png\";\nimport logo_icon from \"../../src/assets/img/logo-icon.png\";\nimport { initSideBar } from \"./sideBar\";\nimport { customSideBar } from \"./custom\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport SmsIcon from \"@material-ui/icons/Sms\";\nimport {\n  Dropdown,\n  IDropdownOption,\n  IDropdownStyles,\n  Link,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { logout } from \"../redux/actions/auth\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\n\nimport * as Utils from \"../Utils\";\n\nimport logo_ms from \"../assets/img/logo_ms.png\";\nimport logo_nuage from \"../assets/img/logo_nuage.png\";\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from \"../redux/reducers\";\nimport { setMenuType } from \"../redux/actions/roleType\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { changeLanguge, onChangeLanguage } from \"../redux/actions/application\";\nimport ReactFlagsSelect from 'react-flags-select';\n\nimport i18n from \"../i18n\";\n\nfunction MainHeader(props: { children: any }) {\n  const { children } = props;\n  initializeIcons();\n  const languageOption: IDropdownOption[] = [\n    { key: \"en\", text: \"English\", data: { icon: \"AADLogo\" } },\n    { key: \"fr\", text: \"French\" },\n    // { key: \"hi\", text: \"Hungarian\" },\n  ];\n  // const { t, i18n } = useTranslation();\n  // useEffect(() => {\n  //   customSideBar();\n  //   initSideBar();\n  // }, []);\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n      // color: \"#FFF\",\n      backgroundColor: \"#FFF\",\n    },\n  };\n\n  const dispatch = useDispatch();\n  const selectedLanguage = useSelector(\n    (state: RootState) => state.application.language\n  );\n\n  const handleLogout = () => {\n    window.open(\"http://52.146.0.154/api/method/logout\", \"_self\");\n    dispatch(logout());\n  };\n\n  const handleCustomSidebar = () => {\n    initSideBar();\n    customSideBar();\n  };\n\n  const history = useHistory();\n\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\n  const userData = useSelector((state: RootState) => state.userData.UserData);\n\n  // console.log(\"userData\", userData);\n  const [selectedCountry, setSelectedCountry] = useState(\"\")\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  // const userName = props.userData.UserData[0].name;\n  // const userId = props.userData.UserData[0].id;\n\n  const renderMenuLogo = () => {\n    if (menuType == 0) {\n      return (\n        <span className=\"logo-text\">\n          <img src={logo_text} alt=\"homepage\" className=\"light-logo\" />\n        </span>\n      );\n    }\n  };\n\n  const handleLanguage = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    // setLanguage(\n    //   item || {\n    //     key: \"\",\n    //     text: \"\",\n    //   }\n    // );\n    let data: any = item?.key || \"\";\n    dispatch(onChangeLanguage(data));\n    i18n.changeLanguage(data);\n  };\n\n  const handleNewLang = (code:any)=>{\n    dispatch(onChangeLanguage(code));\n    i18n.changeLanguage(code);\n  \n    console.log(\"code\", code)\n  }\n\n  return (\n    <header className=\"topbar\" data-navbarbg=\"skin5\">\n      <nav className=\"navbar top-navbar navbar-expand-md navbar-dark\">\n        <div\n          className=\"navbar-collapse collapse\"\n          id=\"navbarSupportedContent\"\n          data-navbarbg=\"skin5\"\n        >\n          <ul className=\"navbar-nav float-left mr-auto\">\n            <li className=\"nav-item d-none d-md-block\">\n              <a\n                className=\"nav-link sidebartoggler waves-effect waves-light\"\n                href=\"#\"\n                data-sidebartype=\"mini-sidebar\"\n                // onClick={handleCustomSidebar}\n              >\n                {/* <i className=\"mdi mdi-chevron-left font-24\"></i> */}\n                {children}\n              </a>\n            </li>\n            <div className=\"main-logo\">\n              <img src={logo_nuage} />\n            </div>\n          </ul>\n\n          <div className=\"mx-auto text-white-50\">\n            <Text style={{ marginRight: \"10px\" }}>\n              {i18n.t(\"main_header.welcome\")} {userData[0].name} (\n              {userData[0].id})\n            </Text>\n\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              {i18n.t(\"main_header.logged_in\")} :\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {moment(dateNow).format(\"DD-MM-YYYY\")} {timeNow}\n            </Text>\n          </div>\n          <ul className=\"navbar-nav float-right ml-auto d-flex align-items-center\">\n          <ReactFlagsSelect\n            selected ={selectedLanguage}\n            onSelect = {handleNewLang}\n            className=\"flagSelect\"\n            countries={[\"US\",\"FR\"]}\n            customLabels={{\"US\": \"English\",\"FR\": \"French\"}}\n            placeholder=\"Select Language\" \n          />\n            {/* <div>\n              <Dropdown\n                options={languageOption}\n                onChange={handleLanguage}\n                placeholder=\"Select language\"\n                selectedKey={\n                  languageOption.find((item) => item.key === selectedLanguage)\n                    ?.key\n                }\n                className=\"rolesDropDown mr-3\"\n                styles={dropdownStyles}\n              />\n            </div> */}\n            <div\n              style={{ cursor: \"pointer\" }}\n              className=\"link-icons px-2 nav-link\"\n            >\n              <NotificationsIcon style={{ fontSize: \"2rem\" }} />\n            </div>\n            <div\n              style={{ cursor: \"pointer\" }}\n              className=\"link-icons px-2 nav-link\"\n            >\n              <SmsIcon style={{ fontSize: \"2rem\" }} />\n            </div>\n            <div\n              style={{ cursor: \"pointer\" }}\n              className=\"link-icons px-2 nav-link\"\n              onClick={() => {\n                handleLogout();\n              }}\n            >\n              <PowerSettingsNewIcon style={{ fontSize: \"2rem\" }} />\n            </div>\n            <img src={logo_ms} className=\"ms-logo-center\" />\n            {/* <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle text-muted waves-effect waves-dark pro-pic\"\n                href=\"\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <img\n                  src={user1}\n                  alt=\"user\"\n                  className=\"rounded-circle\"\n                  width=\"31\"\n                />\n              </a>\n              <div className=\"dropdown-menu dropdown-menu-right user-dd animated\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-user m-r-5 m-l-5\"></i> My Profile\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-wallet m-r-5 m-l-5\"></i> My Balance\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-email m-r-5 m-l-5\"></i> Inbox\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-settings m-r-5 m-l-5\"></i> Account Setting\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"fa fa-power-off m-r-5 m-l-5\"></i> Logout\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <div className=\"p-l-30 p-10\">\n                  <a href=\"#\" className=\"btn btn-sm btn-success btn-rounded\">\n                    View Profile\n                  </a>\n                </div>\n              </div>\n            </li> */}\n          </ul>\n        </div>\n      </nav>\n    </header>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(MainHeader);\n","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx",["245","246","247","248","249","250","251","252"],"import {\n  ITextFieldStyles,\n  PrimaryButton,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/actions/auth\";\nimport logo_ms from \"../../assets/img/logo_ms.png\";\nimport banner_main from \"../../assets/img/megasoft_hrms.jpg\";\nimport \"./style.css\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      width: \"300px\",\n    },\n  };\n\n  // const handleLogin = () => {\n  //   login().then((response) => {\n  //     if (response.message == true) {\n  //       dispatch(auth('uayuyauyuyauyuay', {}));\n  //     }\n  //   });\n  // };\n\n  // const handleLogin = () => {\n  //    window.open( 'https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/auth?redirect_uri=http%3A%2F%2Flocalhost%3A3000&state=eyJzaXRlIjogImh0dHA6Ly81Mi4xNDYuMC4xNTQ6ODAwMSIsICJ0b2tlbiI6ICIzNWQxYTc3MDk4MGNiODY3Yzg2ZjM3ZTllNDlkYWM3YTc2MTM4Y2FhYzM4YTI2OTc3MTQzNDhjYiIsICJyZWRpcmVjdF90byI6IG51bGx9&scope=openid&response_type=code&client_id=ms-hrms')}\n  // };\n\n  return (\n    <div className=\"login-section\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <div className=\"login-banner-image\">\n            <div className=\"login-banner-image-overlay\">\n              <div className=\"overlay-text-alignment\">\n                <div className=\"login-banner-text\">\n                  <h2>Making</h2>\n                  <p>\n                    Organizations Run Effectively By Providing Innovative HRMS\n                    Solutions Globally\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"text-right pt-3 pr-4\">\n            <img src={logo_ms} className=\"ms-logo-login\" />\n          </div>\n          <div className=\"login-form\">\n            <div className=\"login-form-center\">\n              <div\n                style={{\n                  marginTop: \"3rem\",\n                  justifyContent: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <PrimaryButton\n                  text=\"Proceed with Megasoft Login\"\n                  style={{ marginTop: \"20px\" }}\n                  allowDisabledFocus\n                  onClick={() => {\n                    window.open(\n                      \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\n                      \"_self\"\n                    );\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <div\n        style={{\n          display: \"flex\",\n          padding: \"10px\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <img src={logo_ms} className=\"ms-logo\" />\n      </div>\n      <div\n        style={{\n          marginTop: \"10rem\",\n          justifyContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <PrimaryButton\n          text=\"Login\"\n          style={{ marginTop: \"20px\" }}\n          allowDisabledFocus\n          onClick={() => {\n            window.open(\n              \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\n              \"_self\"\n            );\n          }}\n        />\n      </div> */}\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(Login);\n","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx",["253","254","255"],"import {\n  Checkbox,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  Label,\n  PrimaryButton,\n  Separator,\n  Stack,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\nimport { RootState } from \"../../redux/reducers\";\nimport { useTranslation } from \"react-i18next/\";\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nconst stackTokens = { childrenGap: 10 };\n\nfunction AppraisalDetail(props: any) {\n  const params = useParams<ParamTypes>();\n\n  const { t, i18n } = useTranslation();\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setAppraisalDetail(response.data[0]);\n    });\n  }, []);\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: i18n.t(\"breadcrumb_itmes.performance\"), key: \"d1\" },\n    {\n      text: i18n.t(\"breadcrumb_itmes.appraisal\"),\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: i18n.t(\"breadcrumb_itmes.appraisal_details\"), key: \"d3\", as: \"h4\" },\n  ];\n\n  const reviewDate = moment(appraisalDetail.review_from).format(\"DD-MM-YYYY\");\n  const appraisalTo = moment(appraisalDetail.appraisal_to).format(\"DD-MM-YYYY\");\n\n  const renderData = () => {\n    return (\n      <React.Fragment>\n        <div className=\"card\">\n          <div className=\"emp-details-section\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <span>{i18n.t(\"form.ID\")}</span> : {appraisalDetail.id}\n              </div>\n              <div className=\"col-md-8\">\n                <span>{i18n.t(\"form.Description\")}</span> :{\" \"}\n                {appraisalDetail.appraisal_description}\n              </div>\n              <div className=\"col-md-4\">\n                <span>{i18n.t(\"form.Review_From\")}</span> : {reviewDate}\n              </div>\n              <div className=\"col-md-8\">\n                <span>{i18n.t(\"form.Appraisal_To\")}</span> : {appraisalTo}\n              </div>\n              <div className=\"col-md-4\">\n                <span>{i18n.t(\"form.Review_Frequency\")}</span> :{\" \"}\n                {appraisalDetail.review_frequency}\n              </div>\n              <div className=\"col-md-8\">\n                <span>{i18n.t(\"form.Type\")}</span> : {appraisalDetail.type}\n              </div>\n              <div className=\"col-md-4\">\n                <span>{i18n.t(\"form.Format_Type\")}</span> :{\" \"}\n                {appraisalDetail.format_type}\n              </div>\n              <div className=\"col-md-8\">\n                <span>{i18n.t(\"form.Owner\")}</span> :{\" \"}\n                {appraisalDetail.appraisal_owner}\n              </div>\n             \n            </div>\n          </div>\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>{i18n.t(\"form.KRA_Settings_Tabs\")}</Label>\n              <Checkbox\n                disabled={true}\n                label={i18n.t(\"job_history\")}\n                title={\"Competencies\"}\n                checked={appraisalDetail.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n              />\n              <Checkbox\n                disabled={true}\n                label={i18n.t(\"goals\")}\n                title={\"Goals\"}\n                checked={appraisalDetail.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n              />\n              <Checkbox\n                disabled={true}\n                label={i18n.t(\"training_and_development\")}\n                title={\"Development Plans\"}\n                checked={appraisalDetail.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n              />\n              \n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            ></div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  const dispatch = useDispatch();\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderData()} </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AppraisalDetail);\n","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx",["256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport {\n  ComboBox,\n  DetailsList,\n  Dropdown,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IComboBox,\n  IComboBoxOption,\n  IDetailsListStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  PrimaryButton,\n  Spinner,\n  SpinnerSize,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\nimport { RootState } from \"../../redux/reducers\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport { useTranslation } from \"react-i18next/\";\nimport { filterByEmployee } from \"../../redux/actions/apprisal\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\nfunction GoalSetting(props: any) {\n  const dispatch = useDispatch();\n  const { t, i18n } = useTranslation();\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start, setLimitStart] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [role, setRole] = useState(\"Employee\");\n  const [currentPage, setCurentPage] = useState(0);\n  const [limitPageLength, setLimitPageLength] = useState(3);\n  const [limitStart, setLimitSTart] = useState(0);\n  const [filterByStatus, setFilterByStatus] = useState(\"\");\n  const [filterByName, setFilterByName] = useState(\"\");\n  const [order_by] = useState(\"employee_name asc\");\n\n  const employee = useSelector((state: RootState): any => state.employeeList);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const { employeeList, isLoading, total_count, count } = employee;\n  const comboBoxRef = useRef<IComboBox>(null);\n  const [filterOption, setFilterOption] = useState([]);\n\n  useEffect((): void => {\n    filterByEmployee(order_by).then((response) => {\n      setFilterOption(response.data);\n    });\n  }, []);\n\n  const comboBoxBasicOptions: IComboBoxOption[] = filterOption.map(\n    (element: any) => ({\n      key: element.employee_id,\n      text: element.employee_name,\n    })\n  );\n\n  const [searchByName, setSearchByName]: any = useState(\"\");\n\n  const handleEmployeeName = (\n    event: React.FormEvent<IComboBox>,\n    option?: IComboBoxOption,\n    index?: number,\n    value?: string\n  ) => {\n    // console.log(\"option.key\", option?.key);\n    setSearchByName(option?.key || \"\");\n  };\n\n  useEffect((): void => {\n    const filters = [];\n    if (filterByStatus) {\n      filters.push([\"status\", \"like\", filterByStatus]);\n    }\n    if (filterByName) {\n      filters.push([\"employee_id\", \"like\", filterByName]);\n    }\n    dispatch(\n      fetchEmployeeData(\n        doctype,\n        limit_start,\n        limit,\n        roleType,\n        JSON.stringify(filters)\n      )\n    );\n  }, [doctype, limit_start, limit, filterByStatus, roleType, filterByName]);\n\n  const [status, setStatus] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n  const history = useHistory();\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 250,\n      border: \"0px\",\n    },\n  };\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      backgroundColor: \"#344f84\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const statusOption: IDropdownOption[] = [\n    { key: \"\", text: \"Select\" },\n    { key: \"Pending with Employee\", text: \"Pending with Employee\" },\n    { key: \"Pending with Reviewer\", text: \"Pending with Reviewer\" },\n    { key: \"Pending Counter Signing\", text: \"Pending Counter Signing\" },\n    { key: \"Complete\", text: \"Complete\" },\n  ];\n\n  const columns: IColumn[] = [\n    // {\n    //   key: \"01\",\n    //   name: \"S.No\",\n    //   fieldName: \"sno\",\n    //   minWidth: 50,\n    //   maxWidth: 50,\n    //   isSorted: true,\n    //   className: \"idColumn\",\n    //   isSortedDescending: false,\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\n    //   isRowHeader: true,\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\n    //   isResizable: false,\n    // },\n    {\n      key: \"02\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 110,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <PrimaryButton\n            text=\"KRA Setting\"\n            allowDisabledFocus\n            onClick={() => {\n              handleKraData(item);\n            }}\n            className=\"action-btn\"\n            style={{\n              padding: \"0px\",\n              fontSize: \"0.75rem\",\n              height: \"24px\",\n              borderRadius: \"3px\",\n            }}\n            disabled={false}\n            checked={false}\n          />\n        </div>\n      ),\n    },\n\n    {\n      key: \"03\",\n      name: i18n.t(\"goal_setting.employee_id\"),\n      fieldName: \"employee_id\",\n      minWidth: 50,\n      maxWidth: 90,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: i18n.t(\"goal_setting.employee_name\"),\n      fieldName: \"employee_name\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    // {\n    //   key: \"05\",\n    //   name: \"Manager ID\",\n    //   fieldName: \"manager_id\",\n    //   minWidth: 50,\n    //   maxWidth: 100,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    // },\n    {\n      key: \"06\",\n      name: i18n.t(\"goal_setting.manager_name\"),\n      fieldName: \"manager_name\",\n      minWidth: 50,\n      maxWidth: 140,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: i18n.t(\"goal_setting.status\"),\n      fieldName: \"status\",\n      minWidth: 50,\n      maxWidth: 170,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: i18n.t(\"goal_setting.appraisal_type\"),\n      fieldName: \"appraisal_type\",\n      minWidth: 50,\n      maxWidth: 260,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n  ];\n\n  const handleKraData = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/${item.employee_id}/${item.appraisal_id}`\n    );\n    // history.push(\"/appraisal/goalsetting/view\");\n  };\n\n  const handleSearch = () => {\n    setFilterByStatus(`${status?.key || \"\"}`);\n    setFilterByName(`${searchByName || \"\"}`);\n  };\n\n  const onChangeStatus = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setStatus(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: i18n.t(\"breadcrumb_itmes.performance\"), key: \"d1\" },\n    {\n      text: i18n.t(\"breadcrumb_itmes.appraisal\"),\n      key: \"d2\",\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    // { text: \"Employee\", key: \"d3\", as: \"h4\" },\n    {\n      text: i18n.t(\"breadcrumb_itmes.goal_setting\"),\n      key: \"d4\",\n      isCurrentItem: true,\n      as: \"h4\",\n    },\n  ];\n\n  const renderNoData = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          marginTop: \"20px\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text\n          style={{\n            color: \"#aaa\",\n            textAlign: \"center\",\n            padding: 50,\n            fontSize: 30,\n          }}\n        >\n          No Data Found.\n        </Text>\n      </div>\n    );\n  };\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          <div className=\"card advance-search-section\">\n            <div\n              // className=\"card\"\n              style={{\n                display: \"flex\",\n              }}\n            >\n              <Dropdown\n                label={i18n.t(\"goal_setting.status\")}\n                placeholder=\"Select\"\n                options={statusOption}\n                className=\"reviewFrequency\"\n                onChange={onChangeStatus}\n                style={{ padding: \"0px\" }}\n                styles={dropdownStyles}\n              />\n              {roleType === \"Manager\" ? (\n                <ComboBox\n                  componentRef={comboBoxRef}\n                  className=\"reviewFrequency\"\n                  placeholder=\"Enter Employee Name\"\n                  label=\"Employee Name\"\n                  onChange={handleEmployeeName}\n                  allowFreeform\n                  style={{ marginLeft: \"10px\" }}\n                  autoComplete=\"on\"\n                  options={comboBoxBasicOptions}\n                />\n              ) : null}\n              <PrimaryButton\n                iconProps={{ iconName: \"Search\" }}\n                style={{\n                  marginLeft: \"20px\",\n                  alignSelf: \"center\",\n                  marginTop: \"24px\",\n                }}\n                onClick={handleSearch}\n              />\n            </div>\n          </div>\n          {isLoading ? (\n            <Spinner\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"50px\",\n                color: \"#00597d\",\n              }}\n              size={SpinnerSize.large}\n            />\n          ) : employeeList.length === 0 ? (\n            renderNoData()\n          ) : (\n            <div className=\"card\">\n              <DetailsList\n                styles={listStyle}\n                items={employeeList}\n                className=\"detail-list\"\n                columns={columns}\n                selectionMode={0}\n              />\n              <div className=\"pagination-style\">\n                <Pagination\n                  format=\"buttons\"\n                  selectedPageIndex={currentPage}\n                  pageCount={Math.ceil(total_count / limitPageLength)}\n                  itemsPerPage={limitPageLength}\n                  totalItemCount={total_count}\n                  onPageChange={(page) => {\n                    setLimitSTart(page * limitPageLength);\n                    setCurentPage(page);\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalSetting);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx",["268","269","270","271"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { useParams } from \"react-router-dom\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\n];\n\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nfunction UpdateAppraisal(props: any) {\n  const params = useParams<ParamTypes>();\n  const stackTokens = { childrenGap: 10 };\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [updateData, setUpdateData]: any = useState({});\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setUpdateData(response.data[0]);\n    });\n  }, []);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      \".ms-TextField-wrapper\": {\n        borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   marginRight: \"10px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n  \n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleUpdateApprisal = () => {\n    const updateQuery = {\n      ...updateData,\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\n      description: \"22\",\n      route: \"appraisal/BB00002\",\n    };\n    // console.log(\"updateQuery=>\", updateQuery);\n    edit_appraisal(updateQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderUpdateForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container card\">\n          <div className=\"goal-details\">\n            <TextField\n              disabled\n              placeholder=\"ID\"\n              value={updateData.id}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={updateData.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"goal-details\">\n            <DatePicker\n              isRequired\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={new Date(updateData.review_from)}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, review_from: date })\n              }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired\n              label=\"Appraisal To\"\n              value={new Date(updateData.appraisal_to)}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, appraisal_to: date })\n              }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === updateData.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow w33\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, review_frequency: item?.text })\n              }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <Dropdown\n              required\n              selectedKey={\n                typeOptions.find((item) => item.text === updateData.type)?.key\n              }\n              label=\"Type\"\n              placeholder=\"Select Type\"\n              className=\"flexGrow w33\"\n              options={typeOptions}\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, type: item?.text })\n              }\n              // styles={typeDropdownStyles}\n            />\n            <Dropdown\n              required\n              selectedKey={\n                formateTypeOptions.find(\n                  (item) => item.text === updateData.format_type\n                )?.key\n              }\n              label=\"Format Type\"\n              className=\"flexGrow w33\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, format_type: item?.text })\n              }\n              placeholder=\"Select Format Type\"\n              options={formateTypeOptions}\n              // styles={typeDropdownStyles}\n            />\n            <TextField\n              required\n              label=\"Owner\"\n              placeholder=\"Owner\"\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\n              onGetErrorMessage={(v) =>\n                new RegExp(\n                  \"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"\n                ).test(v)\n                  ? \"\"\n                  : \"Please give currect pattern\"\n              }\n              value={updateData.appraisal_owner}\n              styles={textfelidStyle}\n              name=\"appraisal_owner\"\n              className=\"flexGrow w33\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={updateData.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={updateData.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal updated Successfully.\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-failed\">\n                  Somthing went wrong. Please try again.\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  \n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderUpdateForm()}</div>\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(UpdateAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx",["272","273","274","275","276","277","278","279","280","281"],"import React, { useEffect, useState } from \"react\";\nimport {\n  DetailsList,\n  IColumn,\n  IDetailsListStyles,\n} from \"office-ui-fabric-react/lib/DetailsList\";\nimport \"office-ui-fabric-react/dist/css/fabric.css\";\nimport {\n  PrimaryButton,\n  getTheme,\n  TextField,\n  Dropdown,\n  IDropdownOption,\n  IDropdownStyles,\n  Link,\n  Spinner,\n  SpinnerSize,\n  Modal,\n  IconButton,\n  IModalStyles,\n  IIconProps,\n} from \"office-ui-fabric-react\";\nimport {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\nimport Header from \"../../Header\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\n\nimport \"./style.css\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  edit_appraisal,\n  fetchAppraisalData,\n  fetchAppraisalDataById,\n} from \"../../redux/actions/apprisal\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nfunction Appraisal(props: any) {\n  const { t, i18n } = useTranslation();\n  const history = useHistory();\n  const [limitStart, setLimitSTart] = useState(0);\n  const [limitPageLength, setLimitPageLength] = useState(5);\n  const [orderBy, setOrderBy] = useState(\"asc\");\n  const [orderByField, setOrderByField] = useState(\"id\");\n  const [filtersById, setFiltersById] = useState(\"\");\n  const [filtersByDescription, setFiltersByDescription] = useState(\"\");\n  const [filtersByReviewFreq, setFiltersByReviewFreq] = useState(\"\");\n  const [filtersByAppraisal, setFiltersByAppraisal] = useState(\"\");\n  const [filtersByFormat, setFiltersByFormat] = useState(\"\");\n  const dispatch = useDispatch();\n  const appraisal = useSelector((state: RootState) => state.appraisal);\n  const { appraisalList, isLoading, count, total_count }: any = appraisal;\n  const [formatDate, setFormatDate] = useState(\"\");\n\n  const params = useParams<ParamTypes>();\n\n  const newAppraisalList = appraisalList.map((element: any) => {\n    // console.log(\"element=>\", element);\n    const a = {\n      ...element,\n      review_from: moment(element.review_from).format(\"DD-MM-YYYY\"),\n      appraisal_to: moment(element.appraisal_to).format(\"DD-MM-YYYY\"),\n    };\n    return a;\n  });\n\n  \n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    if (filtersByDescription) {\n      filters.push([\"appraisal_description\", \"like\", filtersByDescription]);\n    }\n    if (filtersByReviewFreq) {\n      filters.push([\"review_frequency\", \"=\", filtersByReviewFreq]);\n    }\n    if (filtersByAppraisal) {\n      filters.push([\"type\", \"=\", filtersByAppraisal]);\n    }\n    if (filtersByFormat) {\n      filters.push([\"format_type\", \"=\", filtersByFormat]);\n    }\n    dispatch(\n      fetchAppraisalData(\n        limitStart,\n        limitPageLength,\n        `${orderByField} ${orderBy}`,\n        JSON.stringify(filters)\n      )\n    );\n  }, [\n    limitStart,\n    limitPageLength,\n    orderBy,\n    filtersById,\n    filtersByDescription,\n    filtersByReviewFreq,\n    filtersByAppraisal,\n    filtersByFormat,\n  ]);\n\n  \n  const columns: IColumn[] = [\n    {\n      key: \"01\",\n      name: i18n.t(\"form.ID\"),\n      fieldName: \"id\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSorted: true,\n      className: \"idColumn\",\n      isSortedDescending: false,\n      sortAscendingAriaLabel: \"Sorted A to Z\",\n      isRowHeader: true,\n      onColumnClick: _onColumnClick,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: i18n.t(\"form.Description\"),\n      fieldName: \"appraisal_description\",\n      minWidth: 100,\n      maxWidth: 200,\n      isMultiline: true,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"05\",\n      name: i18n.t(\"form.Review_From\"),\n      fieldName: \"review_from\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: i18n.t(\"form.Appraisal_To\"),\n      fieldName: \"appraisal_to\",\n      minWidth: 50,\n      maxWidth: 120,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"06\",\n      name: i18n.t(\"form.Type\"),\n      fieldName: \"type\",\n      minWidth: 50,\n      maxWidth: 160,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: i18n.t(\"form.Format_Type\"),\n      fieldName: \"format_type\",\n      minWidth: 50,\n      maxWidth: 160,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: i18n.t(\"form.Review_Frequency\"),\n      fieldName: \"review_frequency\",\n      minWidth: 50,\n      maxWidth: 160,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"02\",\n      name: i18n.t(\"form.action\"),\n      fieldName: \"action\",\n      minWidth: 110,\n      maxWidth: 110,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              viewAppraisal(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateAppriasal(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              deleteAppraisal(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [showDelete, setShowDelete] = useState(false);\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const theme = getTheme();\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const [deleteItemId, setDeleteItemId] = useState(null);\n  const [updateData, setUpdateData]: any = useState({});\n\n  const deleteAppraisal = (item: any) => {\n    setDeleteItemId(item.id);\n    // console.log(\"item id\", item)\n    const filters = [];\n    if (item.name) {\n      filters.push([\"id\", \"like\", item.name]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(response.data)\n      setUpdateData(response.data[0]);\n    });\n    setShowDelete(true);\n  };\n\n  const handleDeleteAppraisal = () => {\n    const deleteQuery = {\n      id: deleteItemId,\n      is_deleted: 1,\n    };\n    edit_appraisal(deleteQuery).then((response) => {\n      setShowDelete(false);\n      setShowDeleteSuccess(true);\n      setDeleteItemId(null);\n      setUpdateData(null);\n    });\n  };\n\n  const viewAppraisal = (item: any) => {\n    history.push(`/appraisal/view/${item.id}`);\n  };\n\n  const updateAppriasal = (item: any) => {\n    history.push(`/appraisal/update/${item.id}`);\n  };\n\n  const _onBreadcrumbItemClicked = () => {};\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    {\n      text: i18n.t(\"breadcrumb_itmes.performance\"),\n      key: \"d1\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    {\n      text: i18n.t(\"breadcrumb_itmes.appraisal\"),\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n    },\n  ];\n\n  const handleSearchClick = () => {\n    setFiltersById(`${searchById}%`);\n    setFiltersByDescription(`${searchByDescription}%`);\n    setFiltersByReviewFreq(`${reviewSearch?.key || \"\"}`);\n    setFiltersByAppraisal(`${AppraisalSearch?.key || \"\"}`);\n    setFiltersByFormat(`${formatSearch?.key || \"\"}`);\n    setLimitSTart(0);\n    setCurentPage(0);\n  };\n\n  function _onColumnClick(\n    ev?: React.MouseEvent<HTMLElement>,\n    column?: IColumn\n  ): void {\n    // console.log('column', column)\n    if (column?.fieldName === orderByField) {\n      if (orderBy === \"asc\") {\n        setOrderBy(\"desc\");\n      } else {\n        setOrderBy(\"asc\");\n      }\n    } else {\n      setOrderByField(column?.fieldName || \"id\");\n    }\n  }\n\n  const controlStyles = {\n    root: {\n      margin: \"0 10px 20px 0\",\n      maxWidth: \"300px\",\n      // borderRadius: \"20px\",\n    },\n\n    wrapper: {\n      \".ms-TextField-fieldGroup fieldGroup-91\": {\n        borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const [currentPage, setCurentPage] = useState(0);\n\n  const [searchById, setSearchById] = useState(\"\");\n  const [searchByDescription, setSearchByDescription] = useState(\"\");\n  \n\n  const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [AppraisalSearch, setAppraisalSearch] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [formatSearch, setForamtSearch] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const itemSearch = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    setSearchById(text || \"\");\n    \n  };\n\n  const itemSearchDescription = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    setSearchByDescription(text || \"\");\n    \n  };\n\n  const itemSearchReview = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setReviewSearch(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const itemSearchAppraisal = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setAppraisalSearch(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const itemSearchFormatType = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setForamtSearch(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      backgroundColor: \"#344f84\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const searchOptions: IDropdownOption[] = [\n    { key: \"\", text: \"Select\" },\n    { key: \"Yearly\", text: \"Yearly\" },\n    { key: \"Monthly\", text: \"Monthly\" },\n  ];\n\n  const searchFormatType: IDropdownOption[] = [\n    { key: \"\", text: \"Select\" },\n    { key: \"Sales Employees\", text: \"Sales Employees\" },\n    { key: \"Non Sales Employees\", text: \"Non Sales Employees\" },\n  ];\n\n  const searchAppraisal: IDropdownOption[] = [\n    { key: \"\", text: \"Select\" },\n    { key: \"Annual Appraisal\", text: \"Annual Appraisal\" },\n    { key: \"Confirmation Appraisal\", text: \"Confirmation Appraisal\" },\n  ];\n\n  \n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      // width: 170,\n      border: \"0px\",\n    },\n  };\n\n  const [advanceSearch, setAdvanceSearch] = useState(false);\n\n  const handleAdvanceSearch = () => {\n    if (advanceSearch == false) {\n      setAdvanceSearch(true);\n    }\n    if (advanceSearch == true) {\n      setAdvanceSearch(false);\n    }\n  };\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  \n\n  const renderNoData = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          marginTop: \"20px\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text\n          style={{\n            color: \"#aaa\",\n            textAlign: \"center\",\n            padding: 50,\n            fontSize: 30,\n          }}\n        >\n          No Appraisal Data Found\n        </Text>\n      </div>\n    );\n  };\n\n  \n  const renderData = () => {\n    return (\n      <React.Fragment>\n        <div className=\"card advance-search-section\">\n          <div className=\"searchBarClass\">\n            <TextField\n              label={t(\"form.ID\")}\n              onChange={itemSearch}\n              placeholder={t(\"placeholder.id\")}\n              className=\"searchInput\"\n              styles={controlStyles}\n            />\n            <TextField\n              placeholder={t(\"placeholder.description\")}\n              label={t(\"form.Description\")}\n              className=\"searchInput\"\n              onChange={itemSearchDescription}\n              styles={controlStyles}\n            />\n            <Dropdown\n              label={t(\"form.Review_Frequency\")}\n              placeholder={t(\"placeholder.select\")}\n              options={searchOptions}\n              className=\"reviewFrequency\"\n              onChange={itemSearchReview}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            />\n            <div\n              style={{\n                marginTop: \"1.8rem\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                handleAdvanceSearch();\n              }}\n            >\n              <MoreHorizIcon style={{ color: \"#344f84\", marginLeft: \"20px\" }} />\n            </div>\n            <PrimaryButton\n              iconProps={{ iconName: \"Search\" }}\n              onClick={handleSearchClick}\n              style={{\n                marginLeft: \"10px\",\n                alignSelf: \"center\",\n                marginTop: \"14px\",\n              }}\n            />\n            <PrimaryButton\n              text={t(\"buttons.addNew\")}\n              iconProps={{ iconName: \"Add\" }}\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/addApprisal\");\n              }}\n              style={{\n                marginLeft: \"auto\",\n                alignSelf: \"center\",\n                marginTop: \"14px\",\n              }}\n              disabled={false}\n              checked={false}\n            />\n          </div>\n          <div\n            className={\n              advanceSearch == true ? `advanceSearch` : `advanceSearchNull`\n            }\n          >\n            <Dropdown\n              label={t(\"form.Appraisal_To\")}\n              placeholder={t(\"placeholder.select\")}\n              options={searchAppraisal}\n              className=\"reviewFrequency\"\n              onChange={itemSearchAppraisal}\n              style={{ padding: \"0px\", marginRight: \"10px\" }}\n              styles={dropdownStyles}\n            />\n            <Dropdown\n              label={t(\"form.Review_From\")}\n              placeholder={t(\"placeholder.select\")}\n              options={searchFormatType}\n              className=\"reviewFrequency\"\n              onChange={itemSearchFormatType}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            />\n          </div>\n        </div>\n\n        {isLoading ? (\n          <Spinner\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: \"50px\",\n              color: \"#00597d\",\n            }}\n            size={SpinnerSize.large}\n          />\n        ) : appraisalList.length === 0 ? (\n          renderNoData()\n        ) : (\n          <div className=\"card\">\n            <DetailsList\n              styles={listStyle}\n              items={newAppraisalList}\n              className=\"detail-list\"\n              columns={columns}\n              selectionMode={0}\n            />\n            <div className=\"pagination-style\">\n              <Pagination\n                format=\"buttons\"\n                selectedPageIndex={currentPage}\n                pageCount={Math.ceil(total_count / limitPageLength)}\n                itemsPerPage={limitPageLength}\n                totalItemCount={total_count}\n                onPageChange={(page) => {\n                  setLimitSTart(page * limitPageLength);\n                  setCurentPage(page);\n                }}\n              />\n            </div>\n          </div>\n        )}\n\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDelete}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">{t(\"delete_popup.heading\")}</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              {t(\"delete_popup.pop_up\")}\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text={t(\"delete_popup.heading\")}\n                allowDisabledFocus\n                onClick={handleDeleteAppraisal}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text={t(\"buttons.cancel\")}\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccess}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item deleted successfully.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  handleSearchClick();\n                  setShowDeleteSuccess(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderData()}</div>\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(Appraisal);\n\n\n","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx",["282","283","284","285","286","287","288","289","290","291"],"import React, { useState } from \"react\";\nimport {\n  TextField,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getColorFromString,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColor,\n  IColorPickerProps,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  ColorPicker,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\nimport { RootState } from \"../../redux/reducers\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n];\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\n];\n\n\nconst white = getColorFromString(\"#006994\")!;\n\nfunction AddAppraisal(props: any) {\n  const { t, i18n } = useTranslation();\n  const stackTokens = { childrenGap: 10 };\n  const [color, setColor] = useState(white);\n\n  const updateColor = (ev: any, colorObj: IColor) => {\n    setColor(colorObj);\n  };\n\n  const [showPreview, setShowPreview] = useState(true);\n  const [alphaType, setAlphaType] = React.useState<\n    IColorPickerProps[\"alphaType\"]\n  >(\"alpha\");\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    icon: {\n      color: \"#344f84\",\n    },\n  };\n\n  const [claimsData, setClaimsData] = useState({\n    id: \"\",\n    description: \"\",\n    owner: \"\",\n    kraSettingGoal: false,\n    kraSettingCompetencies: false,\n    kraSettingDevelopmentPlan: false,\n    kraSettingSummary: false,\n    assessmentGoal: false,\n    assessmentCompetencies: false,\n    assessmentDevelopmentPlan: false,\n    assessmentSummary: false,\n  });\n\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeType = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setSelectedType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n  // console.log(\"type==>\", selectedType.text )\n\n  const onChangeReviewFrequency = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setReviewFrequency(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: i18n.t(\"breadcrumb_itmes.performance\"), key: \"d1\" },\n    {\n      text: i18n.t(\"breadcrumb_itmes.appraisal\"),\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: i18n.t(\"breadcrumb_itmes.add_appraisal\"), key: \"d3\", as: \"h4\" },\n  ];\n\n  const [dateReview, setDateReview] = useState<Date | undefined>();\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\n\n  const reviewFromDate = (date: Date | null | undefined): void => {\n    setDateReview(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const appraisalToDate = (date: Date | null | undefined): void => {\n    setdDateAppraisal(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\n  const [errMsgType, setErrMsgType] = useState(\"\");\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleAddApprisal = () => {\n    let pattern = /^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$/;\n    if (claimsData.id === \"\" || claimsData.id.length > 5) {\n      setErrMsg(i18n.t(\"errorMsg.please_enter_id\"));\n    }\n    if (claimsData.description === \"\") {\n      setErrMsgDescription(i18n.t(\"errorMsg.please_enter_description\"));\n    }\n    if (!pattern.test(claimsData.owner)) {\n      setErrMsgOwner(\"Please give currect pattern \");\n    }\n    if (claimsData.owner === \"\") {\n      setErrMsgOwner(i18n.t(\"errorMsg.please_enter_owner_name\"));\n    }\n    if (formateType.text === \"\") {\n      setErrMsgFormatType(\"Select format Type\");\n    }\n    if (reviewFrequency.text === \"\") {\n      setErrMsgReviewFrequency(\"Select review Frequency\");\n    }\n    if (selectedType.text === \"\") {\n      setErrMsgType(\"Select type\");\n    }\n    if (dateReview === null) {\n      setErrMsgReviewDate(\"Select review date\");\n    }\n    const addQuery = {\n      id: claimsData.id,\n      appraisal_description: claimsData.description,\n      description: \"22\",\n      format_type: formateType.text,\n      review_frequency: reviewFrequency.text,\n      type: selectedType.text,\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\n      assessment_tab_goals: claimsData.assessmentGoal,\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\n      assessment_tab_summary: claimsData.assessmentSummary,\n      route: \"appraisal/BB00002\",\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\n      appraisal_owner: claimsData.owner,\n    };\n    add_apprisal(addQuery).then((response) => {\n      console.log(\"response=>\", response);\n      if (response) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    })\n    .catch((err) => {\n      console.log(\"Error in btnClick=>\", JSON.stringify(err));\n    });\n  };\n\n  const renderForm = () => {\n    return (\n      <React.Fragment>\n        {/* <ColorPicker\n          color={color}\n          onChange={updateColor}\n          alphaType={alphaType}\n          showPreview={showPreview}\n          // styles={colorPickerStyles}\n        /> */}\n        <div className=\"form-container card\">\n          <div className=\"goal-details\">\n            <TextField\n              required\n              placeholder={t(\"placeholder.id\")}\n              value={claimsData.id}\n              errorMessage={errMsg}\n              name=\"id\"\n              label={t(\"form.ID\")}\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder={t(\"placeholder.description\")}\n              label={t(\"form.Description\")}\n              value={claimsData.description}\n              errorMessage={errMsgDescription}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"goal-details\">\n            <DatePicker\n              isRequired={true}\n              label={t(\"form.Review_From\")}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={dateReview}\n              onSelectDate={reviewFromDate}\n              placeholder={t(\"placeholder.select_a_date\")}\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired={true}\n              label={t(\"form.Appraisal_To\")}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeekAppraisal}\n              strings={DayPickerStringsAppraisal}\n              onSelectDate={appraisalToDate}\n              styles={datePickerStyle}\n              value={dateAppraisal}\n              placeholder={t(\"placeholder.select_a_date\")}\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgReviewFrequency}\n              label={t(\"form.Review_Frequency\")}\n              placeholder={t(\"placeholder.select\")}\n              className=\"flexGrow w33\"\n              onChange={onChangeReviewFrequency}\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n\n          <div className=\"goal-details\">\n            <Dropdown\n              required\n              label={t(\"form.Type\")}\n              errorMessage={errMsgType}\n              placeholder={t(\"placeholder.select_type\")}\n              className=\"flexGrow w33\"\n              options={typeOptions}\n              onChange={onChangeType}\n              // styles={typeDropdownStyles}\n            />\n            <Dropdown\n              required\n              label={t(\"form.Format_Type\")}\n              errorMessage={errMsgFormatType}\n              className=\"flexGrow w33\"\n              onChange={onChangeFormateType}\n              placeholder={t(\"placeholder.select_format_type\")}\n              options={formateTypeOptions}\n              // styles={typeDropdownStyles}\n            />\n            <TextField\n              required\n              label={t(\"form.Owner\")}\n              placeholder={t(\"placeholder.owner\")}\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\n              value={claimsData.owner}\n              className=\"flexGrow w33\"\n              errorMessage={errMsgOwner}\n              name=\"owner\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>{t(\"form.KRA_Settings_Tabs\")} </Label>\n              <Checkbox\n                label={t(\"job_history\")}\n                title={\"Competencies\"}\n                checked={claimsData.kraSettingCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={t(\"goals\")}\n                title={\"Goals\"}\n                checked={claimsData.kraSettingGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={t(\"training_and_development\")}\n                title={\"Development Plans\"}\n                checked={claimsData.kraSettingDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingDevelopmentPlan\"\n                onChange={onChangeCheckbox}\n              />\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">\n                    {t(\"success_popup.heading\")}\n                  </div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setSuccessModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  {t(\"success_popup.appraisal_success\")}\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text={t(\"buttons.ok\")}\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">{t(\"delete_popup.heading\")}</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-failed\">{t(\"delete_popup.message\")}</div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text={t(\"buttons.go_back\")}\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\", marginBottom: \"1rem\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text={t(\"buttons.add\")}\n                allowDisabledFocus\n                style={{ backgroundColor: color.str }}\n                onClick={handleAddApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text={t(\"buttons.cancel\")}\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n  const dispatch = useDispatch();\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderForm()}</div>\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(AddAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx",["292","293"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction JobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [appraisalId] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      setEmployeeDetails(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleAddJobHistory = () => {\n    if (jobHistoryData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryData.place === \"\") {\n      setErrMsgPlace(\"Place of posting is required\");\n    }\n    if (jobHistoryData.position === \"\") {\n      setErrMsgPosition(\"Position held is required\");\n    }\n    if (jobHistoryData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const addQuery = {\n      appraisal_id: appraisalId,\n      employee_id: filtersById,\n      key_responsibilities: jobHistoryData.responsibilities,\n      place_of_posting: jobHistoryData.place,\n      position_held: jobHistoryData.position,\n      qualifications: jobHistoryData.qualifications,\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\n    };\n    add_JobHistory(addQuery).then((response: any) => {\n      setSuccessModal(true);\n      // if (response.status === 200) {\n      // } else {\n      // }\n    })\n    .catch((err)=>{\n      console.log(\"error\", err)\n      setFailedModal(true);\n    })\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details card\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryData.position}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryData.place}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeFromDate}\n              value={fromDate}\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeToDate}\n              value={toDate}\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryData.responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx",["294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309"],"import {\n  DetailsList,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IconButton,\n  IDetailsListStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Link,\n  Modal,\n  Pivot,\n  PivotItem,\n  PivotLinkFormat,\n  PrimaryButton,\n  Spinner,\n  SpinnerSize,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistory,\n  jobHistoryData,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport {\n  fetchGoalData,\n  fetchGoalDataName,\n  update_goals,\n} from \"../../redux/actions/goal\";\nimport {\n  fetchDevelopmentPlan,\n  handleDevelopmentDataChange,\n} from \"../../redux/actions/developmentPlan\";\nimport \"./style.css\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction EmployeeDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [doctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start] = useState(0);\n  const [limit] = useState(10);\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByApprisal] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n\n  const [employeeData, setEmployeeData]: any = useState({});\n  const history = useHistory();\n\n  const [currentPage, setCurentPage] = useState(0);\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [limitPageLengthGoal] = useState(5);\n  const [limitStart, setLimitSTart] = useState(0);\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\n\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\n  const [count, setCount] = useState(0);\n\n  const [totalCount, setTotalCount] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [orderByJobHistory] = useState(\"from_date asc\");\n  const [limitPageLengthDevelopment] = useState(5);\n  const [developmentData, setDevelopmentData]: any = useState([]);\n\n  const [goalData, setGoalData]: any = useState({});\n  const [goalCount, setGoalCount] = useState(0);\n  const [employeeCount, setEmployeeCount] = useState(0);\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\n  const [developmentCount, setDevelopmentCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const jobHistoryDataLocal = useSelector(\n    (state: RootState) => state.jobHistory\n  );\n  const { jobHistory, isLoading, total_count }: any = jobHistoryDataLocal;\n  // console.log(\"jobHistoryDataLocal=>\", jobHistory);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    if (filtersByApprisal) {\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\n    }\n    fetchEmployeeDataByID(\n      doctype,\n      limit_start,\n      limit,\n      roleType,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setLoading(true);\n      // console.log(\"employee response ==>\", response);\n      setEmployeeCount(response.count);\n      setEmployeeData(response.data[0]);\n      setLoading(false);\n    });\n  }, [doctype, limit_start, limit, roleType]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    dispatch(\n      jobHistoryData(\n        roleType,\n        JSON.stringify(filters),\n        limitStart,\n        limitPageLength,\n        orderByJobHistory\n      )\n    );\n  }, [roleType, limitStart, limitPageLength, orderByJobHistory]);\n  const newJobHistoryData = jobHistory.map((element: any) => {\n    const a = {\n      ...element,\n      from_date: moment(element.from_date).format(\"DD-MM-YYYY\"),\n      to_date: moment(element.to_date).format(\"DD-MM-YYYY\"),\n    };\n    return a;\n  });\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limitStartGoal,\n      limitPageLengthGoal,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data);\n      setGoalCount(response.count);\n      setGoalTotalCount(response.total_count);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchDevelopmentPlan(\n      limitStartDevelopment,\n      limitPageLengthDevelopment,\n      orderByDevelopment,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Development===>\", response.data);\n      setDevelopmentCount(response.count);\n      let res = response.data;\n      for (let i = response.count; i < 5; i++) {\n        let emptyPlan = {\n          name: \"\",\n          appraisal_id: params.appraisalId,\n          employee_id: params.employeeId,\n          serial_no: i + 1,\n          development_plan: \"\",\n          reviewer_remarks: \"\",\n          frozen: 0,\n        };\n        res.push(emptyPlan);\n      }\n      setDevelopmentData(res);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const updateJobhistory = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\n    );\n  };\n\n  const jobHistoryDetails = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\n    );\n  };\n\n  const handleDevelopemntChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n              ...item,\n              development_plan: value || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const handleRemarkChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n              ...item,\n              reviewer_remarks: value || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const columnsJobHistory: IColumn[] = [\n    {\n      key: \"06\",\n      name: \"Position Held\",\n      fieldName: \"position_held\",\n      minWidth: 50,\n      maxWidth: 140,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"05\",\n      name: \"Place of Posting\",\n      fieldName: \"place_of_posting\",\n      minWidth: 50,\n      maxWidth: 110,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"From Date\",\n      fieldName: \"from_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"To Date\",\n      fieldName: \"to_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Key Responsibilities\",\n      fieldName: \"key_responsibilities\",\n      minWidth: 60,\n      maxWidth: 350,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 100,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              jobHistoryDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateJobhistory(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons \"\n            onClick={() => {\n              deleteJobHistoryData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [jobHistoryUpdate, setJobHistoryUpdateData]: any = useState({});\n  const [showDeleteSuccessJob, setShowDeleteSuccessJob] = useState(false);\n  const [showDeleteJob, setShowDeleteJob] = useState(false);\n  const [deleteItemJobName, setDeleteItemJobName] = useState(null);\n\n  const deleteJobHistoryData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n    setShowDeleteJob(true);\n  };\n\n  // console.log(\"deleteItemId=>\", updateData)\n\n  const handleDeleteJobhistory = () => {\n    const deleteQuery = {\n      name: jobHistoryUpdate.name,\n      is_deleted: 1,\n    };\n    update_JobHistory(deleteQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      setShowDeleteJob(false);\n      setShowDeleteSuccessJob(true);\n      setDeleteItemJobName(null);\n      setJobHistoryUpdateData(null);\n    });\n  };\n\n  const columnsTraning: IColumn[] = [\n    // {\n    //   key: \"1\",\n    //   name: \"S.No.\",\n    //   fieldName: \"serial_no\",\n    //   minWidth: 20,\n    //   maxWidth: 40,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    //   // onRender: (item, index) => (index || 0) + 1,\n    // },\n    {\n      key: \"02\",\n      name: \"Development Plan/Training Needs\",\n      fieldName: \"development_plan\",\n      minWidth: 60,\n      maxWidth: 550,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            rows={3}\n            value={item.development_plan}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleDevelopemntChange(index, text)}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n    {\n      key: \"03\",\n      name: \"Remark by Appraiser\",\n      fieldName: \"reviewer_remarks\",\n      minWidth: 80,\n      maxWidth: 350,\n      isRowHeader: true,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            readOnly={roleType === \"Employee\" ? true : false}\n            rows={3}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleRemarkChange(index, text)}\n            value={item.reviewer_remarks}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const columnsGoal: IColumn[] = [\n    {\n      key: \"02\",\n      name: \"S.No.\",\n      fieldName: \"order_no\",\n      minWidth: 20,\n      maxWidth: 50,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"11\",\n      name: \"Goal ID\",\n      fieldName: \"name\",\n      minWidth: 40,\n      maxWidth: 60,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"03\",\n      name: \"KRA\",\n      fieldName: \"kra\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"\",\n      fieldName: \"goal_type\",\n      minWidth: 10,\n      maxWidth: 30,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item) => (\n        <div>\n          {item.goal_type == \"Goal\" ? (\n            <div\n              className=\"link-icons\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <ArrowDropDownIcon\n                style={{ color: \"#00597d\", fontSize: \"30px\" }}\n              />\n            </div>\n          ) : (\n            <div\n              className=\"link-icons\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <RadioButtonUncheckedIcon\n                style={{\n                  color: \"#00597d\",\n                  fontSize: \"10px\",\n                  marginLeft: \"25px\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"05\",\n      name: \"Goal\",\n      fieldName: \"goal\",\n      minWidth: 50,\n      maxWidth: 280,\n      isMultiline: true,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"06\",\n      name: \"Measure\",\n      fieldName: \"measure\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Weightage\",\n      fieldName: \"weightage\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Target\",\n      fieldName: \"target\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"Threshold\",\n      fieldName: \"threshold\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"10\",\n      name: \"Stretch\",\n      fieldName: \"stretch\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 80,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              goalDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateGoals(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              deleteGoalData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [deleteItemId, setDeleteItemId] = useState(null);\n  const [updateData, setUpdateData]: any = useState({});\n  const [showDelete, setShowDelete] = useState(false);\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const theme = getTheme();\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const deleteGoalData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      setUpdateData(response.data[0]);\n    });\n    setShowDelete(true);\n  };\n\n\n  const handleDeleteGoal = () => {\n    const deleteQuery = {\n      name: updateData.name,\n      is_deleted: 1,\n    };\n    update_goals(deleteQuery).then((response) => {\n      setShowDelete(false);\n      setShowDeleteSuccess(true);\n      setDeleteItemId(null);\n      setUpdateData(null);\n    });\n  };\n\n\n  const [showDevelopment, setShowDevelopment] = useState(false);\n\n  const handleDevelpmentDatachange = () => {\n    const devPlan = [...developmentData];\n    const changedQuery = {\n      doctype: \"EmployeeDevelopmentPlan\",\n      data: {\n        dev_plans: devPlan,\n      },\n    };\n    handleDevelopmentDataChange(changedQuery).then((response: any) => {\n      setShowDevelopment(true);\n    });\n  };\n\n  const updateGoals = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\n  };\n\n  const goalDetails = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\n  };\n\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      marginTop: \"10px\",\n      backgroundColor: \"#344f84\",\n      paddingBottom: \"0px\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const renderNoData = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          marginTop: \"20px\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text\n          style={{\n            color: \"#aaa\",\n            textAlign: \"center\",\n            padding: 50,\n            fontSize: 30,\n          }}\n        >\n          No Data Found\n        </Text>\n      </div>\n    );\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistory = () => {\n    return (\n      <div>\n        {isLoading ? (\n          <Spinner\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: \"50px\",\n              color: \"#00597d\",\n            }}\n            size={SpinnerSize.large}\n          />\n        ) : jobHistory.length === 0 ? (\n          renderNoData()\n        ) : (\n          <div>\n            <DetailsList\n              styles={listStyle}\n              items={newJobHistoryData}\n              className=\"detail-list\"\n              columns={columnsJobHistory}\n              selectionMode={0}\n            />\n            <div className=\"pagination-style\">\n              <Pagination\n                format=\"buttons\"\n                // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                selectedPageIndex={currentPage}\n                pageCount={Math.ceil(totalCount / limitPageLength)}\n                itemsPerPage={limitPageLength}\n                totalItemCount={totalCount}\n                onPageChange={(page) => {\n                  setLimitSTart(page * limitPageLength);\n                  setCurentPage(page);\n                }}\n              />\n            </div>\n          </div>\n        )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addjobhistory/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteJob}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteJobhistory}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccessJob}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGoals = () => {\n    return (\n      <div className=\"form-conatiner\">\n        {goalCount === 0 ? (\n          renderNoData()\n        ) : (\n          <div>\n            <DetailsList\n              styles={listStyle}\n              items={goalData}\n              className=\"detail-list\"\n              columns={columnsGoal}\n              selectionMode={0}\n            />\n            <div className=\"pagination-style\">\n              <Pagination\n                format=\"buttons\"\n                selectedPageIndex={currentPageGoal}\n                pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\n                itemsPerPage={limitPageLengthGoal}\n                totalItemCount={goalTotalCount}\n                onPageChange={(pageGoal) => {\n                  setLimitSTartGoal(pageGoal * limitPageLengthGoal);\n                  setCurentPageGoal(pageGoal);\n                }}\n              />\n            </div>\n          </div>\n        )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDelete}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteGoal}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccess}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTrainingDevelopment = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div>\n          <DetailsList\n            styles={listStyle}\n            items={developmentData}\n            className=\"detail-list\"\n            columns={columnsTraning}\n            selectionMode={0}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Save\"\n                allowDisabledFocus\n                onClick={() => {\n                  handleDevelpmentDatachange();\n                }}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.push(\"/appraisal/goalsetting\");\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDevelopment}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Development data saved successfully.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n\n  const renderEmployeeDetails = () => {\n    return (\n      <div>\n        <div className=\"card\">\n          <div className=\"emp-details-section medium-text\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <span>Employee Id</span> : {employeeData.employee_id}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Employee Name</span> : {employeeData.employee_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Designation</span> : {employeeData.designation}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Location</span> : {employeeData.location}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Department</span> : {employeeData.department}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Date of Joining</span> :{\" \"}\n                {moment(employeeData.date_of_joining).format(\"DD-MM-YYYY\")}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reporting Officer</span> : {employeeData.manager_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reviewer</span> : {employeeData.reviewer_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Counter signing</span> :{\" \"}\n                {employeeData.counter_signing_name}\n              </div>\n            </div>\n          </div>\n          \n        </div>\n        <div\n          style={{ marginTop: \"10px\" }}\n          className=\"card employee-details-tabs\"\n        >\n          <Pivot linkFormat={PivotLinkFormat.tabs}>\n            <PivotItem\n              headerButtonProps={{\n                \"data-order\": 1,\n                \"data-title\": \"My Files Title\",\n              }}\n              headerText=\"Job History\"\n            >\n              {renderJobHistory()}\n            </PivotItem>\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\n            <PivotItem headerText=\"Training/ Development Plan\">\n              {renderTrainingDevelopment()}\n            </PivotItem>\n          </Pivot>\n        </div>\n      </div>\n    );\n  };\n\n  \n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          {loading ? (\n            <Spinner\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"80px\",\n                color: \"#00597d\",\n              }}\n              size={SpinnerSize.large}\n            />\n          ) : employeeCount === 0 ? (\n            renderNoData()\n          ) : (\n            renderEmployeeDetails()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(EmployeeDetails);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx",["310","311","312","313","314","315","316","317"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistoryByName,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  PrimaryButton,\n  Stack,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nfunction JobHistoryDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\n      (response) => {\n        setEmployeeDetails(response.data[0]);\n      }\n    );\n  }, []);\n\n \n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const fromDateFormat = moment(employeeDetails.from_date).format(\"DD-MM-YYYY\");\n  const toDateFormat = moment(employeeDetails.to_date).format(\"DD-MM-YYYY\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>Position Held</span> : {employeeDetails.position_held}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Place of Posting</span> : {employeeDetails.place_of_posting}\n            </div>\n            <div className=\"col-md-4\">\n              <span>From Date</span> : {fromDateFormat}\n            </div>\n            <div className=\"col-md-8\">\n              <span>To Date</span> : {toDateFormat}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Key Responsibilities</span> :{\" \"}\n              {employeeDetails.key_responsibilities}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Qualifications</span> : {employeeDetails.qualifications}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistoryDetails);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx",["318","319","320","321","322","323","324","325","326"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistory,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\n\ninterface ParamTypes {\n  name: string;\n}\n\nfunction UpdateJobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"name\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryUpdateData({\n      ...jobHistoryUpdateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const jobHistoryClicked = () => {\n    history.goBack();\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleUpdateJobHistory = () => {\n    if (jobHistoryUpdateData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryUpdateData.place === \"\") {\n      setErrMsgPlace(\"Place of Posting is required\");\n    }\n    if (jobHistoryUpdateData.position === \"\") {\n      setErrMsgPosition(\"Position Held is required\");\n    }\n    if (jobHistoryUpdateData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const updateQuery = {\n      ...jobHistoryUpdateData,\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\n    };\n    update_JobHistory(updateQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card jobHistory-details\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryUpdateData.position_held}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position_held\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryUpdateData.place_of_posting}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place_of_posting\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.from_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  from_date: date,\n                })\n              }\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.to_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  to_date: date,\n                })\n              }\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryUpdateData.key_responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"key_responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryUpdateData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History updated successfully.{\" \"}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateJobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx",["327"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport {\n  fetchGoalDataName,\n  update_goals,\n} from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction UpdateGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy] = useState(\"order_no asc\");\n  const [filtersByName] = useState(params.name);\n\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [updateGoalData, setUpdateGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      // console.log(\"response of Goal===>\", response.data);\n      setUpdateGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateGoalData({\n      ...updateGoalData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Update Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgOrder] = useState(\"\");\n  const [errMsgGoal] = useState(\"\");\n  const [errMsgGoalType] = useState(\"\");\n  const [errMsgMeasure] = useState(\"\");\n  const [errMsgWeightage] = useState(\"\");\n  const [errMsgKra] = useState(\"\");\n\n\n  const handleUpdateGoal = () => {\n    const addQuery = {\n      ...updateGoalData,\n    };\n    update_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              readOnly={true}\n              label=\"ID\"\n              value={params.name}\n              placeholder=\"Enter your job position\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={updateGoalData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              selectedKey={\n                goalOptions.find(\n                  (item) => item.text === updateGoalData.goal_type\n                )?.key\n              }\n              onChange={(ev, item) =>\n                setUpdateGoalData({\n                  ...updateGoalData,\n                  goal_type: item?.text,\n                })\n              }\n              options={goalOptions}\n              // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={updateGoalData.goal_type === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={updateGoalData.parent_goal_id}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\"></div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={updateGoalData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <div className=\"goal-details\"></div>\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={updateGoalData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={updateGoalData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={updateGoalData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={updateGoalData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={updateGoalData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={updateGoalData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateGoal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal updated successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateGoals);\n","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx",["328","329","330","331","332","333","334","335","336"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Modal,\n  PrimaryButton,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { add_goals, fetchGoalData } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction AddGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [goalInputData, setGoalInputData] = useState({\n    goal: \"\",\n    goal_type: \"\",\n    kra: \"\",\n    measure: \"\",\n    order_no: \"\",\n    parent_goal_id: \"\",\n    stretch: \"\",\n    target: \"\",\n    threshold: \"\",\n    weightage: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  \n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  \n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalInputData({\n      ...goalInputData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Add Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleAddJobHistory = () => {\n    if (goalInputData.order_no === \"\") {\n      setErrMsgOrder(\"Order number is required\");\n    }\n    if (goalInputData.kra === \"\") {\n      setErrMsgKra(\"KRA is required\");\n    }\n    if (goalInputData.goal === \"\") {\n      setErrMsgGoal(\"Goal is required\");\n    }\n    if (goalInputData.measure === \"\") {\n      setErrMsgMeasure(\"Measure is required\");\n    }\n    if (goalInputData.weightage === \"\") {\n      setErrMsgWeightage(\"Weightage is required\");\n    }\n    if (goalType.text === \"\") {\n      setErrMsgGoalType(\"Select goal type\");\n    }\n    const addQuery = {\n      appraisal_id: params.appraisalId,\n      employee_id: params.employeeId,\n      goal_type: goalType.text,\n      goal: goalInputData.goal,\n      kra: goalInputData.kra,\n      order_no: goalInputData.order_no,\n      measure: goalInputData.measure,\n      parent_goal_id: goalInputData.parent_goal_id,\n      stretch: goalInputData.stretch,\n      target: goalInputData.target,\n      threshold: goalInputData.threshold,\n      weightage: goalInputData.weightage,\n    };\n    add_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              disabled={true}\n              label=\"ID\"\n              // value={goalData.name}\n              placeholder=\"New\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={goalInputData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              onChange={onChangeGoalType}\n              options={goalOptions}\n              // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={goalType.text === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={goalInputData.parent_goal_id}\n              placeholder=\"Enter parent goal ID \"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={goalInputData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={goalInputData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={goalInputData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={goalInputData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={goalInputData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={goalInputData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={goalInputData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header-local\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-failed\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AddGoals);\n","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx",["337","338","339","340","341"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDropdownOption,\n  PrimaryButton,\n  Stack,\n} from \"office-ui-fabric-react\";\nimport {  fetchGoalDataName } from \"../../redux/actions/goal\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\n\nfunction GoalDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const [limitPageLength] = useState(5);\n  //   console.log(params.name);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n\n  const [goalDetails, setGoalDetails]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setGoalDetails(response.data[0]);\n    });\n  }, []);\n\n  \n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalDetails({\n      ...goalDetails,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>ID</span> : {params.name}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Order Number</span> : {goalDetails.order_no}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal Type</span> : {goalDetails.goal_type}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Parent Goal</span> : {goalDetails.parent_goal_id}\n            </div>\n            <div className=\"col-md-4\">\n              <span>KRA</span> : {goalDetails.kra}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal</span> : {goalDetails.goal}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Measure</span> : {goalDetails.measure}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Weightage</span> : {goalDetails.weightage}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Target</span> : {goalDetails.target}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Threshold</span> : {goalDetails.threshold}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Stretch</span> :{\" \"}\n              {/* {goalDetails.stretch == \"\" ? \"N/A\" : goalDetails.stretch} */}\n              {goalDetails.stretch}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalDetails);\n","/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx",[],"/home/pratik/Documents/mega-soft/src/i18n.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx",["342","343","344","345","346","347","348"],"import React, { useState } from \"react\";\nimport \"./style.css\";\nimport { initSideBar } from \"./sideBar\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\nimport {\n  setMenuType,\n  setRoleType,\n} from \"../redux/actions/roleType\";\nimport {\n  ProSidebar,\n  Menu,\n  MenuItem,\n  SubMenu,\n  SidebarHeader,\n} from \"react-pro-sidebar\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport { DefaultTheme } from \"../../src/Utils/color\";\nimport { useTranslation } from \"react-i18next/\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\n\n\nfunction SideNavigation() {\n  const { t, i18n } = useTranslation();\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\n  const [collapsedMenu, setCollapsedMenu] = useState(false);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const dispatch = useDispatch();\n  const [menuHeading, setMenuHeading] = useState(\"\");\n  \n\n  const handleRoleMenu = (e: any, item: any) => {\n    dispatch(setRoleType(item));\n    console.log(\"employee clicked==>\", item);\n  };\n\n\n\n  const menuItem = () => {\n    return (\n      <ProSidebar\n        collapsed={selectMenu}\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\n      >\n        <SidebarHeader\n          onClick={() => {\n            dispatch(setMenuType(\"1\"));\n          }}\n          className=\"sidebar-ell\"\n        >\n          <HomeIcon /> <span>Performance</span>\n        </SidebarHeader>\n        <button\n          onClick={(event) => {\n            handleRoleMenu(event, \"Employee\");\n          }}\n        >\n          {i18n.t(\"sidebar_menu.employee\")}\n        </button>\n        <Menu\n          className=\"Employee\"\n          style={roleType !== \"Employee\" ? { display: \"none\" } : {}}\n          popperArrow={true}\n          iconShape=\"circle\"\n        >\n          <SubMenu\n            title={i18n.t(\"sidebar_menu.appraisal\")}\n            icon={<BarChartIcon />}\n          >\n            {/* <Link to=\"/home\" /> */}\n            <MenuItem icon={<SettingsIcon />}>\n              {i18n.t(\"sidebar_menu.setup\")}\n              <Link to=\"/home\" />\n            </MenuItem>\n            {/* {checkMenuPermission() === true ? (\n            ) : null} */}\n            <MenuItem\n              icon={<ListIcon />}\n            >\n              {i18n.t(\"sidebar_menu.goal_setting\")}\n              <Link to=\"/appraisal/goalsetting\" />\n            </MenuItem>\n            <MenuItem icon={<AssessmentIcon />}>\n              {i18n.t(\"sidebar_menu.self_assessment\")}\n              <Link to=\"/home\" />\n            </MenuItem>\n          </SubMenu>\n          <SubMenu\n            title={i18n.t(\"sidebar_menu.confirmation\")}\n            icon={<AssignmentTurnedInIcon />}\n          >\n            <MenuItem icon={<CachedIcon />}>\n              {/* <Link to=\"/home/changecolor\" /> */}\n              {i18n.t(\"sidebar_menu.confirmation_status\")}\n            </MenuItem>\n            <MenuItem icon={<FileCopyIcon />}>\n              {i18n.t(\"sidebar_menu.confirmation_letter\")}\n            </MenuItem>\n          </SubMenu>\n          {/* <div style={roleType !== \"Employee\" ? { display: \"none\" } : {}}>\n          </div> */}\n        </Menu>\n        <button\n          onClick={(event) => {\n            handleRoleMenu(event, \"Manager\");\n          }}\n        >\n          {i18n.t(\"sidebar_menu.manager\")}\n        </button>\n        <Menu\n          className=\"Manager\"\n          style={roleType !== \"Manager\" ? { display: \"none\" } : {}}\n          popperArrow={true}\n          iconShape=\"circle\"\n        >\n          <SubMenu title={`Appraisal`} icon={<BarChartIcon />}>\n            <Link to=\"/home\" />\n            <MenuItem icon={<SettingsIcon />}>\n              {i18n.t(\"sidebar_menu.team_goal_setting\")}\n              <Link to=\"/appraisal/goalsetting\" />\n            </MenuItem>\n            <MenuItem icon={<AssessmentIcon />}>\n              {i18n.t(\"sidebar_menu.team_assessment\")}{\" \"}\n            </MenuItem>\n          </SubMenu>\n\n        </Menu>\n        <button\n          onClick={(event) => {\n            handleRoleMenu(event, \"HR Contact\");\n          }}\n        >\n          {/* {i18n.t(\"sidebar_menu.employee\")} */}\n          HR Contact\n        </button>\n        <Menu\n          style={roleType !== \"HR Contact\" ? { display: \"none\" } : {}}\n          popperArrow={true}\n          iconShape=\"circle\"\n        >\n          <SubMenu\n            title={i18n.t(\"sidebar_menu.appraisal\")}\n            icon={<BarChartIcon />}\n          >\n            <MenuItem icon={<SettingsIcon />}>\n              {i18n.t(\"sidebar_menu.setup\")}\n              <Link to=\"/home\" />\n            </MenuItem>\n          </SubMenu>\n        </Menu>\n      </ProSidebar>\n    );\n  };\n\n  const handleOtherMenu = (event: any, item: any) => {\n    setMenuHeading(item);\n    console.log(\"clicked=>\", item);\n    dispatch(setMenuType(\"0\"));\n  };\n\n  const localMenuItem = () => {\n    return (\n      <ProSidebar\n        collapsed={selectMenu}\n        style={{ backgroundColor: DefaultTheme.colors.primary }}\n      >\n        <SidebarHeader\n          onClick={() => {\n            dispatch(setMenuType(\"0\"));\n          }}\n        >\n          <HomeIcon />\n          HRMS\n        </SidebarHeader>\n        <Menu popperArrow={true} iconShape=\"circle\" style={{}}>\n          <MenuItem\n            icon={<PersonIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Profile\");\n            }}\n          >\n            Profile\n          </MenuItem>\n          <MenuItem\n            icon={<NoteIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Leave\");\n            }}\n          >\n            Leave\n          </MenuItem>\n          <MenuItem\n            icon={<BarChartIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Performance\");\n            }}\n          >\n            Performance\n          </MenuItem>\n          <MenuItem\n            icon={<AssignmentTurnedInIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Training\");\n            }}\n          >\n            Training\n          </MenuItem>\n          <MenuItem\n            icon={<AttachMoneyIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Payroll\");\n            }}\n          >\n            Payroll\n          </MenuItem>\n          <MenuItem\n            icon={<ImportExportIcon />}\n            style={{ marginBottom: \"20px\" }}\n            onClick={(event) => {\n              handleOtherMenu(event, \"Separation\");\n            }}\n          >\n            Separation\n          </MenuItem>\n        </Menu>\n      </ProSidebar>\n    );\n  };\n\n  const handlemenuClick = () => {\n    if (collapsedMenu == false) {\n      setCollapsedMenu(true);\n    }\n    if (collapsedMenu == true) {\n      setCollapsedMenu(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {menuType == 0 ? menuItem() : localMenuItem()}\n    </React.Fragment>\n  );\n}\n\nexport default SideNavigation;\n","/home/pratik/Documents/mega-soft/src/Header.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx",["349"],"import axios from \"axios\";\nimport accessToken from \"../../apiBase.json\";\n\nexport const addApprisal = (item: any) => {\n  return {\n    type: \"ADD_APPRISAL\",\n    payload: item,\n  };\n};\n\nexport const deleteAppraisalByID = (item: any) => {\n  return {\n    type: \"DELETE_APPRAISAL\",\n    payload: item,\n  };\n};\n\nexport const fetchAppraisalData = (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => async (dispatch: any): Promise<any> => {\n  const token = sessionStorage.getItem(\"access_token\");\n  if (token === null) {\n    dispatch({\n      type: \"LOGOUT_SUCCESS\",\n    });\n    return false;\n  }\n  const accessToken = \"bearer \" + token;\n  try {\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_START\",\n    });\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    const responseBody = response.data;\n    // console.log(\"Appraisal api response =>\", responseBody);\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_SUCCESS\",\n      payload: responseBody,\n    });\n    return responseBody;\n  } catch (error) {\n    dispatch({\n      type: \"LOGOUT_SUCCESS\",\n    });\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const fetchAppraisalDataById = async (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    const responseBody = await response.data;\n    // console.log(\"api data by id\", responseBody)\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const add_apprisal = async (data: any) => {\n  const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n      data: JSON.stringify(data),\n    });\n    return response;\n} \nexport const edit_appraisal = async (data: any) => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data.id}`,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n      data: JSON.stringify(data),\n    });\n    // console.log(\"api response ==>\", response)\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const delete_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data}`,\n      method: \"DELETE\",\n      headers: {\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, DELETE\",\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    console.log(\"delete api response ==>\", response);\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const filterByEmployee = async (order_by = \"employee_name asc\") => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Employee`,\n      params: {\n        order_by,\n        fields: JSON.stringify([\"employee_id\", \"employee_name\"]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    // console.log(\"Api filter by employee==>\", response);\n    const responseBody = response.data;\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx",[],["350","351"],"/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx",[],"/home/pratik/Documents/mega-soft/src/Utils/color.tsx",["352","353"],"import { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\n\n// const colorsList = useSelector((state: RootState) => state.application);\n\n// console.log(\"colorsList\", colorsList);\n\nexport const DefaultTheme = {\n  colors: {\n    primary: \"#00597d\",\n    primaryDark: \"006994 \",\n    white: \"#FFF\",\n  },\n};\n",{"ruleId":"354","severity":1,"message":"355","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":12},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","replacedBy":"361"},{"ruleId":"354","severity":1,"message":"362","line":7,"column":3,"nodeType":"356","messageId":"357","endLine":7,"endColumn":13},{"ruleId":"363","severity":1,"message":"364","line":58,"column":6,"nodeType":"365","endLine":58,"endColumn":8,"suggestions":"366"},{"ruleId":"363","severity":1,"message":"364","line":73,"column":6,"nodeType":"365","endLine":73,"endColumn":8,"suggestions":"367"},{"ruleId":"368","severity":1,"message":"369","line":95,"column":44,"nodeType":"370","messageId":"371","endLine":95,"endColumn":46},{"ruleId":"354","severity":1,"message":"372","line":145,"column":10,"nodeType":"356","messageId":"357","endLine":145,"endColumn":24},{"ruleId":"354","severity":1,"message":"373","line":146,"column":9,"nodeType":"356","messageId":"357","endLine":146,"endColumn":20},{"ruleId":"374","severity":1,"message":"375","line":150,"column":39,"nodeType":"376","messageId":"377","endLine":150,"endColumn":41},{"ruleId":"374","severity":1,"message":"375","line":152,"column":34,"nodeType":"376","messageId":"377","endLine":152,"endColumn":36},{"ruleId":"374","severity":1,"message":"378","line":160,"column":13,"nodeType":"379","messageId":"380","endLine":160,"endColumn":20},{"ruleId":"374","severity":1,"message":"378","line":171,"column":11,"nodeType":"379","messageId":"380","endLine":171,"endColumn":18},{"ruleId":"354","severity":1,"message":"381","line":11,"column":10,"nodeType":"356","messageId":"357","endLine":11,"endColumn":21},{"ruleId":"354","severity":1,"message":"382","line":11,"column":23,"nodeType":"356","messageId":"357","endLine":11,"endColumn":34},{"ruleId":"354","severity":1,"message":"383","line":12,"column":10,"nodeType":"356","messageId":"357","endLine":12,"endColumn":19},{"ruleId":"384","severity":1,"message":"385","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":18,"fix":"388"},{"ruleId":"354","severity":1,"message":"389","line":17,"column":7,"nodeType":"356","messageId":"357","endLine":17,"endColumn":11},{"ruleId":"384","severity":1,"message":"385","line":4,"column":3,"nodeType":"386","messageId":"387","endLine":4,"endColumn":18,"fix":"390"},{"ruleId":"354","severity":1,"message":"391","line":102,"column":7,"nodeType":"356","messageId":"357","endLine":102,"endColumn":21},{"ruleId":"354","severity":1,"message":"392","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":17},{"ruleId":"354","severity":1,"message":"393","line":9,"column":3,"nodeType":"356","messageId":"357","endLine":9,"endColumn":11},{"ruleId":"354","severity":1,"message":"394","line":12,"column":3,"nodeType":"356","messageId":"357","endLine":12,"endColumn":7},{"ruleId":"354","severity":1,"message":"395","line":19,"column":13,"nodeType":"356","messageId":"357","endLine":19,"endColumn":18},{"ruleId":"354","severity":1,"message":"396","line":25,"column":10,"nodeType":"356","messageId":"357","endLine":25,"endColumn":21},{"ruleId":"354","severity":1,"message":"397","line":28,"column":10,"nodeType":"356","messageId":"357","endLine":28,"endColumn":24},{"ruleId":"354","severity":1,"message":"398","line":29,"column":10,"nodeType":"356","messageId":"357","endLine":29,"endColumn":23},{"ruleId":"354","severity":1,"message":"399","line":37,"column":9,"nodeType":"356","messageId":"357","endLine":37,"endColumn":42},{"ruleId":"354","severity":1,"message":"400","line":48,"column":9,"nodeType":"356","messageId":"357","endLine":48,"endColumn":49},{"ruleId":"354","severity":1,"message":"401","line":67,"column":9,"nodeType":"356","messageId":"357","endLine":67,"endColumn":28},{"ruleId":"354","severity":1,"message":"402","line":72,"column":9,"nodeType":"356","messageId":"357","endLine":72,"endColumn":16},{"ruleId":"354","severity":1,"message":"403","line":78,"column":10,"nodeType":"356","messageId":"357","endLine":78,"endColumn":25},{"ruleId":"354","severity":1,"message":"404","line":78,"column":27,"nodeType":"356","messageId":"357","endLine":78,"endColumn":45},{"ruleId":"354","severity":1,"message":"405","line":85,"column":9,"nodeType":"356","messageId":"357","endLine":85,"endColumn":23},{"ruleId":"368","severity":1,"message":"369","line":86,"column":18,"nodeType":"370","messageId":"371","endLine":86,"endColumn":20},{"ruleId":"354","severity":1,"message":"406","line":95,"column":9,"nodeType":"356","messageId":"357","endLine":95,"endColumn":23},{"ruleId":"407","severity":1,"message":"408","line":127,"column":15,"nodeType":"409","endLine":132,"endColumn":16},{"ruleId":"410","severity":1,"message":"411","line":138,"column":15,"nodeType":"409","endLine":138,"endColumn":39},{"ruleId":"410","severity":1,"message":"411","line":198,"column":13,"nodeType":"409","endLine":198,"endColumn":61},{"ruleId":"354","severity":1,"message":"412","line":4,"column":3,"nodeType":"356","messageId":"357","endLine":4,"endColumn":12},{"ruleId":"354","severity":1,"message":"413","line":6,"column":17,"nodeType":"356","messageId":"357","endLine":6,"endColumn":26},{"ruleId":"354","severity":1,"message":"414","line":6,"column":28,"nodeType":"356","messageId":"357","endLine":6,"endColumn":36},{"ruleId":"354","severity":1,"message":"415","line":8,"column":10,"nodeType":"356","messageId":"357","endLine":8,"endColumn":15},{"ruleId":"354","severity":1,"message":"416","line":10,"column":8,"nodeType":"356","messageId":"357","endLine":10,"endColumn":19},{"ruleId":"354","severity":1,"message":"417","line":14,"column":9,"nodeType":"356","messageId":"357","endLine":14,"endColumn":17},{"ruleId":"354","severity":1,"message":"418","line":15,"column":9,"nodeType":"356","messageId":"357","endLine":15,"endColumn":50},{"ruleId":"410","severity":1,"message":"411","line":53,"column":13,"nodeType":"409","endLine":53,"endColumn":60},{"ruleId":"354","severity":1,"message":"419","line":29,"column":11,"nodeType":"356","messageId":"357","endLine":29,"endColumn":12},{"ruleId":"363","severity":1,"message":"420","line":54,"column":6,"nodeType":"365","endLine":54,"endColumn":8,"suggestions":"421"},{"ruleId":"354","severity":1,"message":"422","line":184,"column":9,"nodeType":"356","messageId":"357","endLine":184,"endColumn":24},{"ruleId":"354","severity":1,"message":"419","line":31,"column":11,"nodeType":"356","messageId":"357","endLine":31,"endColumn":12},{"ruleId":"354","severity":1,"message":"423","line":32,"column":19,"nodeType":"356","messageId":"357","endLine":32,"endColumn":29},{"ruleId":"354","severity":1,"message":"424","line":33,"column":23,"nodeType":"356","messageId":"357","endLine":33,"endColumn":36},{"ruleId":"354","severity":1,"message":"425","line":34,"column":17,"nodeType":"356","messageId":"357","endLine":34,"endColumn":25},{"ruleId":"354","severity":1,"message":"426","line":35,"column":10,"nodeType":"356","messageId":"357","endLine":35,"endColumn":14},{"ruleId":"354","severity":1,"message":"427","line":35,"column":16,"nodeType":"356","messageId":"357","endLine":35,"endColumn":23},{"ruleId":"354","severity":1,"message":"428","line":37,"column":27,"nodeType":"356","messageId":"357","endLine":37,"endColumn":45},{"ruleId":"354","severity":1,"message":"429","line":38,"column":10,"nodeType":"356","messageId":"357","endLine":38,"endColumn":20},{"ruleId":"354","severity":1,"message":"430","line":45,"column":49,"nodeType":"356","messageId":"357","endLine":45,"endColumn":54},{"ruleId":"363","severity":1,"message":"431","line":53,"column":6,"nodeType":"365","endLine":53,"endColumn":8,"suggestions":"432"},{"ruleId":"363","severity":1,"message":"364","line":91,"column":6,"nodeType":"365","endLine":91,"endColumn":75,"suggestions":"433"},{"ruleId":"354","severity":1,"message":"422","line":319,"column":9,"nodeType":"356","messageId":"357","endLine":319,"endColumn":24},{"ruleId":"363","severity":1,"message":"420","line":82,"column":6,"nodeType":"365","endLine":82,"endColumn":8,"suggestions":"434"},{"ruleId":"354","severity":1,"message":"435","line":156,"column":26,"nodeType":"356","messageId":"357","endLine":156,"endColumn":43},{"ruleId":"354","severity":1,"message":"436","line":167,"column":10,"nodeType":"356","messageId":"357","endLine":167,"endColumn":21},{"ruleId":"354","severity":1,"message":"437","line":194,"column":9,"nodeType":"356","messageId":"357","endLine":194,"endColumn":28},{"ruleId":"354","severity":1,"message":"428","line":55,"column":27,"nodeType":"356","messageId":"357","endLine":55,"endColumn":45},{"ruleId":"354","severity":1,"message":"430","line":65,"column":37,"nodeType":"356","messageId":"357","endLine":65,"endColumn":42},{"ruleId":"354","severity":1,"message":"438","line":66,"column":10,"nodeType":"356","messageId":"357","endLine":66,"endColumn":20},{"ruleId":"354","severity":1,"message":"439","line":66,"column":22,"nodeType":"356","messageId":"357","endLine":66,"endColumn":35},{"ruleId":"354","severity":1,"message":"440","line":68,"column":9,"nodeType":"356","messageId":"357","endLine":68,"endColumn":15},{"ruleId":"363","severity":1,"message":"441","line":106,"column":6,"nodeType":"365","endLine":115,"endColumn":4,"suggestions":"442"},{"ruleId":"354","severity":1,"message":"443","line":259,"column":10,"nodeType":"356","messageId":"357","endLine":259,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":478,"column":23,"nodeType":"370","messageId":"371","endLine":478,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":481,"column":23,"nodeType":"370","messageId":"371","endLine":481,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":590,"column":29,"nodeType":"370","messageId":"371","endLine":590,"endColumn":31},{"ruleId":"354","severity":1,"message":"444","line":27,"column":3,"nodeType":"356","messageId":"357","endLine":27,"endColumn":14},{"ruleId":"354","severity":1,"message":"445","line":65,"column":9,"nodeType":"356","messageId":"357","endLine":65,"endColumn":20},{"ruleId":"354","severity":1,"message":"446","line":69,"column":10,"nodeType":"356","messageId":"357","endLine":69,"endColumn":21},{"ruleId":"354","severity":1,"message":"447","line":69,"column":23,"nodeType":"356","messageId":"357","endLine":69,"endColumn":37},{"ruleId":"354","severity":1,"message":"448","line":70,"column":10,"nodeType":"356","messageId":"357","endLine":70,"endColumn":19},{"ruleId":"354","severity":1,"message":"449","line":70,"column":21,"nodeType":"356","messageId":"357","endLine":70,"endColumn":33},{"ruleId":"354","severity":1,"message":"450","line":328,"column":10,"nodeType":"356","messageId":"357","endLine":328,"endColumn":26},{"ruleId":"354","severity":1,"message":"451","line":329,"column":10,"nodeType":"356","messageId":"357","endLine":329,"endColumn":29},{"ruleId":"354","severity":1,"message":"452","line":329,"column":31,"nodeType":"356","messageId":"357","endLine":329,"endColumn":53},{"ruleId":"354","severity":1,"message":"422","line":658,"column":9,"nodeType":"356","messageId":"357","endLine":658,"endColumn":24},{"ruleId":"354","severity":1,"message":"453","line":38,"column":10,"nodeType":"356","messageId":"357","endLine":38,"endColumn":25},{"ruleId":"363","severity":1,"message":"454","line":58,"column":6,"nodeType":"365","endLine":58,"endColumn":8,"suggestions":"455"},{"ruleId":"354","severity":1,"message":"456","line":77,"column":33,"nodeType":"356","messageId":"357","endLine":77,"endColumn":57},{"ruleId":"354","severity":1,"message":"457","line":78,"column":30,"nodeType":"356","messageId":"357","endLine":78,"endColumn":51},{"ruleId":"354","severity":1,"message":"430","line":79,"column":10,"nodeType":"356","messageId":"357","endLine":79,"endColumn":15},{"ruleId":"354","severity":1,"message":"458","line":79,"column":17,"nodeType":"356","messageId":"357","endLine":79,"endColumn":25},{"ruleId":"354","severity":1,"message":"459","line":81,"column":22,"nodeType":"356","messageId":"357","endLine":81,"endColumn":35},{"ruleId":"354","severity":1,"message":"460","line":82,"column":19,"nodeType":"356","messageId":"357","endLine":82,"endColumn":29},{"ruleId":"354","severity":1,"message":"461","line":91,"column":10,"nodeType":"356","messageId":"357","endLine":91,"endColumn":26},{"ruleId":"354","severity":1,"message":"462","line":97,"column":34,"nodeType":"356","messageId":"357","endLine":97,"endColumn":45},{"ruleId":"363","severity":1,"message":"463","line":121,"column":6,"nodeType":"365","endLine":121,"endColumn":45,"suggestions":"464"},{"ruleId":"363","severity":1,"message":"465","line":137,"column":6,"nodeType":"365","endLine":137,"endColumn":64,"suggestions":"466"},{"ruleId":"363","severity":1,"message":"467","line":163,"column":6,"nodeType":"365","endLine":163,"endColumn":43,"suggestions":"468"},{"ruleId":"363","severity":1,"message":"469","line":193,"column":6,"nodeType":"365","endLine":193,"endColumn":43,"suggestions":"470"},{"ruleId":"354","severity":1,"message":"418","line":227,"column":9,"nodeType":"356","messageId":"357","endLine":227,"endColumn":50},{"ruleId":"354","severity":1,"message":"471","line":369,"column":10,"nodeType":"356","messageId":"357","endLine":369,"endColumn":27},{"ruleId":"368","severity":1,"message":"369","line":504,"column":27,"nodeType":"370","messageId":"371","endLine":504,"endColumn":29},{"ruleId":"354","severity":1,"message":"472","line":635,"column":10,"nodeType":"356","messageId":"357","endLine":635,"endColumn":22},{"ruleId":"354","severity":1,"message":"381","line":2,"column":32,"nodeType":"356","messageId":"357","endLine":2,"endColumn":43},{"ruleId":"354","severity":1,"message":"473","line":24,"column":10,"nodeType":"356","messageId":"357","endLine":24,"endColumn":21},{"ruleId":"354","severity":1,"message":"474","line":34,"column":10,"nodeType":"356","messageId":"357","endLine":34,"endColumn":16},{"ruleId":"354","severity":1,"message":"475","line":35,"column":10,"nodeType":"356","messageId":"357","endLine":35,"endColumn":18},{"ruleId":"363","severity":1,"message":"476","line":47,"column":6,"nodeType":"365","endLine":47,"endColumn":8,"suggestions":"477"},{"ruleId":"354","severity":1,"message":"478","line":51,"column":9,"nodeType":"356","messageId":"357","endLine":51,"endColumn":22},{"ruleId":"354","severity":1,"message":"479","line":62,"column":9,"nodeType":"356","messageId":"357","endLine":62,"endColumn":23},{"ruleId":"354","severity":1,"message":"480","line":65,"column":9,"nodeType":"356","messageId":"357","endLine":65,"endColumn":25},{"ruleId":"354","severity":1,"message":"453","line":37,"column":10,"nodeType":"356","messageId":"357","endLine":37,"endColumn":25},{"ruleId":"354","severity":1,"message":"481","line":37,"column":27,"nodeType":"356","messageId":"357","endLine":37,"endColumn":45},{"ruleId":"354","severity":1,"message":"482","line":38,"column":10,"nodeType":"356","messageId":"357","endLine":38,"endColumn":24},{"ruleId":"354","severity":1,"message":"483","line":38,"column":26,"nodeType":"356","messageId":"357","endLine":38,"endColumn":43},{"ruleId":"354","severity":1,"message":"474","line":44,"column":10,"nodeType":"356","messageId":"357","endLine":44,"endColumn":16},{"ruleId":"354","severity":1,"message":"475","line":45,"column":10,"nodeType":"356","messageId":"357","endLine":45,"endColumn":18},{"ruleId":"363","severity":1,"message":"454","line":59,"column":6,"nodeType":"365","endLine":59,"endColumn":8,"suggestions":"484"},{"ruleId":"354","severity":1,"message":"479","line":114,"column":9,"nodeType":"356","messageId":"357","endLine":114,"endColumn":23},{"ruleId":"354","severity":1,"message":"480","line":117,"column":9,"nodeType":"356","messageId":"357","endLine":117,"endColumn":25},{"ruleId":"363","severity":1,"message":"485","line":60,"column":6,"nodeType":"365","endLine":60,"endColumn":8,"suggestions":"486"},{"ruleId":"354","severity":1,"message":"487","line":7,"column":3,"nodeType":"356","messageId":"357","endLine":7,"endColumn":13},{"ruleId":"354","severity":1,"message":"488","line":37,"column":9,"nodeType":"356","messageId":"357","endLine":37,"endColumn":17},{"ruleId":"354","severity":1,"message":"460","line":40,"column":19,"nodeType":"356","messageId":"357","endLine":40,"endColumn":29},{"ruleId":"354","severity":1,"message":"474","line":53,"column":10,"nodeType":"356","messageId":"357","endLine":53,"endColumn":16},{"ruleId":"354","severity":1,"message":"475","line":54,"column":10,"nodeType":"356","messageId":"357","endLine":54,"endColumn":18},{"ruleId":"354","severity":1,"message":"489","line":57,"column":10,"nodeType":"356","messageId":"357","endLine":57,"endColumn":18},{"ruleId":"363","severity":1,"message":"490","line":73,"column":6,"nodeType":"365","endLine":73,"endColumn":8,"suggestions":"491"},{"ruleId":"354","severity":1,"message":"479","line":117,"column":9,"nodeType":"356","messageId":"357","endLine":117,"endColumn":23},{"ruleId":"354","severity":1,"message":"480","line":120,"column":9,"nodeType":"356","messageId":"357","endLine":120,"endColumn":25},{"ruleId":"354","severity":1,"message":"492","line":8,"column":3,"nodeType":"356","messageId":"357","endLine":8,"endColumn":18},{"ruleId":"354","severity":1,"message":"473","line":22,"column":10,"nodeType":"356","messageId":"357","endLine":22,"endColumn":21},{"ruleId":"354","severity":1,"message":"460","line":27,"column":19,"nodeType":"356","messageId":"357","endLine":27,"endColumn":29},{"ruleId":"363","severity":1,"message":"485","line":44,"column":6,"nodeType":"365","endLine":44,"endColumn":8,"suggestions":"493"},{"ruleId":"354","severity":1,"message":"478","line":47,"column":9,"nodeType":"356","messageId":"357","endLine":47,"endColumn":22},{"ruleId":"354","severity":1,"message":"494","line":3,"column":10,"nodeType":"356","messageId":"357","endLine":3,"endColumn":21},{"ruleId":"354","severity":1,"message":"419","line":36,"column":11,"nodeType":"356","messageId":"357","endLine":36,"endColumn":12},{"ruleId":"354","severity":1,"message":"495","line":42,"column":10,"nodeType":"356","messageId":"357","endLine":42,"endColumn":21},{"ruleId":"354","severity":1,"message":"422","line":248,"column":9,"nodeType":"356","messageId":"357","endLine":248,"endColumn":24},{"ruleId":"368","severity":1,"message":"369","line":249,"column":23,"nodeType":"370","messageId":"371","endLine":249,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":252,"column":23,"nodeType":"370","messageId":"371","endLine":252,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":259,"column":17,"nodeType":"370","messageId":"371","endLine":259,"endColumn":19},{"ruleId":"354","severity":1,"message":"496","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":19},{"ruleId":"358","replacedBy":"497"},{"ruleId":"360","replacedBy":"498"},{"ruleId":"354","severity":1,"message":"382","line":1,"column":10,"nodeType":"356","messageId":"357","endLine":1,"endColumn":21},{"ruleId":"354","severity":1,"message":"383","line":2,"column":10,"nodeType":"356","messageId":"357","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","no-native-reassign",["499"],"no-negated-in-lhs",["500"],"'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["501"],["502"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"503","text":"504"},"'path' is assigned a value but never used.",{"range":"505","text":"504"},"'setsidebartype' is assigned a value but never used.","'logo_icon' is defined but never used.","'Dropdown' is defined but never used.","'Link' is defined but never used.","'Utils' is defined but never used.","'setMenuType' is defined but never used.","'useTranslation' is defined but never used.","'changeLanguge' is defined but never used.","'languageOption' is assigned a value but never used.","'dropdownStyles' is assigned a value but never used.","'handleCustomSidebar' is assigned a value but never used.","'history' is assigned a value but never used.","'selectedCountry' is assigned a value but never used.","'setSelectedCountry' is assigned a value but never used.","'renderMenuLogo' is assigned a value but never used.","'handleLanguage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'TextField' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'login' is defined but never used.","'banner_main' is defined but never used.","'dispatch' is assigned a value but never used.","'textfelidStyle' is assigned a value but never used.","'t' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["506"],"'handlemenuClick' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'count' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'order_by'. Either include it or remove the dependency array.",["507"],["508"],["509"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'setFormatDate' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["510"],"'updateData' is assigned a value but never used.","'ColorPicker' is defined but never used.","'updateColor' is assigned a value but never used.","'showPreview' is assigned a value but never used.","'setShowPreview' is assigned a value but never used.","'alphaType' is assigned a value but never used.","'setAlphaType' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","'employeeDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["511"],"'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'setCount' is assigned a value but never used.","'setTotalCount' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.","'developmentCount' is assigned a value but never used.","'total_count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["512"],"React Hook useEffect has missing dependencies: 'dispatch' and 'filtersById'. Either include them or remove the dependency array.",["513"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["514"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', 'orderByDevelopment', 'params.appraisalId', and 'params.employeeId'. Either include them or remove the dependency array.",["515"],"'deleteItemJobName' is assigned a value but never used.","'deleteItemId' is assigned a value but never used.","'filtersById' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["516"],"'onChangeInput' is assigned a value but never used.","'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.",["517"],"React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["518"],"'DatePicker' is defined but never used.","'roleType' is assigned a value but never used.","'goalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["519"],"'IDropdownOption' is defined but never used.",["520"],"'initSideBar' is defined but never used.","'menuHeading' is assigned a value but never used.","'accessToken' is defined but never used.",["499"],["500"],"no-global-assign","no-unsafe-negation",{"desc":"521","fix":"522"},{"desc":"521","fix":"523"},[394,409],"",[70,85],{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"524","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"533","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"546","fix":"550"},"Update the dependencies array to be: [dispatch]",{"range":"551","text":"552"},{"range":"553","text":"552"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"554","text":"555"},"Update the dependencies array to be: [order_by]",{"range":"556","text":"557"},"Update the dependencies array to be: [doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",{"range":"558","text":"559"},{"range":"560","text":"555"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",{"range":"561","text":"562"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"563","text":"564"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"565","text":"566"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",{"range":"567","text":"568"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"569","text":"570"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",{"range":"571","text":"572"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"573","text":"574"},{"range":"575","text":"564"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"576","text":"577"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"578","text":"579"},{"range":"580","text":"577"},[1803,1805],"[dispatch]",[2260,2262],[1482,1484],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[1939,1941],"[order_by]",[2810,2879],"[doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",[2154,2156],[3276,3444],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",[1677,1679],"[filtersById, roleType]",[3914,3953],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4269,4327],"[roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",[5041,5078],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[5916,5953],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",[1425,1427],"[filtersByName, roleType]",[1738,1740],[1505,1507],"[filtersByName, limitPageLength, limit_start, orderBy]",[2000,2002],"[filtersById, limitPageLength, limit_start, orderBy]",[1170,1172]]