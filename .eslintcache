[{"/home/pratik/Documents/mega-soft/src/index.tsx":"1","/home/pratik/Documents/mega-soft/src/reportWebVitals.ts":"2","/home/pratik/Documents/mega-soft/src/App.tsx":"3","/home/pratik/Documents/mega-soft/src/redux/index.tsx":"4","/home/pratik/Documents/mega-soft/src/Navigation.tsx":"5","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx":"6","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx":"7","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx":"8","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx":"9","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx":"10","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx":"11","/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx":"12","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx":"13","/home/pratik/Documents/mega-soft/src/Header.tsx":"14","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx":"15","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx":"16","/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx":"17","/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx":"18","/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx":"19","/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx":"20","/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx":"21","/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx":"22","/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx":"23","/home/pratik/Documents/mega-soft/src/components/WelcomeHeader/index.tsx":"24","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx":"25","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx":"26"},{"size":615,"mtime":1610818112350,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1610466480732,"results":"29","hashOfConfig":"28"},{"size":1358,"mtime":1612027286139,"results":"30","hashOfConfig":"28"},{"size":205,"mtime":1611071583172,"results":"31","hashOfConfig":"28"},{"size":6306,"mtime":1611997864762,"results":"32","hashOfConfig":"28"},{"size":22063,"mtime":1612032370049,"results":"33","hashOfConfig":"28"},{"size":12776,"mtime":1612031718464,"results":"34","hashOfConfig":"28"},{"size":21076,"mtime":1612110027929,"results":"35","hashOfConfig":"28"},{"size":12531,"mtime":1612028798414,"results":"36","hashOfConfig":"28"},{"size":19879,"mtime":1612031758300,"results":"37","hashOfConfig":"28"},{"size":8225,"mtime":1612030164501,"results":"38","hashOfConfig":"28"},{"size":889,"mtime":1611997864766,"results":"39","hashOfConfig":"28"},{"size":515,"mtime":1611997864766,"results":"40","hashOfConfig":"28"},{"size":2453,"mtime":1611762788465,"results":"41","hashOfConfig":"28"},{"size":4810,"mtime":1612032340901,"results":"42","hashOfConfig":"28"},{"size":771,"mtime":1612028503185,"results":"43","hashOfConfig":"28"},{"size":831,"mtime":1611767967117,"results":"44","hashOfConfig":"28"},{"size":793,"mtime":1610987455768,"results":"45","hashOfConfig":"28"},{"size":442,"mtime":1611848900136,"results":"46","hashOfConfig":"28"},{"size":772,"mtime":1611848900136,"results":"47","hashOfConfig":"28"},{"size":419,"mtime":1611848900136,"results":"48","hashOfConfig":"28"},{"size":434,"mtime":1612083638780,"results":"49","hashOfConfig":"28"},{"size":750,"mtime":1611997864766,"results":"50","hashOfConfig":"28"},{"size":1777,"mtime":1611853308589,"results":"51","hashOfConfig":"28"},{"size":156,"mtime":1612083631688,"results":"52","hashOfConfig":"28"},{"size":1193,"mtime":1612028176497,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1fk01iq",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/pratik/Documents/mega-soft/src/index.tsx",[],["116","117"],"/home/pratik/Documents/mega-soft/src/reportWebVitals.ts",[],"/home/pratik/Documents/mega-soft/src/App.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Navigation.tsx",["118","119","120","121","122","123","124","125"],"import * as React from \"react\";\nimport {\n  Nav,\n  INavLink,\n  INavStyles,\n  INavLinkGroup,\n} from \"office-ui-fabric-react/lib/Nav\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { useHistory, matchPath } from \"react-router-dom\";\n\nimport hrms_logo from \"./assets/img/hrms_logo.gif\";\nimport logo_nuage from \"./assets/img/logo_nuage.png\";\nimport { fetchNavigationBar } from \"./redux/actions/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\n\ninitializeIcons();\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Appraisal\",\n        url: \"\",\n        key: \"key01\",\n        // icon: \"UpgradeAnalysis\",\n        links: [\n          {\n            name: \"Setup\",\n            url: \"/\",\n            icon: \"Settings\",\n            key: \"key02\",\n          },\n          // {\n          //   name: \"Ratings\",\n          //   url: \"/apprisal/rating\",\n          //   icon: \"6PointStar\",\n          //   key: \"key03\",\n          // },\n          // {\n          //   name: \"Periods\",\n          //   url: \"/apprisal/periods\",\n          //   icon: \"Timer\",\n          //   key: \"key04\",\n          // },\n          {\n            name: \"Goal Setting\",\n            url: \"/appraisal/goalsetting\",\n            icon: \"6PointStar\",\n            key: \"key05\",\n          },\n          // {\n          //   name: \"Self Assessment\",\n          //   url: \"\",\n          //   icon: \"6PointStar\",\n          //   key: \"key06\",\n          // },\n          // {\n          //   name: \"Development Plan\",\n          //   url: \"/apprisal/developmentPlan\",\n          //   icon: \"TestPlan\",\n          //   key: \"key07\",\n          // },\n          // {\n          //   name: \"Release Appraisal\",\n          //   url: \"/apprisal/releaseApprisal\",\n          //   icon: \"ReleaseGate\",\n          //   key: \"key08\",\n          // },\n          // {\n          //   name: \"Market Bench Marketing\",\n          //   url: \"/apprisal/marketBenchMarketing\",\n          //   icon: \"Market\",\n          //   key: \"key09\",\n          // },\n        ],\n        isExpanded: true,\n      },\n      {\n        name: \"Manage\",\n        url: \"\",\n        key: \"key10\",\n        // icon:'MedicationAdmin',\n        links: [\n          {\n            name: \"Team Goal Setting\",\n            url: \"/manage/teamGoalSetting\",\n            icon: \"Settings\",\n            key: \"key11\",\n          },\n          {\n            name: \"Team assess\",\n            url: \"/manage/teamAssess\",\n            icon: \"AssessmentGroup\",\n            key: \"key12\",\n          },\n        ],\n        isExpanded: false,\n      },\n      {\n        name: \"Confirmation\",\n        url: \"\",\n        key: \"key13\",\n        expandAriaLabel: \"Expand Admin section\",\n        collapseAriaLabel: \"Collapse admin section\",\n        links: [\n          {\n            name: \"Confirmation Status\",\n            url: \"/confirmation/status\",\n            icon: \"SplitObject\",\n            key: \"key14\",\n          },\n          {\n            name: \"Release\",\n            url: \"/confirmation/release\",\n            key: \"key15\",\n            icon: \"ReleaseGate\",\n          },\n          {\n            name: \"Approval\",\n            url: \"/confirmation/approval\",\n            key: \"key16\",\n            icon: \"DocumentApproval\",\n          },\n          {\n            name: \"Letter\",\n            url: \"/confirmation/letter\",\n            key: \"key17\",\n            icon: \"DietPlanNotebook\",\n          },\n          {\n            name: \"Probation Letter\",\n            url: \"/confirmation/probationLetter\",\n            key: \"key18\",\n            icon: \"QuickNote\",\n          },\n        ],\n        isExpanded: false,\n      },\n    ],\n  },\n];\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    // overflowY: \"auto\",\n    // width: 208,\n    height: \"100%\",\n  },\n  link: {\n    width: \"200px\",\n  },\n  linkText: {\n    color: \"#FFF\",\n    // fontSize: 12,\n    selectors: {\n      \"&:hover\": {\n        color: \"#FFF\",\n      },\n    },\n  },\n  chevronIcon: {\n    color: \"#FFF\",\n  },\n  compositeLink: {\n    selectors: {\n      \"&.is-selected\": {\n        background: \"#29416f\",\n      },\n      \"&:hover\": {\n        \".ms-Button\": {\n          background: \"#29416f\",\n        },\n        \".ms-Nav-linkText\": {\n          // color: \"#FFF\", // your real styling here\n        },\n        \".ms-Icon\": {\n          color: \"#FFF\",\n        },\n      },\n    },\n  },\n};\n\nfunction Navigation() {\n  // const { children } = props;\n  const dispatch = useDispatch();\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  // console.log(\"roleType?????=>\", roleType);\n\n  const navigation = useSelector(\n    (state: RootState) => state.navigationData.navigationData\n  );\n  // console.log(\"navigation data=>\", navigation.links);\n\n  useEffect((): void => {\n    dispatch(fetchNavigationBar(doctype, roleType ? roleType : \"Employee\"));\n  }, [doctype, roleType]);\n\n  let history = useHistory();\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\n    setSelectedNavKey(item?.key || \"\");\n  };\n  React.useEffect(() => {\n    navLinkGroups[0].links.map((item) => {\n      if (item.links) {\n        item.links.map((subItem) => {\n          if (\n            matchPath(history.location.pathname, {\n              path: subItem.url,\n              exact: true,\n            })\n          ) {\n            setSelectedNavKey(subItem?.key || \"\");\n            return;\n          }\n        });\n      } else {\n        if (\n          matchPath(history.location.pathname, {\n            path: item.url,\n            exact: true,\n          })\n        ) {\n          setSelectedNavKey(item?.key || \"\");\n          return;\n        }\n      }\n    });\n  }, [history.location.pathname]);\n  return (\n    <div className=\"sidebar\">\n      <div className=\"main-logo\">\n        <img src={logo_nuage} />\n      </div>\n      <div className=\"footer-logo\">\n        <img src={hrms_logo} />\n      </div>\n      <Nav\n        onLinkClick={onLinkClick}\n        selectedKey={selectedNavKey}\n        ariaLabel=\"Nav basic example\"\n        styles={navStyles}\n        groups={navigation.links}\n      />\n    </div>\n  );\n}\n\nexport default Navigation;\n","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx",["126","127","128","129","130"],"import React, { useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\n// interface ParamTypes {\n//   id: string\n// }\n\nfunction AddAppraisal(props: any) {\n  // const params = useParams<ParamTypes>();\n  // console.log(\"id => \", params.id);\n  const stackTokens = { childrenGap: 10 };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      borderRadius: \"10px\",\n      \".ms-TextField-wrapper\": {\n        // borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        // borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    icon: {\n      color: \"#344f84\",\n    },\n  };\n\n  const [claimsData, setClaimsData] = useState({\n    id: \"\",\n    description: \"\",\n    owner: \"\",\n    kraSettingGoal: false,\n    kraSettingCompetencies: false,\n    kraSettingDevelopmentPlan: false,\n    kraSettingSummary: false,\n    assessmentGoal: false,\n    assessmentCompetencies: false,\n    assessmentDevelopmentPlan: false,\n    assessmentSummary: false,\n  });\n\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeType = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setSelectedType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n  // console.log(\"type==>\", selectedType.text )\n\n  const onChangeReviewFrequency = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setReviewFrequency(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Add Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n\n  const [dateReview, setDateReview] = useState<Date | undefined>();\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\n\n  const reviewFromDate = (date: Date | null | undefined): void => {\n    setDateReview(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const appraisalToDate = (date: Date | null | undefined): void => {\n    setdDateAppraisal(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // // const rolesOption: IDropdownOption[] = [\n  // //   { key: \"employee\", text: \"Employee\" },\n  // //   { key: \"manager\", text: \"Manager\" },\n  // //   { key: \"hrContent\", text: \"HR content\" },\n  // // ];\n\n  // const [roles, setRoles] = useState<IDropdownOption>({\n  //   key: \"employee\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setRoles(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\n  const [errMsgType, setErrMsgType] = useState(\"\");\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleAddApprisal = () => {\n    if (claimsData.id === \"\") {\n      setErrMsg(\"ID is required\");\n    }\n    if (claimsData.description === \"\") {\n      setErrMsgDescription(\"Description is required\");\n    }\n    if (claimsData.owner === \"\") {\n      setErrMsgOwner(\"Owner is required\");\n    }\n    if (formateType.text === \"\") {\n      setErrMsgFormatType(\"Select format Type\");\n    }\n    if (reviewFrequency.text === \"\") {\n      setErrMsgReviewFrequency(\"Select review Frequency\");\n    }\n    if (selectedType.text === \"\") {\n      setErrMsgType(\"Select type\");\n    }\n    if (dateReview === null) {\n      setErrMsgReviewDate(\"Select review date\");\n    }\n    const addQuery = {\n      id: claimsData.id,\n      appraisal_description: claimsData.description,\n      description: \"22\",\n      format_type: formateType.text,\n      review_frequency: reviewFrequency.text,\n      type: selectedType.text,\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\n      assessment_tab_goals: claimsData.assessmentGoal,\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\n      assessment_tab_summary: claimsData.assessmentSummary,\n      route: \"appraisal/BB00002\",\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\n      appraisal_owner: claimsData.owner,\n    };\n    // console.log(\"addQueary=>\", addQuery);\n    add_apprisal(addQuery).then((response) => {\n      console.log(\"response=>\", response.data);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n        // history.push(\"/\");\n      } else {\n        // console.log(\"failed==>\", failedModal);\n        setFailedModal(true);\n      }\n\n      // else {\n      //   console.log(\"then error msg btnClick==>\", response);\n      // }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              required\n              placeholder=\"ID\"\n              value={claimsData.id}\n              errorMessage={errMsg}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={claimsData.description}\n              errorMessage={errMsgDescription}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              isRequired={true}\n              label=\"Review From\"\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={dateReview}\n              onSelectDate={reviewFromDate}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"Appraisal To\"\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeekAppraisal}\n              strings={DayPickerStringsAppraisal}\n              onSelectDate={appraisalToDate}\n              styles={datePickerStyle}\n              value={dateAppraisal}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgReviewFrequency}\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              onChange={onChangeReviewFrequency}\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            required\n            label=\"Type\"\n            errorMessage={errMsgType}\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            onChange={onChangeType}\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            required\n            label=\"Format Type\"\n            errorMessage={errMsgFormatType}\n            className=\"type-input\"\n            onChange={onChangeFormateType}\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            required\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={claimsData.owner}\n            // styles={textfelidStyle}\n            errorMessage={errMsgOwner}\n            name=\"owner\"\n            onChange={onChangeInput}\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={claimsData.kraSettingCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={claimsData.kraSettingGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={claimsData.kraSettingDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingDevelopmentPlan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.kraSettingSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={claimsData.assessmentGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={claimsData.assessmentCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={claimsData.assessmentDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.assessmentSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setSuccessModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal Added Successfully\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">\n                  Somthing went wrong. Please try again\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add Appraisal\"\n                allowDisabledFocus\n                onClick={handleAddApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            {/* <Dropdown\n              options={rolesOption}\n              onChange={handleRoles}\n              selectedKey={roles ? roles.key : \"employee\"}\n              className=\"rolesDropDown\"\n              styles={dropdownStyles}\n              style={{ marginLeft: \"2rem\" }}\n            /> */}\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderForm()}</div>\n        <div className=\"right-container\"></div>\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(AddAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx",["131","132","133"],"import {\n  Checkbox,\n  DatePicker,\n  Dropdown,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  ITextFieldStyles,\n  Label,\n  mergeStyleSets,\n  PrimaryButton,\n  Separator,\n  Stack,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nconst stackTokens = { childrenGap: 10 };\n\nconst textfelidStyle: Partial<ITextFieldStyles> = {\n  root: {\n    \".ms-TextField-wrapper\": {\n      borderRadius: \"10px\",\n    },\n\n    \".ms-TextField-fieldGroup fieldGroup-195\": {\n      borderRadius: \"10px\",\n    },\n  },\n};\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"HR\" },\n  { key: \"key4\", text: \"Management\" },\n];\n\nconst controlClass = mergeStyleSets({\n  control: {\n    // margin: \"0 0 15px 0\",\n    // maxWidth: \"150px\",\n  },\n});\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\nconst datePickerStyle: Partial<IDatePickerStyles> = {\n  icon: {\n    color: \"rgb(111 144 220)\",\n  },\n};\n\nfunction AppraisalDetail(props: any) {\n  const params = useParams<ParamTypes>();\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [appraisalDetail, setAppraisalDetail]: any = useState({});\n\n  // const rolesOption: IDropdownOption[] = [\n  //   { key: \"key1\", text: \"Employee\" },\n  //   { key: \"key2\", text: \"Manager\" },\n  //   { key: \"key3\", text: \"HR content\" },\n  // ];\n\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n  //   key: \"\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setReviewSearch(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n    },\n  };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then(response =>{\n      setAppraisalDetail(response.data[0]);\n    })\n  }, []);\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Appraisal Details\", key: \"d3\", as: \"h4\" },\n  ];\n\n  console.log(\"local data data=>\", appraisalDetail);\n\n  const renderData = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              disabled={true}\n              placeholder=\"ID\"\n              value={appraisalDetail.id}\n              name=\"id\"\n              label=\"Id\"\n              // onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              disabled={true}\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={appraisalDetail.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              disabled={true}\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow`}\n              // firstDayOfWeek={firstDayOfWeek}\n              // strings={DayPickerStrings}\n              value={new Date(appraisalDetail.review_from)}\n              // onSelectDate={(date) =>\n              //   setUpdateData({ ...updateData, review_from: date })\n              // }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              disabled={true}\n              label=\"Appraisal To\"\n              value={new Date(appraisalDetail.appraisal_to)}\n              className={`${controlClass.control} flexGrow`}\n              // firstDayOfWeek={firstDayOfWeek}\n              // strings={DayPickerStrings}\n              // onSelectDate={(date) =>\n              //   setUpdateData({ ...updateData, appraisal_to: date })\n              // }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              disabled={true}\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === appraisalDetail.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              // onChange={(ev, item) =>\n              //   setUpdateData({ ...updateData, review_frequency: item?.text })\n              // }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            disabled={true}\n            selectedKey={\n              typeOptions.find((item) => item.text === appraisalDetail.type)\n                ?.key\n            }\n            label=\"Type\"\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            // onChange={(ev, item) =>\n            //   setUpdateData({ ...appraisalDetail, type: item?.text })\n            // }\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            disabled={true}\n            selectedKey={\n              formateTypeOptions.find(\n                (item) => item.text === appraisalDetail.format_type\n              )?.key\n            }\n            label=\"Format Type\"\n            className=\"type-input\"\n            // onChange={(ev, item) =>\n            //   setUpdateData({ ...updateData, format_type: item?.text })\n            // }\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            disabled={true}\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={appraisalDetail.appraisal_owner}\n            styles={textfelidStyle}\n            name=\"appraisal_owner\"\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                disabled={true}\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={appraisalDetail.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n              />\n              <Checkbox\n                disabled={true}\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={appraisalDetail.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n              />\n              <Checkbox\n                disabled={true}\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={appraisalDetail.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.kra_settings_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.assessment_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={updateData.assessment_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={updateData.assessment_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.assessment_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            ></div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            {/* <Dropdown\n              selectedKey={\"key1\"}\n              options={rolesOption}\n              onChange={handleRoles}\n              className=\"rolesDropDown\"\n              styles={dropdownStyles}\n              style={{ marginLeft: \"2rem\" }}\n            /> */}\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderData()} </div>\n        <div className=\"right-container\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AppraisalDetail);\n","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx",["134","135","136","137","138","139","140","141","142","143","144"],"/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport {\n  DetailsList,\n  Dropdown,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IDetailsListStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  PrimaryButton,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\nimport { RootState } from \"../../redux/reducers\";\nimport { Pagination } from \"@uifabric/experiments\";\n\nfunction GoalSetting(props: any) {\n  const dispatch = useDispatch();\n\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start, setLimitStart] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [role, setRole] = useState(\"Employee\");\n  const [currentPage, setCurentPage] = useState(0);\n  const [limitPageLength, setLimitPageLength] = useState(3);\n  const [limitStart, setLimitSTart] = useState(0);\n\n  const employee = useSelector((state: RootState) => state.employeeList);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const { employeeList, isLoading, total_count, count } = employee;\n  // console.log(\"employeeList=> \", employeeList);\n\n  const [employeData, setEmployeeData]: any = useState({});\n  // console.log(\"employee data=>\", employeeList);\n\n  useEffect((): void => {\n    dispatch(fetchEmployeeData(doctype, limit_start, limit, roleType));\n  }, [doctype, limit_start, limit, roleType]);\n\n  const [roles, setRoles] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [period, setPeriod] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [status, setStatus] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n  const history = useHistory();\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const rolesOption: IDropdownOption[] = [\n    { key: \"employee\", text: \"Employee\" },\n    { key: \"manager\", text: \"Manager\" },\n    { key: \"hrContact\", text: \"HR Contact\" },\n  ];\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 250,\n      border: \"0px\",\n    },\n  };\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      backgroundColor: \"#344f84\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const periodOption: IDropdownOption[] = [\n    { key: \"key1\", text: \"2017-2018\" },\n    { key: \"key2\", text: \"2018-2019\" },\n    { key: \"key3\", text: \"2019-2020\" },\n  ];\n  const statusOption: IDropdownOption[] = [\n    { key: \"key1\", text: \"Pending with Employee\" },\n    { key: \"key2\", text: \"Pending with Reviewer\" },\n    { key: \"key3\", text: \"Pending Counter Signing\" },\n    { key: \"key4\", text: \"Complete\" },\n  ];\n\n  const operations = [\n    {\n      sno: \"01\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n  ];\n\n  const columns: IColumn[] = [\n    // {\n    //   key: \"01\",\n    //   name: \"S.No\",\n    //   fieldName: \"sno\",\n    //   minWidth: 50,\n    //   maxWidth: 50,\n    //   isSorted: true,\n    //   className: \"idColumn\",\n    //   isSortedDescending: false,\n    //   sortAscendingAriaLabel: \"Sorted A to Z\",\n    //   isRowHeader: true,\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\n    //   isResizable: false,\n    // },\n    {\n      key: \"02\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 110,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <PrimaryButton\n            text=\"KRA Setting\"\n            allowDisabledFocus\n            onClick={() => {\n              handleKraData(item);\n            }}\n            className=\"action-btn\"\n            style={{\n              padding: \"0px\",\n              fontSize: \"0.75rem\",\n              height: \"24px\",\n              borderRadius: \"3px\",\n            }}\n            disabled={false}\n            checked={false}\n          />\n        </div>\n      ),\n    },\n    {\n      key: \"03\",\n      name: \"Employee ID\",\n      fieldName: \"employee_id\",\n      minWidth: 50,\n      maxWidth: 90,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Employee Name\",\n      fieldName: \"employee_name\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    // {\n    //   key: \"05\",\n    //   name: \"Manager ID\",\n    //   fieldName: \"manager_id\",\n    //   minWidth: 50,\n    //   maxWidth: 100,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    // },\n    {\n      key: \"06\",\n      name: \"Manager Name\",\n      fieldName: \"manager_name\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Status\",\n      fieldName: \"status\",\n      minWidth: 50,\n      maxWidth: 170,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Appraisal Type\",\n      fieldName: \"appraisal_type\",\n      minWidth: 50,\n      maxWidth: 160,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n  ];\n\n  const handleKraData = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/${item.employee_id}`);\n    // history.push(\"/appraisal/goalsetting/view\");\n  };\n\n  const handleRoles = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setRoles(\n      item || {\n        key: \"employee\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangePeriod = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setPeriod(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeStatus = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setStatus(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/\");\n  };\n\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    // { text: \"Employee\", key: \"d3\", as: \"h4\" },\n    { text: \"Goal Setting\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n\n  return (\n    <div className=\"view\">\n      <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            {/* <Dropdown\n              options={rolesOption}\n              onChange={handleRoles}\n              selectedKey={roles ? roles.key : \"employee\"}\n              // defaultSelectedKey={roles ? roles.key : \"employee\"}\n              className=\"rolesDropDown\"\n              styles={dropdownStyles}\n              style={{ marginLeft: \"2rem\" }}\n            /> */}\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          <div\n            style={{\n              display: \"flex\",\n              // justifyContent: \"space-between\",\n              marginBottom: \"10px\",\n            }}\n          >\n            <Dropdown\n              label=\"Status\"\n              placeholder=\"Select\"\n              options={statusOption}\n              className=\"reviewFrequency\"\n              onChange={onChangeStatus}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            />\n            <PrimaryButton\n              iconProps={{ iconName: \"Search\" }}\n              style={{\n                marginLeft: \"20px\",\n                alignSelf: \"center\",\n                marginTop: \"28px\",\n              }}\n            />\n            {/* <Dropdown\n              label=\"Period\"\n              placeholder=\"Select\"\n              options={periodOption}\n              className=\"reviewFrequency\"\n              onChange={onChangePeriod}\n              style={{ padding: \"0px\" }}\n              styles={dropdownStyles}\n            /> */}\n          </div>\n          <DetailsList\n            styles={listStyle}\n            items={employeeList}\n            className=\"detail-list\"\n            columns={columns}\n            selectionMode={0}\n          />\n          <div className=\"pagination-style\">\n            <Pagination\n              format=\"buttons\"\n              // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n              selectedPageIndex={currentPage}\n              pageCount={Math.ceil(total_count / limitPageLength)}\n              itemsPerPage={limitPageLength}\n              totalItemCount={total_count}\n              onPageChange={(page) => {\n                setLimitSTart(page * limitPageLength);\n                setCurentPage(page);\n              }}\n            />\n          </div>\n          {/* <div style={{ marginTop: \"10px\" }}>\n            <PrimaryButton\n              text=\"Export\"\n              allowDisabledFocus\n              disabled={false}\n              checked={false}\n            />\n            <PrimaryButton\n              text=\"Back\"\n              allowDisabledFocus\n              disabled={false}\n              checked={false}\n            />\n          </div> */}\n        </div>\n        <div className=\"right-container\">\n          <div className=\"stepper\">\n            <ul className=\"progress\">\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Provide your job history</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Perform goal setting</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Update training needs</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider grey\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Create development plan</span>\n                </p>\n              </li>\n              {/* <li>\n                <div className=\"divider grey\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">Payment Released </p>\n              </li> */}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalSetting);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx",["165","166","167","168","169"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { useParams } from \"react-router-dom\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Quarterly Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nfunction UpdateAppraisal(props: any) {\n  const params = useParams<ParamTypes>();\n  const stackTokens = { childrenGap: 10 };\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [updateData, setUpdateData]: any = useState({});\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then(response =>{\n      setUpdateData(response.data[0]);\n    })\n  }, []);\n\n  // console.log(\"upadetdata==>\", updateData);\n\n  // const appraisalList = useSelector((state: RootState) => state.appraisal.appraisalList) || [];\n  //   const updateData = appraisalList.find(item => item.id === params.appraisalId);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      \".ms-TextField-wrapper\": {\n        borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   marginRight: \"10px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n\n  // const [dateReview, setDateReview] = useState<Date | null | undefined>(\n  //   new Date(updateData.review_from)\n  // );\n  // const [dateAppraisal, setdDateAppraisal] = useState<Date | null | undefined>(\n  //   new Date(updateData.appraisal_to)\n  // );\n\n  // const reviewFromDate = (date: Date | null | undefined): void => {\n  //   const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setDateReview(reviewFrequencyDate);\n  // };\n  // const appraisalToDate = (date: Date | null | undefined): void => {\n  //   const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setdDateAppraisal(appraisalDate);\n  // };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // const rolesOption: IDropdownOption[] = [\n  //   { key: \"key1\", text: \"HR\" },\n  //   { key: \"key2\", text: \"Manager\" },\n  //   { key: \"key3\", text: \"Employee\" },\n  // ];\n\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n  //   key: \"\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setReviewSearch(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleUpdateApprisal = () => {\n    const updateQuery = {\n      ...updateData,\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\n      description: \"22\",\n      route: \"appraisal/BB00002\",\n    };\n    // console.log(\"updateQuery=>\", updateQuery);\n    edit_appraisal(updateQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderUpdateForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container\">\n          <div className=\"row\">\n            <TextField\n              disabled\n              placeholder=\"ID\"\n              value={updateData.id}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={updateData.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"row\">\n            <DatePicker\n              isRequired\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={new Date(updateData.review_from)}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, review_from: date })\n              }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired\n              label=\"Appraisal To\"\n              value={new Date(updateData.appraisal_to)}\n              className={`${controlClass.control} flexGrow`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, appraisal_to: date })\n              }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === updateData.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, review_frequency: item?.text })\n              }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <Dropdown\n            required\n            selectedKey={\n              typeOptions.find((item) => item.text === updateData.type)?.key\n            }\n            label=\"Type\"\n            placeholder=\"Select Type\"\n            className=\"type-input\"\n            options={typeOptions}\n            onChange={(ev, item) =>\n              setUpdateData({ ...updateData, type: item?.text })\n            }\n            // styles={typeDropdownStyles}\n          />\n          <Dropdown\n            required\n            selectedKey={\n              formateTypeOptions.find(\n                (item) => item.text === updateData.format_type\n              )?.key\n            }\n            label=\"Format Type\"\n            className=\"type-input\"\n            onChange={(ev, item) =>\n              setUpdateData({ ...updateData, format_type: item?.text })\n            }\n            placeholder=\"Select Format Type\"\n            options={formateTypeOptions}\n            // styles={typeDropdownStyles}\n          />\n          <TextField\n            required\n            label=\"Owner\"\n            placeholder=\"Owner\"\n            value={updateData.appraisal_owner}\n            styles={textfelidStyle}\n            name=\"appraisal_owner\"\n            onChange={onChangeInput}\n          />\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={updateData.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={updateData.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.kra_settings_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.assessment_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={updateData.assessment_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={updateData.assessment_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.assessment_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal Updated Successfully\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">\n                  Somthing went wrong. Please try again\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            {/* <Dropdown\n              options={rolesOption}\n              onChange={handleRoles}\n              className=\"rolesDropDown\"\n              styles={dropdownStyles}\n              style={{ marginLeft: \"2rem\" }}\n            /> */}\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderUpdateForm()}</div>\n        <div className=\"right-container\"></div>\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(UpdateAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx",["170","171","172","173","174","175"],"import {\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IPivotStyles,\n  IStyleSet,\n  ITextFieldStyles,\n  Label,\n  Pivot,\n  PivotItem,\n  PivotLinkFormat,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { fetchJobHistory } from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport { fetchEmployeeData } from \"../../redux/actions/employeeData\";\n\ninterface ParamTypes {\n  employeeId: string;\n}\n\nfunction EmployeeDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const dispatch = useDispatch();\n  const [doctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start] = useState(0);\n  const [limit] = useState(10);\n  const [filtersById] = useState(params.employeeId);\n  const employee = useSelector((state: RootState) => state.employeeList);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const { employeeList, isLoading, total_count, count } = employee;\n  // console.log(\"employeeList===> \", employeeList.find((item:any) => item.employee_id === params.employeeId));\n  const employeeData = employeeList.find((item:any) => item.employee_id === params.employeeId);\n  const history = useHistory();\n  const [employeeDetails, setEmployeeDetails]: any = useState({})\n  useEffect((): void => {\n    dispatch(fetchEmployeeData(doctype, limit_start, limit, roleType));\n  }, [doctype, limit_start, limit, roleType]);\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters))\n    .then(response => {\n      setEmployeeDetails(response.data[0]);\n    })\n  }, []);\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const pivotStyles: Partial<IStyleSet<IPivotStyles>> = {\n    root: {\n      //   backgroundColor: \"red\",\n    },\n    linkContent: {\n      //   color: \"#FFF\",\n    },\n    linkIsSelected: {\n      //   \"&.hover\": { backgroundColor: \"red\" },\n      backgroundColor: \"#344f84\",\n      \"&.is-selected\": {\n        background: \"#29416f\",\n      },\n      selectors: {\n        \":before\": {\n          height: \"80px\",\n        },\n      },\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n  const renderEmployeeDetails = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"row-jobHistory\">\n          <TextField\n            readOnly={true}\n            value ={employeeData.employee_id}\n            placeholder=\"Employee ID\"\n            label=\"Employee Id\"\n            name=\"id\"\n            styles={textfelidStyle}\n            // value={jobHistory[0].employee_id}\n            // onChange={onChangeInput}\n            className=\"flexGrow\"\n          />\n          <TextField\n            readOnly= {true}\n            value={employeeData.employee_name}\n            placeholder=\"Employee Name\"\n            label=\"Employee Name\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"appraisal_description\"\n            // onChange={onChangeInput}\n          />\n          <TextField\n            readOnly={true}\n            value ={employeeData.designation}\n            placeholder=\"Designation\"\n            label=\"Designation\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"appraisal_description\"\n          />\n        </div>\n        <div className=\"row-jobHistory\">\n          <TextField\n            readOnly={true}\n            value={employeeData.location}\n            placeholder=\"Location\"\n            label=\"Reporting Officer\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"appraisal_description\"\n          />\n          <TextField\n            readOnly={true}\n            value={employeeData.department}\n            placeholder=\"Department\"\n            label=\"Department\"\n            name=\"id\"\n            // onChange={onChangeInput}\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n          />\n          <TextField\n            readOnly={true}\n            value={employeeData.date_of_joining}\n            placeholder=\"Date of Joining\"\n            label=\"Date of Joining\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"appraisal_description\"\n          />\n        </div>\n        <div className=\"row-jobHistory\">\n          <TextField\n            readOnly={true}\n            // value={employeeData.date_of_joining}\n            placeholder=\"Reporting Officer\"\n            label=\"Reporting Officer\"\n            styles={textfelidStyle}\n            className=\"flexGrow\"\n            name=\"appraisal_description\"\n            // onChange={onChangeInput}\n          />\n          <TextField\n            readOnly={true}\n            value={employeeData.reviewer_name}\n            placeholder=\"Reviewer\"\n            label=\"Reviewer\"\n            name=\"id\"\n            styles={textfelidStyle}\n            // onChange={onChangeInput}\n            className=\"flexGrow\"\n          />\n          <TextField\n            readOnly={true}\n            value={employeeData.counter_signing_name}\n            placeholder=\"Counter signing\"\n            label=\"Counter signing\"\n            name=\"id\"\n            styles={textfelidStyle}\n            // onChange={onChangeInput}\n            className=\"flexGrow\"\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Pivot styles={pivotStyles} linkFormat={PivotLinkFormat.tabs}>\n            <PivotItem headerText=\"Job History\">\n              <Label>Pivot #1</Label>\n            </PivotItem>\n            <PivotItem headerText=\"Goals\">\n              <Label>Pivot #2</Label>\n            </PivotItem>\n            <PivotItem headerText=\"Training / Development Plan\">\n              <Label>Pivot #3</Label>\n            </PivotItem>\n          </Pivot>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"view\">\n      <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderEmployeeDetails()}</div>\n        <div className=\"right-container\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(EmployeeDetails);\n","/home/pratik/Documents/mega-soft/src/redux/actions/navigation.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Header.tsx",["176","177","178"],"import * as React from \"react\";\nimport {\n  Breadcrumb,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDividerAsProps,\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\nimport { IContextualMenuProps } from \"office-ui-fabric-react\";\nimport { TooltipHost } from \"office-ui-fabric-react/lib/Tooltip\";\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\nimport \"./Header.css\";\n\nconst menuProps: IContextualMenuProps = {\n  items: [\n    {\n      key: \"action01\",\n      text: \"Action 1\",\n      //   iconProps: { iconName: 'Mail' },\n    },\n    {\n      key: \"action02\",\n      text: \"Action 2\",\n      //   iconProps: { iconName: 'Calendar' },\n    },\n  ],\n};\nfunction _onBreadcrumbItemClicked(\n  ev?: React.MouseEvent<HTMLElement>,\n  item?: IBreadcrumbItem\n): void {\n  console.log(`Breadcrumb item with key \"${item?.key}\" has been clicked.`);\n}\nconst itemsWithHeading: IBreadcrumbItem[] = [\n  {\n    text: \"Performance\",\n    key: \"Files\",\n    onClick: _onBreadcrumbItemClicked,\n    href: \"\",\n  },\n  { text: \"Appraisal\", key: \"d1\", isCurrentItem: true },\n];\nfunction _getCustomOverflowIcon(): JSX.Element {\n  return <Icon iconName={\"ChevronDown\"} />;\n}\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\n  const tooltipText = dividerProps.item ? dividerProps.item.text : \"\";\n  return (\n    <TooltipHost\n      content={`Show ${tooltipText} contents`}\n      calloutProps={{ gapSpace: 0 }}\n    >\n      <span aria-hidden=\"true\" style={{ cursor: \"pointer\", padding: 5 }}>\n        /\n      </span>\n    </TooltipHost>\n  );\n}\n\nconst breadCrumStyle: Partial<IBreadcrumbStyles> = {\n  root: {\n    margin: \"0px\",\n    padding: \"0px\",\n    marginTop: \"-10px\",\n  },\n  itemLink: {\n    fontSize: \"22px\",\n  },\n};\n\nfunction Header(props: { item?: IBreadcrumbItem[]; styles: any }) {\n  // const _alertClicked = () => {\n  //   console.log(\"clicked==>\")\n  // }\n  // const horizontalStackProps: IStackProps = {\n  //     horizontal: true,\n  //     tokens: { childrenGap: 100, },\n  // };\n  // const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\n\n  return (\n    <div className=\"header\">\n      <Breadcrumb\n        // items={itemsWithHeading}\n        items={props.item || []}\n        styles={props.styles}\n        maxDisplayedItems={5}\n        ariaLabel=\"With custom rendered divider and overflow icon\"\n        dividerAs={_getCustomDivider}\n        onRenderOverflowIcon={_getCustomOverflowIcon}\n      />\n    </div>\n  );\n}\n\nexport default Header;\n","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx",["179"],"import axios from \"axios\";\nimport accessToken from \"../../apiBase.json\";\n\nexport const addApprisal = (item: any) => {\n  return {\n    type: \"ADD_APPRISAL\",\n    payload: item,\n  };\n};\n\nexport const fetchAppraisalData = (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => async (dispatch: any): Promise<any> => {\n  try {\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_START\",\n    });\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n    });\n    const responseBody = await response.data;\n    // console.log(\"api response =>\", responseBody);\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_SUCCESS\",\n      payload: responseBody,\n    });\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const fetchAppraisalDataById = async (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n    });\n    const responseBody = await response.data;\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\n\nexport const add_apprisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \"token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    return response;\n  } catch (error) {\n    console.log(\"error in catch block=>\", JSON.stringify(error));\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const edit_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data.id}`,\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    // console.log(\"api response ==>\", response)\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const delete_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data}`,\n      method: \"DELETE\",\n      headers: {\n        // \"Access-Control-Allow-Methods\" : \"GET, POST, OPTIONS, PUT, DELETE\",\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    console.log(\"delete api response ==>\", response);\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/components/WelcomeHeader/index.tsx",["180","181","182"],"import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport logo_ms from \"../../assets/img/logo_ms.png\";\nimport {\n  Dropdown,\n  IDropdownOption,\n  IDropdownStyles,\n  Link,\n} from \"office-ui-fabric-react\";\n\nimport \"./styles.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRoleType } from \"../../redux/actions/roleType\";\nimport { RootState } from \"../../redux/reducers\";\n\nconst rolesOption: IDropdownOption[] = [\n  { key: \"employee\", text: \"Employee\" },\n  { key: \"manager\", text: \"Manager\" },\n  { key: \"hrContact\", text: \"HR Contact\" },\n];\n\nfunction WelcomeHeader(props: { children: any }) {\n  const { children } = props;\n  const roleType = useSelector(\n    (state: RootState) => state.roleType.roleType\n  );\n  const dispatch = useDispatch();\n\n  // console.log(\"role.text===>\", role.text);\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n    },\n  };\n\n  const handleRoles = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    dispatch(setRoleType(item?.text));\n  };\n\n  return (\n    <div className=\"welcome-header\">\n      <div style={{ display: \"flex\", }}>\n        {children}\n        <div>\n          <Dropdown\n            options={rolesOption}\n            onChange={handleRoles}\n            selectedKey={rolesOption.find(item => item.text === roleType)?.key}\n            className=\"rolesDropDown\"\n            styles={dropdownStyles}\n            style={{ marginLeft: \"2rem\", marginTop:\"10px\" }}\n          />\n        </div>\n      </div>\n      <div style={{ display: \"flex\", padding: \"10px\" }}>\n        <Link>Log Out</Link>\n        <img src={logo_ms} className=\"ms-logo\" />\n      </div>\n    </div>\n  );\n}\n\nexport default WelcomeHeader;\n","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx",[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":189,"column":19,"nodeType":"189","messageId":"190","endLine":189,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":200,"column":6,"nodeType":"193","endLine":200,"endColumn":25,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":208,"column":39,"nodeType":"197","messageId":"198","endLine":208,"endColumn":41},{"ruleId":"195","severity":1,"message":"196","line":210,"column":34,"nodeType":"197","messageId":"198","endLine":210,"endColumn":36},{"ruleId":"195","severity":1,"message":"199","line":218,"column":13,"nodeType":"200","messageId":"201","endLine":218,"endColumn":20},{"ruleId":"195","severity":1,"message":"199","line":229,"column":11,"nodeType":"200","messageId":"201","endLine":229,"endColumn":18},{"ruleId":"202","severity":1,"message":"203","line":237,"column":9,"nodeType":"204","endLine":237,"endColumn":33},{"ruleId":"202","severity":1,"message":"203","line":240,"column":9,"nodeType":"204","endLine":240,"endColumn":32},{"ruleId":"187","severity":1,"message":"205","line":55,"column":7,"nodeType":"189","messageId":"190","endLine":55,"endColumn":47},{"ruleId":"187","severity":1,"message":"206","line":71,"column":9,"nodeType":"189","messageId":"190","endLine":71,"endColumn":50},{"ruleId":"187","severity":1,"message":"207","line":365,"column":10,"nodeType":"189","messageId":"190","endLine":365,"endColumn":26},{"ruleId":"187","severity":1,"message":"208","line":366,"column":10,"nodeType":"189","messageId":"190","endLine":366,"endColumn":29},{"ruleId":"187","severity":1,"message":"209","line":366,"column":31,"nodeType":"189","messageId":"190","endLine":366,"endColumn":53},{"ruleId":"187","severity":1,"message":"205","line":67,"column":7,"nodeType":"189","messageId":"190","endLine":67,"endColumn":47},{"ruleId":"187","severity":1,"message":"205","line":114,"column":9,"nodeType":"189","messageId":"190","endLine":114,"endColumn":49},{"ruleId":"191","severity":1,"message":"210","line":140,"column":6,"nodeType":"193","endLine":140,"endColumn":8,"suggestions":"211"},{"ruleId":"187","severity":1,"message":"212","line":31,"column":8,"nodeType":"189","messageId":"190","endLine":31,"endColumn":13},{"ruleId":"187","severity":1,"message":"213","line":52,"column":10,"nodeType":"189","messageId":"190","endLine":52,"endColumn":23},{"ruleId":"187","severity":1,"message":"214","line":52,"column":25,"nodeType":"189","messageId":"190","endLine":52,"endColumn":41},{"ruleId":"187","severity":1,"message":"215","line":54,"column":27,"nodeType":"189","messageId":"190","endLine":54,"endColumn":45},{"ruleId":"187","severity":1,"message":"216","line":62,"column":37,"nodeType":"189","messageId":"190","endLine":62,"endColumn":42},{"ruleId":"187","severity":1,"message":"217","line":64,"column":9,"nodeType":"189","messageId":"190","endLine":64,"endColumn":15},{"ruleId":"191","severity":1,"message":"218","line":100,"column":6,"nodeType":"193","endLine":107,"endColumn":4,"suggestions":"219"},{"ruleId":"187","severity":1,"message":"220","line":329,"column":10,"nodeType":"189","messageId":"190","endLine":329,"endColumn":27},{"ruleId":"187","severity":1,"message":"221","line":330,"column":10,"nodeType":"189","messageId":"190","endLine":330,"endColumn":14},{"ruleId":"187","severity":1,"message":"222","line":376,"column":9,"nodeType":"189","messageId":"190","endLine":376,"endColumn":20},{"ruleId":"187","severity":1,"message":"223","line":388,"column":9,"nodeType":"189","messageId":"190","endLine":388,"endColumn":29},{"ruleId":"187","severity":1,"message":"188","line":25,"column":19,"nodeType":"189","messageId":"190","endLine":25,"endColumn":29},{"ruleId":"187","severity":1,"message":"224","line":26,"column":23,"nodeType":"189","messageId":"190","endLine":26,"endColumn":36},{"ruleId":"187","severity":1,"message":"225","line":27,"column":17,"nodeType":"189","messageId":"190","endLine":27,"endColumn":25},{"ruleId":"187","severity":1,"message":"221","line":28,"column":10,"nodeType":"189","messageId":"190","endLine":28,"endColumn":14},{"ruleId":"187","severity":1,"message":"226","line":28,"column":16,"nodeType":"189","messageId":"190","endLine":28,"endColumn":23},{"ruleId":"187","severity":1,"message":"215","line":30,"column":27,"nodeType":"189","messageId":"190","endLine":30,"endColumn":45},{"ruleId":"187","severity":1,"message":"227","line":31,"column":10,"nodeType":"189","messageId":"190","endLine":31,"endColumn":20},{"ruleId":"187","severity":1,"message":"228","line":35,"column":25,"nodeType":"189","messageId":"190","endLine":35,"endColumn":34},{"ruleId":"187","severity":1,"message":"216","line":35,"column":49,"nodeType":"189","messageId":"190","endLine":35,"endColumn":54},{"ruleId":"187","severity":1,"message":"229","line":38,"column":10,"nodeType":"189","messageId":"190","endLine":38,"endColumn":21},{"ruleId":"187","severity":1,"message":"230","line":38,"column":23,"nodeType":"189","messageId":"190","endLine":38,"endColumn":38},{"ruleId":"191","severity":1,"message":"192","line":43,"column":6,"nodeType":"193","endLine":43,"endColumn":45,"suggestions":"231"},{"ruleId":"187","severity":1,"message":"232","line":45,"column":10,"nodeType":"189","messageId":"190","endLine":45,"endColumn":15},{"ruleId":"187","severity":1,"message":"233","line":50,"column":10,"nodeType":"189","messageId":"190","endLine":50,"endColumn":16},{"ruleId":"187","severity":1,"message":"234","line":55,"column":10,"nodeType":"189","messageId":"190","endLine":55,"endColumn":16},{"ruleId":"187","severity":1,"message":"235","line":63,"column":9,"nodeType":"189","messageId":"190","endLine":63,"endColumn":39},{"ruleId":"187","severity":1,"message":"236","line":108,"column":9,"nodeType":"189","messageId":"190","endLine":108,"endColumn":40},{"ruleId":"187","severity":1,"message":"237","line":120,"column":9,"nodeType":"189","messageId":"190","endLine":120,"endColumn":19},{"ruleId":"187","severity":1,"message":"222","line":243,"column":9,"nodeType":"189","messageId":"190","endLine":243,"endColumn":20},{"ruleId":"187","severity":1,"message":"238","line":255,"column":9,"nodeType":"189","messageId":"190","endLine":255,"endColumn":23},{"ruleId":"187","severity":1,"message":"205","line":56,"column":7,"nodeType":"189","messageId":"190","endLine":56,"endColumn":47},{"ruleId":"191","severity":1,"message":"210","line":92,"column":6,"nodeType":"193","endLine":92,"endColumn":8,"suggestions":"239"},{"ruleId":"187","severity":1,"message":"240","line":171,"column":26,"nodeType":"189","messageId":"190","endLine":171,"endColumn":43},{"ruleId":"187","severity":1,"message":"241","line":182,"column":10,"nodeType":"189","messageId":"190","endLine":182,"endColumn":21},{"ruleId":"187","severity":1,"message":"242","line":209,"column":9,"nodeType":"189","messageId":"190","endLine":209,"endColumn":28},{"ruleId":"187","severity":1,"message":"228","line":36,"column":25,"nodeType":"189","messageId":"190","endLine":36,"endColumn":34},{"ruleId":"187","severity":1,"message":"243","line":36,"column":36,"nodeType":"189","messageId":"190","endLine":36,"endColumn":47},{"ruleId":"187","severity":1,"message":"216","line":36,"column":49,"nodeType":"189","messageId":"190","endLine":36,"endColumn":54},{"ruleId":"187","severity":1,"message":"244","line":40,"column":10,"nodeType":"189","messageId":"190","endLine":40,"endColumn":25},{"ruleId":"191","severity":1,"message":"192","line":43,"column":6,"nodeType":"193","endLine":43,"endColumn":45,"suggestions":"245"},{"ruleId":"191","severity":1,"message":"246","line":53,"column":6,"nodeType":"193","endLine":53,"endColumn":8,"suggestions":"247"},{"ruleId":"187","severity":1,"message":"248","line":13,"column":7,"nodeType":"189","messageId":"190","endLine":13,"endColumn":38},{"ruleId":"187","severity":1,"message":"249","line":33,"column":7,"nodeType":"189","messageId":"190","endLine":33,"endColumn":42},{"ruleId":"187","severity":1,"message":"250","line":59,"column":7,"nodeType":"189","messageId":"190","endLine":59,"endColumn":49},{"ruleId":"187","severity":1,"message":"251","line":2,"column":8,"nodeType":"189","messageId":"190","endLine":2,"endColumn":19},{"ruleId":"187","severity":1,"message":"252","line":2,"column":10,"nodeType":"189","messageId":"190","endLine":2,"endColumn":19},{"ruleId":"187","severity":1,"message":"253","line":2,"column":21,"nodeType":"189","messageId":"190","endLine":2,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":61,"column":9,"nodeType":"204","endLine":61,"endColumn":50},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"@typescript-eslint/no-unused-vars","'setDoctype' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["256"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dropdownStyles' is assigned a value but never used.","'textfelidStyle' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["257"],"'Panel' is defined but never used.","'hasMoreRecord' is assigned a value but never used.","'setHasMoreRecord' is assigned a value but never used.","'setLimitPageLength' is assigned a value but never used.","'count' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["258"],"'appraisalToSearch' is assigned a value but never used.","'role' is assigned a value but never used.","'handleRoles' is assigned a value but never used.","'itemSearchApprisalTo' is assigned a value but never used.","'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'setRole' is assigned a value but never used.","'limitStart' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'employeData' is assigned a value but never used.","'setEmployeeData' is assigned a value but never used.",["259"],"'roles' is assigned a value but never used.","'period' is assigned a value but never used.","'status' is assigned a value but never used.","'rolesOption' is assigned a value but never used.","'periodOption' is assigned a value but never used.","'operations' is assigned a value but never used.","'onChangePeriod' is assigned a value but never used.",["260"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'total_count' is assigned a value but never used.","'employeeDetails' is assigned a value but never used.",["261"],"React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["262"],"'menuProps' is assigned a value but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'accessToken' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"265","fix":"271"},{"desc":"269","fix":"272"},{"desc":"273","fix":"274"},"Update the dependencies array to be: [dispatch, doctype, roleType]",{"range":"275","text":"276"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"277","text":"278"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, dispatch, orderByField]",{"range":"279","text":"280"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, dispatch]",{"range":"281","text":"282"},{"range":"283","text":"278"},{"range":"284","text":"282"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"285","text":"286"},[4962,4981],"[dispatch, doctype, roleType]",[3308,3310],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[3164,3287],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, dispatch, orderByField]",[1565,1604],"[doctype, limit_start, limit, roleType, dispatch]",[2412,2414],[1625,1664],[1936,1938],"[filtersById, roleType]"]