[{"/home/pratik/Documents/mega-soft/src/index.tsx":"1","/home/pratik/Documents/mega-soft/src/reportWebVitals.ts":"2","/home/pratik/Documents/mega-soft/src/App.tsx":"3","/home/pratik/Documents/mega-soft/src/redux/index.tsx":"4","/home/pratik/Documents/mega-soft/src/Navigation.tsx":"5","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx":"6","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx":"7","/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx":"8","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx":"9","/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx":"10","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx":"11","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx":"12","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx":"13","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx":"14","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx":"15","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx":"16","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx":"17","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx":"18","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx":"19","/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx":"20","/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx":"21","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx":"22","/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx":"23","/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx":"24","/home/pratik/Documents/mega-soft/src/Header.tsx":"25","/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx":"26","/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx":"27","/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx":"28","/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx":"29","/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx":"30","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx":"31","/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx":"32","/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx":"33","/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx":"34","/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx":"35","/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx":"36","/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx":"37","/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx":"38","/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx":"39","/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx":"40","/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx":"41","/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx":"42","/home/pratik/Documents/mega-soft/src/Utils/color.tsx":"43","/home/pratik/Documents/mega-soft/src/i18n.tsx":"44","/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx":"45"},{"size":643,"mtime":1613404687635,"results":"46","hashOfConfig":"47"},{"size":425,"mtime":1610466480732,"results":"48","hashOfConfig":"47"},{"size":6162,"mtime":1613666111722,"results":"49","hashOfConfig":"47"},{"size":205,"mtime":1611071583172,"results":"50","hashOfConfig":"47"},{"size":7129,"mtime":1613666111722,"results":"51","hashOfConfig":"47"},{"size":3090,"mtime":1612888024571,"results":"52","hashOfConfig":"47"},{"size":3405,"mtime":1612890108996,"results":"53","hashOfConfig":"47"},{"size":4996,"mtime":1613404687631,"results":"54","hashOfConfig":"47"},{"size":7942,"mtime":1613669435849,"results":"55","hashOfConfig":"47"},{"size":12920,"mtime":1613667682912,"results":"56","hashOfConfig":"47"},{"size":13505,"mtime":1613667997101,"results":"57","hashOfConfig":"47"},{"size":7438,"mtime":1613667745951,"results":"58","hashOfConfig":"47"},{"size":15583,"mtime":1613667212566,"results":"59","hashOfConfig":"47"},{"size":3809,"mtime":1612799899538,"results":"60","hashOfConfig":"47"},{"size":14880,"mtime":1613667925781,"results":"61","hashOfConfig":"47"},{"size":7230,"mtime":1613667506058,"results":"62","hashOfConfig":"47"},{"size":20864,"mtime":1613667854809,"results":"63","hashOfConfig":"47"},{"size":24138,"mtime":1613667076331,"results":"64","hashOfConfig":"47"},{"size":25963,"mtime":1613669848753,"results":"65","hashOfConfig":"47"},{"size":11883,"mtime":1613669520763,"results":"66","hashOfConfig":"47"},{"size":42414,"mtime":1613667455027,"results":"67","hashOfConfig":"47"},{"size":985,"mtime":1613666111750,"results":"68","hashOfConfig":"47"},{"size":653,"mtime":1613404687639,"results":"69","hashOfConfig":"47"},{"size":17501,"mtime":1613670054087,"results":"70","hashOfConfig":"47"},{"size":2453,"mtime":1611762788465,"results":"71","hashOfConfig":"47"},{"size":3437,"mtime":1612888024579,"results":"72","hashOfConfig":"47"},{"size":4509,"mtime":1613404687639,"results":"73","hashOfConfig":"47"},{"size":6361,"mtime":1613666111750,"results":"74","hashOfConfig":"47"},{"size":1657,"mtime":1613404687635,"results":"75","hashOfConfig":"47"},{"size":12737,"mtime":1613666111722,"results":"76","hashOfConfig":"47"},{"size":476,"mtime":1613666111750,"results":"77","hashOfConfig":"47"},{"size":2161,"mtime":1613666111750,"results":"78","hashOfConfig":"47"},{"size":422,"mtime":1612888024579,"results":"79","hashOfConfig":"47"},{"size":584,"mtime":1612372890972,"results":"80","hashOfConfig":"47"},{"size":750,"mtime":1611997864766,"results":"81","hashOfConfig":"47"},{"size":419,"mtime":1611848900136,"results":"82","hashOfConfig":"47"},{"size":442,"mtime":1611848900136,"results":"83","hashOfConfig":"47"},{"size":772,"mtime":1611848900136,"results":"84","hashOfConfig":"47"},{"size":793,"mtime":1610987455768,"results":"85","hashOfConfig":"47"},{"size":1029,"mtime":1613404687639,"results":"86","hashOfConfig":"47"},{"size":553,"mtime":1613666111754,"results":"87","hashOfConfig":"47"},{"size":624,"mtime":1613666111754,"results":"88","hashOfConfig":"47"},{"size":332,"mtime":1613666111726,"results":"89","hashOfConfig":"47"},{"size":769,"mtime":1613666111750,"results":"90","hashOfConfig":"47"},{"size":468,"mtime":1613666111750,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"1fk01iq",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108","usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"95"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"95"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"95"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"95"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"95"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"95"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"95"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"95"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"/home/pratik/Documents/mega-soft/src/index.tsx",["202"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux\";\nimport i18n from \"./i18n\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["203","204"],"/home/pratik/Documents/mega-soft/src/reportWebVitals.ts",[],"/home/pratik/Documents/mega-soft/src/App.tsx",["205","206","207","208","209","210","211"],"import React, { Suspense, useEffect, useState } from \"react\";\nimport {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\nimport Appraisal from \"./Views/Appraisal\";\nimport AddAppraisal from \"./Views/AddAppraisal\";\nimport UpdateAppraisal from \"./Views/UpdateAppraisal\";\nimport AppraisalDetail from \"./Views/AppraisalDetail\";\nimport GoalSetting from \"./Views/GoalSetting\";\nimport EmployeeDetails from \"./Views/EmployeeDetails\";\nimport JobHistory from \"./Views/JobHistory\";\nimport UpdateJobHistory from \"./Views/UpdateJobHistory\";\nimport JobHistoryDetails from \"./Views/JobHistoryDetails\";\nimport AddGoals from \"./Views/AddGoals\";\nimport UpdateGoals from \"./Views/UpdateGoals\";\nimport GoalDetails from \"./Views/GoalDetails\";\nimport Login from \"./Views/Login\";\nimport ChanageColor from \"./components/ChanageColor\";\nimport { initSideBar } from \"./SideNavigation/sideBar\";\nimport { customSideBar } from \"./SideNavigation/custom\";\n\nimport $ from \"jquery\";\n\nimport { validateLogin, login } from \"./redux/actions/auth\";\n\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport roleType from \"./redux/reducers/roleType\";\n\nconst getQueryParms = () => {\n  const url = window.location.href;\n  const str = url;\n  const param = \"access_token=\";\n  let res = str.split(\"&\", 1);\n  let n = res[0].search(param);\n\n  if (n < 0) {\n    return;\n  }\n  n += param.length;\n  let access_token = res[0].substr(n);\n  return access_token;\n};\n\nfunction App(props: any) {\n  // console.log(\"props==>\", props.Auth.isLoggedIn);\n  // const getAccessToken = () => {\n  //   const url = window.location.href;\n  //   console.log(\"url ==\", url);\n  //   const str = url;\n  //   const param = \"access_token=\";\n  //   let res = str.split(\"&\", 1);\n  //   let n = res[0].search(param);\n\n  //   if (n < 0) {\n  //     return;\n  //   }\n  //   n += param.length;\n  //   let access_token = res[0].substr(n);\n  //   console.log(\"access_token on load==>\", access_token);\n  //   sessionStorage.setItem(\"access_token\", access_token);\n  // };\n  // useEffect(() => {\n  //   getAccessToken();\n  // }, []);\n  const hist = useHistory();\n  const dispatch = useDispatch();\n  const auth = useSelector((state: RootState) => state.Auth);\n\n  // const msRoute = () => {\n  //   $(\"a.sidebar-link\").on(\"click\", function () {\n  //     const route = String($(this).attr(\"href\"));\n  //     console.log(\"Menu Option selected ==>\", route);\n  //     alert(route);\n  //     // React routing code:\n\n  //     hist.push(route);\n\n  //     return false;\n  //   });\n  // };\n\n  useEffect(() => {\n    initSideBar();\n    customSideBar();\n\n    dispatch(validateLogin());\n  }, []);\n\n  // sessionStorage.setItem(\"roleType\", \"Employee\");\n  // sessionStorage.setItem(\"menuType\", \"0\");\n\n  useEffect(() => {\n    // const stateValue = getQueryParms(\"state\");\n    // const sessionStateValue = getQueryParms(\"session_state\");\n    const access_token = getQueryParms();\n    // console.log(\"access_token main==>\", access_token);\n    // if (stateValue && sessionStateValue && access_token) {\n    //   dispatch(login(sessionStateValue, stateValue, access_token));\n    // }\n\n    if (access_token) {\n      dispatch(login(access_token));\n    }\n  }, []);\n\n  if (auth.isLoading) {\n    return null;\n  }\n\n  return (\n    <Suspense fallback={null}>\n      <BrowserRouter>\n        {auth.isLoggedIn == true ? (\n          <Switch>\n            <div className=\"page-wrapper\">\n              <Navigation />\n              {/* <Route exact path=\"/\" component={Login} /> */}\n              <Route exact path=\"/home\" component={Appraisal} />\n              <Route exact path=\"/addApprisal\" component={AddAppraisal} />\n              {/* <Route exact path=\"/appraisal/add\" component={Form} /> */}\n              <Route\n                exact\n                path=\"/appraisal/update/:appraisalId\"\n                component={UpdateAppraisal}\n              />\n              <Route\n                exact\n                path=\"/appraisal/view/:appraisalId\"\n                component={AppraisalDetail}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting\"\n                component={GoalSetting}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/:employeeId/:appraisalId\"\n                component={EmployeeDetails}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/addjobhistory/:employeeId/:appraisalId\"\n                component={JobHistory}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/jobhistory/updateJobHistory/:name\"\n                component={UpdateJobHistory}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/:name\"\n                component={JobHistoryDetails}\n              />\n\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/addgoal/:employeeId/:appraisalId\"\n                component={AddGoals}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/goals/updategoal/:name\"\n                component={UpdateGoals}\n              />\n              <Route\n                exact\n                path=\"/appraisal/goalsetting/view/goal/goaldetail/:name\"\n                component={GoalDetails}\n              />\n              <Route exact path=\"/home/changecolor\" component={ChanageColor} />\n              <Route path=\"/*\" render={() => <Redirect to=\"/home\" />} />\n              <Route\n                path=\"/appraisal/goalsetting*\"\n                render={() => <Redirect to=\"/appraisal/goalsetting\" />}\n              />\n            </div>\n          </Switch>\n        ) : (\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/*\" render={() => <Redirect to=\"/\" />} />\n          </Switch>\n        )}\n      </BrowserRouter>\n    </Suspense>\n  );\n}\n\nexport default App;\n","/home/pratik/Documents/mega-soft/src/redux/index.tsx",[],"/home/pratik/Documents/mega-soft/src/Navigation.tsx",["212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"import * as React from \"react\";\nimport {\n  Nav,\n  INavLink,\n  INavStyles,\n  INavLinkGroup,\n} from \"office-ui-fabric-react/lib/Nav\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { useHistory, matchPath } from \"react-router-dom\";\n\nimport hrms_logo from \"./assets/img/hrms_logo.gif\";\nimport logo_nuage from \"./assets/img/logo_nuage.png\";\nimport {\n  fetchNavigationBar,\n  sideNavigationData,\n} from \"./redux/actions/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./redux/reducers\";\nimport SideNavigation from \"./SideNavigation\";\nimport MainHeader from \"./SideNavigation/MainHeader\";\n\ninitializeIcons();\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Appraisal\",\n        url: \"\",\n        key: \"key01\",\n        // icon: \"UpgradeAnalysis\",\n        links: [\n          {\n            name: \"Setup\",\n            url: \"/\",\n            icon: \"Settings\",\n            key: \"key02\",\n          },\n          // {\n          //   name: \"Ratings\",\n          //   url: \"/apprisal/rating\",\n          //   icon: \"6PointStar\",\n          //   key: \"key03\",\n          // },\n          // {\n          //   name: \"Periods\",\n          //   url: \"/apprisal/periods\",\n          //   icon: \"Timer\",\n          //   key: \"key04\",\n          // },\n          {\n            name: \"Goal Setting\",\n            url: \"/appraisal/goalsetting\",\n            icon: \"6PointStar\",\n            key: \"key05\",\n          },\n          // {\n          //   name: \"Self Assessment\",\n          //   url: \"\",\n          //   icon: \"6PointStar\",\n          //   key: \"key06\",\n          // },\n          // {\n          //   name: \"Development Plan\",\n          //   url: \"/apprisal/developmentPlan\",\n          //   icon: \"TestPlan\",\n          //   key: \"key07\",\n          // },\n          // {\n          //   name: \"Release Appraisal\",\n          //   url: \"/apprisal/releaseApprisal\",\n          //   icon: \"ReleaseGate\",\n          //   key: \"key08\",\n          // },\n          // {\n          //   name: \"Market Bench Marketing\",\n          //   url: \"/apprisal/marketBenchMarketing\",\n          //   icon: \"Market\",\n          //   key: \"key09\",\n          // },\n        ],\n        isExpanded: true,\n      },\n      {\n        name: \"Manage\",\n        url: \"\",\n        key: \"key10\",\n        // icon:'MedicationAdmin',\n        links: [\n          {\n            name: \"Team Goal Setting\",\n            url: \"/manage/teamGoalSetting\",\n            icon: \"Settings\",\n            key: \"key11\",\n          },\n          {\n            name: \"Team assess\",\n            url: \"/manage/teamAssess\",\n            icon: \"AssessmentGroup\",\n            key: \"key12\",\n          },\n        ],\n        isExpanded: false,\n      },\n      {\n        name: \"Confirmation\",\n        url: \"\",\n        key: \"key13\",\n        expandAriaLabel: \"Expand Admin section\",\n        collapseAriaLabel: \"Collapse admin section\",\n        links: [\n          {\n            name: \"Confirmation Status\",\n            url: \"/confirmation/status\",\n            icon: \"SplitObject\",\n            key: \"key14\",\n          },\n          {\n            name: \"Release\",\n            url: \"/confirmation/release\",\n            key: \"key15\",\n            icon: \"ReleaseGate\",\n          },\n          {\n            name: \"Approval\",\n            url: \"/confirmation/approval\",\n            key: \"key16\",\n            icon: \"DocumentApproval\",\n          },\n          {\n            name: \"Letter\",\n            url: \"/confirmation/letter\",\n            key: \"key17\",\n            icon: \"DietPlanNotebook\",\n          },\n          {\n            name: \"Probation Letter\",\n            url: \"/confirmation/probationLetter\",\n            key: \"key18\",\n            icon: \"QuickNote\",\n          },\n        ],\n        isExpanded: false,\n      },\n    ],\n  },\n];\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    // overflowY: \"auto\",\n    // width: 208,\n    height: \"100%\",\n  },\n  link: {\n    width: \"200px\",\n  },\n  linkText: {\n    color: \"#FFF\",\n    // fontSize: 12,\n    selectors: {\n      \"&:hover\": {\n        color: \"#FFF\",\n      },\n    },\n  },\n  chevronIcon: {\n    color: \"#FFF\",\n  },\n  compositeLink: {\n    selectors: {\n      \"&.is-selected\": {\n        background: \"#29416f\",\n      },\n      \"&:hover\": {\n        \".ms-Button\": {\n          background: \"#29416f\",\n        },\n        \".ms-Nav-linkText\": {\n          // color: \"#FFF\", // your real styling here\n        },\n        \".ms-Icon\": {\n          color: \"#FFF\",\n        },\n      },\n    },\n  },\n};\n\nfunction Navigation() {\n  // const { children } = props;\n  const dispatch = useDispatch();\n  const [doctype, setDoctype] = useState(\"EmployeeAppraisal\");\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [navData, setNavData]: any = useState();\n  // console.log(\"navData?????=>\", navData);\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n\n  const navigation = useSelector(\n    (state: RootState) => state.navigationData.navigationData\n  );\n  // console.log(\"navigation data=>\", navigation.links);\n\n  // useEffect((): void => {\n  //   dispatch(fetchNavigationBar(doctype, roleType ? roleType : \"Employee\"));\n  // }, [doctype, roleType]);\n\n  // useEffect((): void => {\n  //   sideNavigationData(doctype).then((response) => {\n  //     console.log(\"side nav response\", response.message);\n  //     setNavData(response.message);\n  //   });\n  // }, [doctype]);\n\n  let history = useHistory();\n  const [selectedNavKey, setSelectedNavKey] = React.useState(\"\");\n  const onLinkClick = (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => {\n    setSelectedNavKey(item?.key || \"\");\n  };\n  React.useEffect(() => {\n    navLinkGroups[0].links.map((item) => {\n      if (item.links) {\n        item.links.map((subItem) => {\n          if (\n            matchPath(history.location.pathname, {\n              path: subItem.url,\n              exact: true,\n            })\n          ) {\n            setSelectedNavKey(subItem?.key || \"\");\n            return;\n          }\n        });\n      } else {\n        if (\n          matchPath(history.location.pathname, {\n            path: item.url,\n            exact: true,\n          })\n        ) {\n          setSelectedNavKey(item?.key || \"\");\n          return;\n        }\n      }\n    });\n  }, [history.location.pathname]);\n  return (\n    <div id=\"main-wrapper\">\n      {/* <MainHeader /> */}\n      <div\n        className={\n          selectMenu === false\n            ? `sidebar left-sidebar`\n            : `sidebar left-sidebar-collapsed`\n        }\n      >\n        {/* <div className=\"main-logo\">\n          <img src={logo_nuage} />\n        </div> */}\n        <div className=\"footer-logo\">\n          <img src={hrms_logo} />\n        </div>\n        {/* <Nav\n          onLinkClick={onLinkClick}\n          selectedKey={selectedNavKey}\n          ariaLabel=\"Nav basic example\"\n          styles={navStyles}\n          groups={navigation.links}\n        /> */}\n        <SideNavigation />\n        {/* <div dangerouslySetInnerHTML={{ __html: navData }} /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;\n","/home/pratik/Documents/mega-soft/src/SideNavigation/sideBar.tsx",["233","234","235","236","237"],"/*\nTemplate Name: Admin Template\nAuthor: Wrappixel\n\nFile: js\n*/\n// ==============================================================\n// Auto select left navbar\n// ==============================================================\nimport $ from \"jquery\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\n\nexport const initSideBar = function () {\n  (\"use strict\");\n  var url = window.location + \"\";\n  var path = url.replace(\n    window.location.protocol + \"//\" + window.location.host + \"/\",\n    \"\"\n  );\n  var element = $(\"ul#sidebarnav a\").filter(function () {\n    // return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;\n    return true;\n  });\n  element.parentsUntil(\".sidebar-nav\").each(function (index) {\n    if ($(this).is(\"li\") && $(this).children(\"a\").length !== 0) {\n      $(this).children(\"a\").addClass(\"active\");\n      $(this).parent(\"ul#sidebarnav\").length === 0\n        ? $(this).addClass(\"active\")\n        : $(this).addClass(\"selected\");\n    } else if (!$(this).is(\"ul\") && $(this).children(\"a\").length === 0) {\n      $(this).addClass(\"selected\");\n    } else if ($(this).is(\"ul\")) {\n      $(this).addClass(\"in\");\n    }\n  });\n\n  element.addClass(\"active\");\n  $(\"#sidebarnav a\").on(\"click\", function (e) {\n    // console.log(\"side nav clicked==>\");\n\n    if (!$(this).hasClass(\"active\")) {\n      // hide any open menus and remove all other classes\n      $(\"ul\", $(this).parents(\"ul:first\")).removeClass(\"in\");\n      $(\"a\", $(this).parents(\"ul:first\")).removeClass(\"active\");\n\n      // open our new menu and add the open class\n      $(this).next(\"ul\").addClass(\"in\");\n      $(this).addClass(\"active\");\n    } else if ($(this).hasClass(\"active\")) {\n      $(this).removeClass(\"active\");\n      $(this).parents(\"ul:first\").removeClass(\"active\");\n      $(this).next(\"ul\").removeClass(\"in\");\n    }\n  });\n  $(\"#sidebarnav >li >a.has-arrow\").on(\"click\", function (e) {\n    e.preventDefault();\n  });\n\n  // JQuery function\n  $(\".nav_employee\").show();\n  $(\".nav_manager\").hide();\n  $(\".nav_hr_contact\").hide();\n\n  $(\"#nav_employee\").click(function () {\n    $(\".nav_employee\").show();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").hide();\n\n    sessionStorage.setItem(\"roleType\", \"Employee\");\n\n    // $(\"#nav_employee\").addClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n  });\n\n  $(\"#nav_manager\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").show();\n    $(\".nav_hr_contact\").hide();\n    // $(\"#nav_manager\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_hr\").removeClass(\"active\");\n\n    sessionStorage.setItem(\"roleType\", \"Manager\");\n  });\n\n  $(\"#nav_hr_contact\").click(function () {\n    $(\".nav_employee\").hide();\n    $(\".nav_manager\").hide();\n    $(\".nav_hr_contact\").show();\n    // $(\"#nav_hr\").addClass(\"active\");\n    // $(\"#nav_employee\").removeClass(\"active\");\n    // $(\"#nav_manager\").removeClass(\"active\");\n\n    sessionStorage.setItem(\"roleType\", \"HR Contact\");\n  });\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/custom.tsx",["238","239"],"import $ from \"jquery\";\n\nexport const customSideBar = function () {\n  (\"use strict\");\n  // console.log(\"inside customside bar==>\");\n\n  $(\".preloader\").fadeOut();\n  // ==============================================================\n  // Theme options\n  // ==============================================================\n  // ==============================================================\n  // sidebar-hover\n  // ==============================================================\n\n  $(\".left-sidebar\").hover(\n    function () {\n      $(\".navbar-header\").addClass(\"expand-logo\");\n    },\n    function () {\n      $(\".navbar-header\").removeClass(\"expand-logo\");\n    }\n  );\n  // this is for close icon when navigation open in mobile view\n  $(\".nav-toggler\").on(\"click\", function () {\n    $(\"#main-wrapper\").toggleClass(\"show-sidebar\");\n    $(\".nav-toggler i\").toggleClass(\"ti-menu\");\n  });\n  $(\".nav-lock\").on(\"click\", function () {\n    $(\"body\").toggleClass(\"lock-nav\");\n    $(\".nav-lock i\").toggleClass(\"mdi-toggle-switch-off\");\n    $(\"body, .page-wrapper\").trigger(\"resize\");\n  });\n  $(\".search-box a, .search-box .app-search .srh-btn\").on(\"click\", function () {\n    $(\".app-search\").toggle(200);\n    $(\".app-search input\").focus();\n  });\n\n  // ==============================================================\n  // Right sidebar options\n  // ==============================================================\n  // console.log(\"custom side bar2==>\");\n  $(function () {\n    $(\".service-panel-toggle\").on(\"click\", function () {\n      $(\".customizer\").toggleClass(\"show-service-panel\");\n    });\n    $(\".page-wrapper\").on(\"click\", function () {\n      $(\".customizer\").removeClass(\"show-service-panel\");\n    });\n  });\n  // ==============================================================\n  // This is for the floating labels\n  // ==============================================================\n  //   $(\".floating-labels .form-control\")\n  //     .on(\"focus blur\", function (e) {\n  //       $(this)\n  //         .parents(\".form-group\")\n  //         .toggleClass(\"focused\", e.type === \"focus\" || this.value.length > 0);\n  //     })\n  //     .trigger(\"blur\");\n\n  // ==============================================================\n  //tooltip\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"tooltip\"]').tooltip();\n  //   });\n  // ==============================================================\n  //Popover\n  // ==============================================================\n  //   $(function () {\n  //     $('[data-toggle=\"popover\"]').popover();\n  //   });\n\n  // ==============================================================\n  // Perfact scrollbar\n  // ==============================================================\n  //   $(\".message-center, .customizer-body, .scrollable\").perfectScrollbar({\n  //     wheelPropagation: !0,\n  //   });\n\n  /*var ps = new PerfectScrollbar('.message-body');\n      var ps = new PerfectScrollbar('.notifications');\n      var ps = new PerfectScrollbar('.scroll-sidebar');\n      var ps = new PerfectScrollbar('.customizer-body');*/\n\n  // ==============================================================\n  // Resize all elements\n  // ==============================================================\n  $(\"body, .page-wrapper\").trigger(\"resize\");\n  $(\".page-wrapper\").show();\n  // ==============================================================\n  // To do list\n  // ==============================================================\n  $(\".list-task li label\").click(function () {\n    $(this).toggleClass(\"task-done\");\n  });\n\n  //****************************\n  /* This is for the mini-sidebar if width is less then 1170*/\n  //****************************\n  // console.log(\"custom side bar3==>\");\n  var setsidebartype = function () {\n    // var width = (window.innerWidth > 0) ? window.innerWidth : this.screen.width;\n    // if (width < 1170) {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    // } else {\n    //     $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    // }\n  };\n  // $(window).ready(setsidebartype);\n  // $(window).on(\"resize\", setsidebartype);\n  //****************************\n  /* This is for sidebartoggler*/\n  //****************************\n  // var i = 0;\n  $(\".sidebartoggler\").on(\"click\", function () {\n    // console.log(\"Sidebar toggle inner function ==>\", i++);\n    $(\"#main-wrapper\").toggleClass(\"mini-sidebar\");\n    if ($(\"#main-wrapper\").hasClass(\"mini-sidebar\")) {\n      $(\".sidebartoggler\").prop(\"checked\", !0);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"mini-sidebar\");\n    } else {\n      $(\".sidebartoggler\").prop(\"checked\", !1);\n      $(\"#main-wrapper\").attr(\"data-sidebartype\", \"full\");\n    }\n  });\n\n  // Use react routes instead of href from the menu\n  // $(\"a.sidebar-link\").on(\"click\", function () {\n  //   const route = $(this).attr(\"href\");\n  //   // console.log(\"Menu Option selected ==>\", route);\n\n  //   // React routing code:\n\n  //   return false;\n  // });\n};\n","/home/pratik/Documents/mega-soft/src/Views/AppraisalDetail/index.tsx",["240","241","242","243","244","245","246","247","248","249","250","251","252"],"/home/pratik/Documents/mega-soft/src/Views/JobHistory/index.tsx",["253","254","255","256","257","258","259","260","261"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction JobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [appraisalId] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      setEmployeeDetails(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleAddJobHistory = () => {\n    if (jobHistoryData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryData.place === \"\") {\n      setErrMsgPlace(\"Place of posting is required\");\n    }\n    if (jobHistoryData.position === \"\") {\n      setErrMsgPosition(\"Position held is required\");\n    }\n    if (jobHistoryData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const addQuery = {\n      appraisal_id: appraisalId,\n      employee_id: filtersById,\n      key_responsibilities: jobHistoryData.responsibilities,\n      place_of_posting: jobHistoryData.place,\n      position_held: jobHistoryData.position,\n      qualifications: jobHistoryData.qualifications,\n      from_date: moment(fromDate).format(\"YYYY-MM-DD\"),\n      to_date: moment(toDate).format(\"YYYY-MM-DD\"),\n    };\n    add_JobHistory(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"jobHistory-details card\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryData.position}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryData.place}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeFromDate}\n              value={fromDate}\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              onSelectDate={onchangeToDate}\n              value={toDate}\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryData.responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateJobHistory/index.tsx",["262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\n\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\ninterface ParamTypes {\n  name: string;\n}\n\nfunction UpdateJobHistory(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [jobHistoryUpdateData, setJobHistoryUpdateData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"name\", \"=\", filtersById]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryUpdateData({\n      ...jobHistoryUpdateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const jobHistoryClicked = () => {\n    history.goBack();\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", as: \"h4\", onClick: jobHistoryClicked },\n    { text: \"Update Job History\", key: \"d5\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgResponsibility, setErrMsgResponsibility] = useState(\"\");\n  const [errMsgPlace, setErrMsgPlace] = useState(\"\");\n  const [errMsgPosition, setErrMsgPosition] = useState(\"\");\n  const [errMsgQualifications, setErrMsgQualifications] = useState(\"\");\n\n  const handleUpdateJobHistory = () => {\n    if (jobHistoryUpdateData.responsibilities === \"\") {\n      setErrMsgResponsibility(\"Key Responsibilities is required\");\n    }\n    if (jobHistoryUpdateData.place === \"\") {\n      setErrMsgPlace(\"Place of Posting is required\");\n    }\n    if (jobHistoryUpdateData.position === \"\") {\n      setErrMsgPosition(\"Position Held is required\");\n    }\n    if (jobHistoryUpdateData.qualifications === \"\") {\n      setErrMsgQualifications(\"Qualifications is required\");\n    }\n    const updateQuery = {\n      ...jobHistoryUpdateData,\n      from_date: moment(jobHistoryUpdateData.from_date).format(\"YYYY-MM-DD\"),\n      to_date: moment(jobHistoryUpdateData.to_date).format(\"YYYY-MM-DD\"),\n    };\n    update_JobHistory(updateQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card jobHistory-details\">\n          <TextField\n            required\n            errorMessage={errMsgPosition}\n            label=\"Position Held\"\n            value={jobHistoryUpdateData.position_held}\n            placeholder=\"Enter your job position\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"position_held\"\n            onChange={onChangeInput}\n          />\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgPlace}\n              label=\"Place of Posting\"\n              value={jobHistoryUpdateData.place_of_posting}\n              placeholder=\"Enter your place of posting\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"place_of_posting\"\n              onChange={onChangeInput}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"From Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.from_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  from_date: date,\n                })\n              }\n              styles={datePickerStyle}\n              // textField={{ errorMessage: \"Form date is required\" }}\n            />\n            <DatePicker\n              isRequired={true}\n              label=\"To Date\"\n              placeholder=\"Select a date\"\n              className={`${controlClass.control} flexGrow w33`}\n              value={new Date(jobHistoryUpdateData.to_date)}\n              onSelectDate={(date) =>\n                setJobHistoryUpdateData({\n                  ...jobHistoryUpdateData,\n                  to_date: date,\n                })\n              }\n              // textField={{ errorMessage = { errMsgPlace } }}\n              styles={datePickerStyle}\n            />\n          </div>\n\n          <TextField\n            required\n            errorMessage={errMsgResponsibility}\n            label=\"Key Responsibilities\"\n            value={jobHistoryUpdateData.key_responsibilities}\n            placeholder=\"Describe your key responsibilities\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"key_responsibilities\"\n            onChange={onChangeInput}\n          />\n          <TextField\n            required\n            errorMessage={errMsgQualifications}\n            label=\"Qualifications\"\n            value={jobHistoryUpdateData.qualifications}\n            placeholder=\"Qualifications\"\n            styles={textfelidStyle}\n            className=\"flexGrow w100\"\n            name=\"qualifications\"\n            onChange={onChangeInput}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Job History updated successfully.{\" \"}\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <MainHeader>\n        <div onClick={handlemenuClick}>\n          <MenuIcon style={{ color: \"#FFF\" }} />\n        </div>\n      </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateJobHistory);\n","/home/pratik/Documents/mega-soft/src/Views/JobHistoryDetails/index.tsx",["279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n  fetchJobHistoryByName,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nfunction JobHistoryDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n  const [jobHistoryData, setJobHistoryData] = useState({\n    position: \"\",\n    place: \"\",\n    responsibilities: \"\",\n    qualifications: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchJobHistoryByName(roleType, JSON.stringify(filters)).then(\n      (response) => {\n        setEmployeeDetails(response.data[0]);\n      }\n    );\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setJobHistoryData({\n      ...jobHistoryData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Job History\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const fromDateFormat = moment(employeeDetails.from_date).format(\"DD-MM-YYYY\");\n  const toDateFormat = moment(employeeDetails.to_date).format(\"DD-MM-YYYY\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>Position Held</span> : {employeeDetails.position_held}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Place of Posting</span> : {employeeDetails.place_of_posting}\n            </div>\n            <div className=\"col-md-4\">\n              <span>From Date</span> : {fromDateFormat}\n            </div>\n            <div className=\"col-md-8\">\n              <span>To Date</span> : {toDateFormat}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Key Responsibilities</span> :{\" \"}\n              {employeeDetails.key_responsibilities}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Qualifications</span> : {employeeDetails.qualifications}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(JobHistoryDetails);\n","/home/pratik/Documents/mega-soft/src/Views/AddGoals/index.tsx",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  add_JobHistory,\n  fetchJobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  DatePicker,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport moment from \"moment\";\nimport { add_goals, fetchGoalData } from \"../../redux/actions/goal\";\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction AddGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [goalInputData, setGoalInputData] = useState({\n    goal: \"\",\n    goal_type: \"\",\n    kra: \"\",\n    measure: \"\",\n    order_no: \"\",\n    parent_goal_id: \"\",\n    stretch: \"\",\n    target: \"\",\n    threshold: \"\",\n    weightage: \"\",\n  });\n  const [toDate, setToDate] = useState<Date | undefined>();\n  const [fromDate, setFromDate] = useState<Date | undefined>();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalInputData({\n      ...goalInputData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onchangeToDate = (date: Date | null | undefined): void => {\n    setToDate(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const onchangeFromDate = (date: Date | null | undefined): void => {\n    setFromDate(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Add Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleAddJobHistory = () => {\n    if (goalInputData.order_no === \"\") {\n      setErrMsgOrder(\"Order number is required\");\n    }\n    if (goalInputData.kra === \"\") {\n      setErrMsgKra(\"KRA is required\");\n    }\n    if (goalInputData.goal === \"\") {\n      setErrMsgGoal(\"Goal is required\");\n    }\n    if (goalInputData.measure === \"\") {\n      setErrMsgMeasure(\"Measure is required\");\n    }\n    if (goalInputData.weightage === \"\") {\n      setErrMsgWeightage(\"Weightage is required\");\n    }\n    if (goalType.text === \"\") {\n      setErrMsgGoalType(\"Select goal type\");\n    }\n    const addQuery = {\n      appraisal_id: params.appraisalId,\n      employee_id: params.employeeId,\n      goal_type: goalType.text,\n      goal: goalInputData.goal,\n      kra: goalInputData.kra,\n      order_no: goalInputData.order_no,\n      measure: goalInputData.measure,\n      parent_goal_id: goalInputData.parent_goal_id,\n      stretch: goalInputData.stretch,\n      target: goalInputData.target,\n      threshold: goalInputData.threshold,\n      weightage: goalInputData.weightage,\n    };\n    add_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              disabled={true}\n              label=\"ID\"\n              // value={goalData.name}\n              placeholder=\"New\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={goalInputData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              onChange={onChangeGoalType}\n              options={goalOptions}\n              // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={goalType.text === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={goalInputData.parent_goal_id}\n              placeholder=\"Enter parent goal ID \"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={goalInputData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={goalInputData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={goalInputData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={goalInputData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={goalInputData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={goalInputData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={goalInputData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Add\"\n                allowDisabledFocus\n                onClick={handleAddJobHistory}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal added successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <MainHeader>\n        <div onClick={handlemenuClick}>\n          <MenuIcon style={{ color: \"#FFF\" }} />\n        </div>\n      </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(AddGoals);\n","/home/pratik/Documents/mega-soft/src/Views/Login/index.tsx",["322","323","324","325","326","327","328","329"],"import {\n  ITextFieldStyles,\n  PrimaryButton,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/actions/auth\";\nimport logo_ms from \"../../assets/img/logo_ms.png\";\nimport banner_main from \"../../assets/img/megasoft_hrms.jpg\";\nimport \"./style.css\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      width: \"300px\",\n    },\n  };\n\n  // const handleLogin = () => {\n  //   login().then((response) => {\n  //     if (response.message == true) {\n  //       dispatch(auth('uayuyauyuyauyuay', {}));\n  //     }\n  //   });\n  // };\n\n  // const handleLogin = () => {\n  //    window.open( 'https://id.nuagebiz.tech/auth/realms/megasoft/protocol/openid-connect/auth?redirect_uri=http%3A%2F%2Flocalhost%3A3000&state=eyJzaXRlIjogImh0dHA6Ly81Mi4xNDYuMC4xNTQ6ODAwMSIsICJ0b2tlbiI6ICIzNWQxYTc3MDk4MGNiODY3Yzg2ZjM3ZTllNDlkYWM3YTc2MTM4Y2FhYzM4YTI2OTc3MTQzNDhjYiIsICJyZWRpcmVjdF90byI6IG51bGx9&scope=openid&response_type=code&client_id=ms-hrms')}\n  // };\n\n  return (\n    <div className=\"login-section\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <div className=\"login-banner-image\">\n            <div className=\"login-banner-image-overlay\">\n              <div className=\"overlay-text-alignment\">\n                <div className=\"login-banner-text\">\n                  <h2>Making</h2>\n                  <p>\n                    Organizations Run Effectively By Providing Innovative HRMS\n                    Solutions Globally\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"text-right pt-3 pr-4\">\n            <img src={logo_ms} className=\"ms-logo-login\" />\n          </div>\n          <div className=\"login-form\">\n            <div className=\"login-form-center\">\n              <div\n                style={{\n                  marginTop: \"3rem\",\n                  justifyContent: \"center\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                <PrimaryButton\n                  text=\"Proceed with Megasoft Login\"\n                  style={{ marginTop: \"20px\" }}\n                  allowDisabledFocus\n                  onClick={() => {\n                    window.open(\n                      \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\n                      \"_self\"\n                    );\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <div\n        style={{\n          display: \"flex\",\n          padding: \"10px\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <img src={logo_ms} className=\"ms-logo\" />\n      </div>\n      <div\n        style={{\n          marginTop: \"10rem\",\n          justifyContent: \"center\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <PrimaryButton\n          text=\"Login\"\n          style={{ marginTop: \"20px\" }}\n          allowDisabledFocus\n          onClick={() => {\n            window.open(\n              \"http://52.146.0.154/api/method/frappe.integrations.oauth2.authorize?client_id=3b9ea85aeb&state=12345&response_type=token&scope=all&redirect_uri=http://localhost:3000/home\",\n              \"_self\"\n            );\n          }}\n        />\n      </div> */}\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(Login);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateGoals/index.tsx",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport {\n  fetchGoalData,\n  fetchGoalDataName,\n  update_goals,\n} from \"../../redux/actions/goal\";\n\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction UpdateGoals(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n  const [limitPageLength] = useState(5);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [filtersByName] = useState(params.name);\n\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const [goalData, setGoalData]: any = useState({});\n  const [updateGoalData, setUpdateGoalData]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      console.log(\"response of Goal===>\", response.data);\n      setUpdateGoalData(response.data[0]);\n    });\n  }, []);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   width: \"250px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateGoalData({\n      ...updateGoalData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Update Goals\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const [goalType, setGoalType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const onChangeGoalType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setGoalType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const handleUpdateGoal = () => {\n    // if (goalInputData.order_no === \"\") {\n    //   setErrMsgOrder(\"Order number is required\");\n    // }\n    // if (goalInputData.kra === \"\") {\n    //   setErrMsgKra(\"KRA is required\");\n    // }\n    // if (goalInputData.goal === \"\") {\n    //   setErrMsgGoal(\"Goal is required\");\n    // }\n    // if (goalInputData.measure === \"\") {\n    //   setErrMsgMeasure(\"Measure is required\");\n    // }\n    // if (goalInputData.weightage === \"\") {\n    //   setErrMsgWeightage(\"Weightage is required\");\n    // }\n    // if (goalType.text === \"\") {\n    //   setErrMsgGoalType(\"Select goal type\");\n    // }\n    const addQuery = {\n      ...updateGoalData,\n    };\n    update_goals(addQuery).then((response: any) => {\n      if (response.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div className=\"card\">\n          <div className=\"goal-details\">\n            <TextField\n              readOnly={true}\n              label=\"ID\"\n              value={params.name}\n              placeholder=\"Enter your job position\"\n              styles={textfelidStyle}\n              className=\"flexGrowTextInput\"\n              name=\"position\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgOrder}\n              label=\"Order Number\"\n              value={updateGoalData.order_no}\n              placeholder=\"Enter order number\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"order_no\"\n              onChange={onChangeInput}\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgGoalType}\n              label=\"Goal Type\"\n              placeholder=\"Select goal type\"\n              className=\"flexGrow w25\"\n              selectedKey={\n                goalOptions.find(\n                  (item) => item.text === updateGoalData.goal_type\n                )?.key\n              }\n              onChange={(ev, item) =>\n                setUpdateGoalData({\n                  ...updateGoalData,\n                  goal_type: item?.text,\n                })\n              }\n              options={goalOptions}\n              // styles={dropdownStyles}\n            />\n            <TextField\n              disabled={updateGoalData.goal_type === \"Goal\" ? true : false}\n              label=\"Parent Goal\"\n              value={updateGoalData.parent_goal_id}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w25\"\n              name=\"parent_goal_id\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\"></div>\n          <div>\n            <TextField\n              required\n              errorMessage={errMsgKra}\n              label=\"KRA\"\n              value={updateGoalData.kra}\n              placeholder=\"Enter KRA\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"kra\"\n              onChange={onChangeInput}\n            />\n            <div className=\"goal-details\"></div>\n            <TextField\n              required\n              errorMessage={errMsgGoal}\n              label=\"Goal\"\n              value={updateGoalData.goal}\n              placeholder=\"Enter Goal\"\n              styles={textfelidStyle}\n              className=\"flexGrow w100\"\n              name=\"goal\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              required\n              errorMessage={errMsgMeasure}\n              label=\"Measure\"\n              value={updateGoalData.measure}\n              placeholder=\"Enter Measure\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"measure\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              required\n              errorMessage={errMsgWeightage}\n              label=\"Weightage\"\n              value={updateGoalData.weightage}\n              placeholder=\"Enter Weightage\"\n              styles={textfelidStyle}\n              className=\"flexGrow w50\"\n              name=\"weightage\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <TextField\n              label=\"Target\"\n              value={updateGoalData.target}\n              placeholder=\"Enter Target\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"target\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Threshold\"\n              value={updateGoalData.threshold}\n              placeholder=\"Enter Threshold\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"threshold\"\n              onChange={onChangeInput}\n            />\n            <TextField\n              label=\"Stretch\"\n              value={updateGoalData.stretch}\n              placeholder=\"Enter Stretch\"\n              styles={textfelidStyle}\n              className=\"flexGrow w33\"\n              name=\"stretch\"\n              onChange={onChangeInput}\n            />\n          </div>\n\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateGoal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={successModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setSuccessModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Goal updated successfully.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"OK\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title failed\"}\n            isOpen={failedModal}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Error</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content\">\n              Somthing went wrong. Please try again.\n            </div>\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <PrimaryButton\n                text=\"Go Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  setFailedModal(false);\n                }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(UpdateGoals);\n","/home/pratik/Documents/mega-soft/src/Views/GoalDetails/index.tsx",["354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388"],"import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { RootState } from \"../../redux/reducers\";\nimport {\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStyles,\n  IDropdownOption,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport { fetchGoalData, fetchGoalDataName } from \"../../redux/actions/goal\";\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\ninterface ParamTypes {\n  employeeId: string;\n  name: string;\n}\n\nconst goalOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Goal\" },\n  { key: \"key2\", text: \"Sub-Goal\" },\n];\n\nfunction GoalDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByName] = useState(params.name);\n  const [limitPageLength] = useState(5);\n  //   console.log(params.name);\n  const [limit_start] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n\n  const [goalDetails, setGoalDetails]: any = useState({});\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersByName) {\n      filters.push([\"name\", \"=\", filtersByName]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response.data);\n      setGoalDetails(response.data[0]);\n    });\n  }, []);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setGoalDetails({\n      ...goalDetails,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const history = useHistory();\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Goals Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n\n  const [errMsgOrder, setErrMsgOrder] = useState(\"\");\n  const [errMsgGoal, setErrMsgGoal] = useState(\"\");\n  const [errMsgGoalType, setErrMsgGoalType] = useState(\"\");\n  const [errMsgMeasure, setErrMsgMeasure] = useState(\"\");\n  const [errMsgWeightage, setErrMsgWeightage] = useState(\"\");\n  const [errMsgKra, setErrMsgKra] = useState(\"\");\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistoryForm = () => {\n    return (\n      <div className=\"card\">\n        <div className=\"emp-details-section\">\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              <span>ID</span> : {params.name}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Order Number</span> : {goalDetails.order_no}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal Type</span> : {goalDetails.goal_type}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Parent Goal</span> : {goalDetails.parent_goal_id}\n            </div>\n            <div className=\"col-md-4\">\n              <span>KRA</span> : {goalDetails.kra}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Goal</span> : {goalDetails.goal}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Measure</span> : {goalDetails.measure}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Weightage</span> : {goalDetails.weightage}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Target</span> : {goalDetails.target}\n            </div>\n            <div className=\"col-md-4\">\n              <span>Threshold</span> : {goalDetails.threshold}\n            </div>\n            <div className=\"col-md-8\">\n              <span>Stretch</span> :{\" \"}\n              {/* {goalDetails.stretch == \"\" ? \"N/A\" : goalDetails.stretch} */}\n              {goalDetails.stretch}\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Back\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n      </div>\n    );\n  };\n\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderJobHistoryForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(GoalDetails);\n","/home/pratik/Documents/mega-soft/src/Views/UpdateAppraisal/index.tsx",["389","390","391","392","393","394","395","396","397","398","399","400"],"import React, { useEffect, useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { useParams } from \"react-router-dom\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\n\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { edit_appraisal } from \"../../redux/actions/apprisal\";\nimport { fetchAppraisalDataById } from \"../../redux/actions/apprisal\";\nimport { RootState } from \"../../redux/reducers\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\ninterface ParamTypes {\n  appraisalId: string;\n}\n\nfunction UpdateAppraisal(props: any) {\n  const params = useParams<ParamTypes>();\n  const stackTokens = { childrenGap: 10 };\n\n  const [limitStart] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [orderBy] = useState(\"asc\");\n  const [orderByField] = useState(\"id\");\n  const [filtersById] = useState(params.appraisalId);\n\n  const [updateData, setUpdateData]: any = useState({});\n\n  useEffect(() => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"id\", \"like\", filtersById]);\n    }\n    fetchAppraisalDataById(\n      limitStart,\n      limitPageLength,\n      `${orderByField} ${orderBy}`,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setUpdateData(response.data[0]);\n    });\n  }, []);\n\n  // console.log(\"upadetdata==>\", updateData);\n\n  // const appraisalList = useSelector((state: RootState) => state.appraisal.appraisalList) || [];\n  //   const updateData = appraisalList.find(item => item.id === params.appraisalId);\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      \".ms-TextField-wrapper\": {\n        borderRadius: \"10px\",\n      },\n\n      \".ms-TextField-fieldGroup fieldGroup-195\": {\n        borderRadius: \"10px\",\n      },\n    },\n  };\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek, setFirstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    // root: {\n    //   marginRight: \"10px\",\n    // },\n    icon: {\n      color: \"rgb(111 144 220)\",\n    },\n  };\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setUpdateData({\n      ...updateData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: \"Update Appraisal\", key: \"d3\", as: \"h4\" },\n  ];\n\n  // const [dateReview, setDateReview] = useState<Date | null | undefined>(\n  //   new Date(updateData.review_from)\n  // );\n  // const [dateAppraisal, setdDateAppraisal] = useState<Date | null | undefined>(\n  //   new Date(updateData.appraisal_to)\n  // );\n\n  // const reviewFromDate = (date: Date | null | undefined): void => {\n  //   const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setDateReview(reviewFrequencyDate);\n  // };\n  // const appraisalToDate = (date: Date | null | undefined): void => {\n  //   const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  //   // console.log(\"date==>\", reviewFrequencyDate);\n  //   setdDateAppraisal(appraisalDate);\n  // };\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  const userName = props.userData.UserData[0].name;\n  const userId = props.userData.UserData[0].id;\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // const rolesOption: IDropdownOption[] = [\n  //   { key: \"key1\", text: \"HR\" },\n  //   { key: \"key2\", text: \"Manager\" },\n  //   { key: \"key3\", text: \"Employee\" },\n  // ];\n\n  // const [reviewSearch, setReviewSearch] = useState<IDropdownOption>({\n  //   key: \"\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setReviewSearch(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleUpdateApprisal = () => {\n    const updateQuery = {\n      ...updateData,\n      review_from: moment(updateData.review_from).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(updateData.appraisal_to).format(\"YYYY-MM-DD\"),\n      description: \"22\",\n      route: \"appraisal/BB00002\",\n    };\n    // console.log(\"updateQuery=>\", updateQuery);\n    edit_appraisal(updateQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n      } else {\n        setFailedModal(true);\n      }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderUpdateForm = () => {\n    return (\n      <React.Fragment>\n        <div className=\"form-container card\">\n          <div className=\"goal-details\">\n            <TextField\n              disabled\n              placeholder=\"ID\"\n              value={updateData.id}\n              name=\"id\"\n              label=\"Id\"\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder=\"Description\"\n              label=\"Description\"\n              value={updateData.appraisal_description}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"goal-details\">\n            <DatePicker\n              isRequired\n              label=\"Review From\"\n              // value={updateData.review_from}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={new Date(updateData.review_from)}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, review_from: date })\n              }\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired\n              label=\"Appraisal To\"\n              value={new Date(updateData.appraisal_to)}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              onSelectDate={(date) =>\n                setUpdateData({ ...updateData, appraisal_to: date })\n              }\n              styles={datePickerStyle}\n              placeholder=\"Select a date\"\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              selectedKey={\n                reviewFrequencyOptions.find(\n                  (item) => item.text === updateData.review_frequency\n                )?.key\n              }\n              label=\"Review Frequency\"\n              placeholder=\"Select\"\n              className=\"flexGrow w33\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, review_frequency: item?.text })\n              }\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n          <div className=\"goal-details\">\n            <Dropdown\n              required\n              selectedKey={\n                typeOptions.find((item) => item.text === updateData.type)?.key\n              }\n              label=\"Type\"\n              placeholder=\"Select Type\"\n              className=\"flexGrow w33\"\n              options={typeOptions}\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, type: item?.text })\n              }\n              // styles={typeDropdownStyles}\n            />\n            <Dropdown\n              required\n              selectedKey={\n                formateTypeOptions.find(\n                  (item) => item.text === updateData.format_type\n                )?.key\n              }\n              label=\"Format Type\"\n              className=\"flexGrow w33\"\n              onChange={(ev, item) =>\n                setUpdateData({ ...updateData, format_type: item?.text })\n              }\n              placeholder=\"Select Format Type\"\n              options={formateTypeOptions}\n              // styles={typeDropdownStyles}\n            />\n            <TextField\n              required\n              label=\"Owner\"\n              placeholder=\"Owner\"\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\n              onGetErrorMessage={(v) =>\n                new RegExp(\n                  \"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"\n                ).test(v)\n                  ? \"\"\n                  : \"Please give currect pattern\"\n              }\n              value={updateData.appraisal_owner}\n              styles={textfelidStyle}\n              name=\"appraisal_owner\"\n              className=\"flexGrow w33\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>KRA Settings Tabs: </Label>\n              <Checkbox\n                label={\"Job History\"}\n                title={\"Competencies\"}\n                checked={updateData.kra_settings_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.kra_settings_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Training/ Development Plan\"}\n                title={\"Development Plans\"}\n                checked={updateData.kra_settings_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.kra_settings_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"kra_settings_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={updateData.assessment_tab_goals}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_goals\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={updateData.assessment_tab_competencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_competencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={updateData.assessment_tab_development_plan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_development_plan\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={updateData.assessment_tab_summary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessment_tab_summary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Success</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  Appraisal updated Successfully.\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"OK\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header\">\n                  <div className=\"modal-title\">Error</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">\n                  Somthing went wrong. Please try again.\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text=\"Go Back\"\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Update\"\n                allowDisabledFocus\n                onClick={handleUpdateApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderUpdateForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(UpdateAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/AddAppraisal/index.tsx",["401","402","403","404","405","406","407","408","409","410","411","412","413","414"],"import React, { useState } from \"react\";\nimport {\n  TextField,\n  ITextFieldStyles,\n} from \"office-ui-fabric-react/lib/TextField\";\nimport { Stack } from \"office-ui-fabric-react/lib/Stack\";\nimport \"./style.css\";\nimport {\n  DatePicker,\n  DayOfWeek,\n  Dropdown,\n  getColorFromString,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColor,\n  IColorPickerProps,\n  IconButton,\n  IDatePickerStrings,\n  IDatePickerStyles,\n  IDropdownOption,\n  IDropdownStyles,\n  IIconProps,\n  IModalStyles,\n  Label,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  ColorPicker,\n  Separator,\n} from \"office-ui-fabric-react\";\nimport { Checkbox } from \"office-ui-fabric-react/lib/Checkbox\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport { Text } from \"office-ui-fabric-react/lib/Text\";\nimport Header from \"../../Header\";\nimport moment from \"moment\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { add_apprisal } from \"../../redux/actions/apprisal\";\nimport { RootState } from \"../../redux/reducers\";\nimport MainHeader from \"../../SideNavigation/MainHeader\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\n\nconst formateTypeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Sales Employees\" },\n  { key: \"key3\", text: \"Non Sales Employees\" },\n  // { key: \"key4\", text: \"Management\" },\n];\n\nconst reviewFrequencyOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Monthly\" },\n  { key: \"key2\", text: \"Yearly\" },\n];\n\nconst typeOptions: IDropdownOption[] = [\n  { key: \"key1\", text: \"Annual Appraisal\" },\n  { key: \"key2\", text: \"Confirmation Appraisal\" },\n];\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n  dropdown: {\n    width: 170,\n    border: \"0px\",\n  },\n};\n\n// interface ParamTypes {\n//   id: string\n// }\n\nconst white = getColorFromString(\"#006994\")!;\n\nfunction AddAppraisal(props: any) {\n  const { t, i18n } = useTranslation();\n  // const params = useParams<ParamTypes>();\n  // console.log(\"id => \", params.id);\n  const stackTokens = { childrenGap: 10 };\n  const [color, setColor] = useState(white);\n\n  // const updateColor = React.useCallback(\n  //   (ev: any, colorObj: IColor) => setColor(colorObj),\n  //   []\n  // );\n\n  const updateColor = (ev: any, colorObj: IColor) => {\n    setColor(colorObj);\n  };\n\n  const [showPreview, setShowPreview] = useState(true);\n  const [alphaType, setAlphaType] = React.useState<\n    IColorPickerProps[\"alphaType\"]\n  >(\"alpha\");\n\n  const DayPickerStrings: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n  const DayPickerStringsAppraisal: IDatePickerStrings = {\n    months: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ],\n\n    shortMonths: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ],\n\n    days: [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ],\n\n    shortDays: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n\n    goToToday: \"Go to today\",\n    prevMonthAriaLabel: \"Go to previous month\",\n    nextMonthAriaLabel: \"Go to next month\",\n    prevYearAriaLabel: \"Go to previous year\",\n    nextYearAriaLabel: \"Go to next year\",\n    closeButtonAriaLabel: \"Close date picker\",\n    monthPickerHeaderAriaLabel: \"{0}, select to change the year\",\n    yearPickerHeaderAriaLabel: \"{0}, select to change the month\",\n  };\n\n  const controlClass = mergeStyleSets({\n    control: {\n      // margin: \"0 0 15px 0\",\n      // maxWidth: \"150px\",\n    },\n  });\n\n  const [firstDayOfWeek] = React.useState(DayOfWeek.Sunday);\n  const [firstDayOfWeekAppraisal] = React.useState(DayOfWeek.Sunday);\n\n  const datePickerStyle: Partial<IDatePickerStyles> = {\n    icon: {\n      color: \"#344f84\",\n    },\n  };\n\n  const [claimsData, setClaimsData] = useState({\n    id: \"\",\n    description: \"\",\n    owner: \"\",\n    kraSettingGoal: false,\n    kraSettingCompetencies: false,\n    kraSettingDevelopmentPlan: false,\n    kraSettingSummary: false,\n    assessmentGoal: false,\n    assessmentCompetencies: false,\n    assessmentDevelopmentPlan: false,\n    assessmentSummary: false,\n  });\n\n  const [selectedType, setSelectedType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [reviewFrequency, setReviewFrequency] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  const [formateType, setFormateType] = useState<IDropdownOption>({\n    key: \"\",\n    text: \"\",\n  });\n\n  function onChangeCheckbox(\n    ev?: React.FormEvent<HTMLElement>,\n    isChecked?: boolean\n  ) {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: isChecked || false,\n    });\n  }\n\n  const onChangeInput = (\n    ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    const target = ev?.target as HTMLInputElement;\n    setClaimsData({\n      ...claimsData,\n      [target.name]: target.value || \"\",\n    });\n  };\n\n  const onChangeType = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setSelectedType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n  // console.log(\"type==>\", selectedType.text )\n\n  const onChangeReviewFrequency = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setReviewFrequency(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const onChangeFormateType = (\n    event?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    setFormateType(\n      item || {\n        key: \"\",\n        text: \"\",\n      }\n    );\n  };\n\n  const _onBreadcrumbItemClicked = () => {\n    history.push(\"/home\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: i18n.t(\"breadcrumb_itmes.performance\"), key: \"d1\" },\n    {\n      text: i18n.t(\"breadcrumb_itmes.appraisal\"),\n      key: \"d2\",\n      isCurrentItem: true,\n      as: \"h4\",\n      onClick: _onBreadcrumbItemClicked,\n    },\n    { text: i18n.t(\"breadcrumb_itmes.add_appraisal\"), key: \"d3\", as: \"h4\" },\n  ];\n\n  const [dateReview, setDateReview] = useState<Date | undefined>();\n  const [dateAppraisal, setdDateAppraisal] = useState<Date | undefined>();\n\n  const reviewFromDate = (date: Date | null | undefined): void => {\n    setDateReview(date || undefined);\n    // const reviewFrequencyDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n  const appraisalToDate = (date: Date | null | undefined): void => {\n    setdDateAppraisal(date || undefined);\n    // const appraisalDate: any = moment(date).format(\"YYYY-MM-DD\");\n  };\n\n  const history = useHistory();\n\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      marginTop: \"-1rem\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  // // const rolesOption: IDropdownOption[] = [\n  // //   { key: \"employee\", text: \"Employee\" },\n  // //   { key: \"manager\", text: \"Manager\" },\n  // //   { key: \"hrContent\", text: \"HR content\" },\n  // // ];\n\n  // const [roles, setRoles] = useState<IDropdownOption>({\n  //   key: \"employee\",\n  //   text: \"\",\n  // });\n\n  // const handleRoles = (\n  //   ev?: React.FormEvent<HTMLDivElement>,\n  //   item?: IDropdownOption\n  // ): void => {\n  //   setRoles(\n  //     item || {\n  //       key: \"\",\n  //       text: \"\",\n  //     }\n  //   );\n  // };\n  // const dispatch = useDispatch();\n\n  const [errMsg, setErrMsg] = useState(\"\");\n  const [errMsgDescription, setErrMsgDescription] = useState(\"\");\n  const [errMsgOwner, setErrMsgOwner] = useState(\"\");\n  const [errMsgFormatType, setErrMsgFormatType] = useState(\"\");\n  const [errMsgType, setErrMsgType] = useState(\"\");\n  const [errMsgReviewFrequency, setErrMsgReviewFrequency] = useState(\"\");\n  const [errMsgReviewDate, setErrMsgReviewDate] = useState(\"\");\n  const [errMsgAppraisalDate, setErrMsgAppraisalDate] = useState(\"\");\n  const [successModal, setSuccessModal] = useState(false);\n  const [failedModal, setFailedModal] = useState(false);\n\n  const theme = getTheme();\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const handleAddApprisal = () => {\n    let pattern = /^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$/;\n    if (claimsData.id === \"\" || claimsData.id.length > 5) {\n      setErrMsg(i18n.t(\"errorMsg.please_enter_id\"));\n    }\n    if (claimsData.description === \"\") {\n      setErrMsgDescription(i18n.t(\"errorMsg.please_enter_description\"));\n    }\n    if (!pattern.test(claimsData.owner)) {\n      setErrMsgOwner(\"Please give currect pattern \");\n    }\n    if (claimsData.owner === \"\") {\n      setErrMsgOwner(i18n.t(\"errorMsg.please_enter_owner_name\"));\n    }\n    if (formateType.text === \"\") {\n      setErrMsgFormatType(\"Select format Type\");\n    }\n    if (reviewFrequency.text === \"\") {\n      setErrMsgReviewFrequency(\"Select review Frequency\");\n    }\n    if (selectedType.text === \"\") {\n      setErrMsgType(\"Select type\");\n    }\n    if (dateReview === null) {\n      setErrMsgReviewDate(\"Select review date\");\n    }\n    const addQuery = {\n      id: claimsData.id,\n      appraisal_description: claimsData.description,\n      description: \"22\",\n      format_type: formateType.text,\n      review_frequency: reviewFrequency.text,\n      type: selectedType.text,\n      kra_settings_tab_goals: claimsData.kraSettingGoal,\n      kra_settings_tab_competencies: claimsData.kraSettingCompetencies,\n      kra_settings_tab_development_plan: claimsData.kraSettingDevelopmentPlan,\n      kra_settings_tab_summary: claimsData.kraSettingSummary,\n      assessment_tab_goals: claimsData.assessmentGoal,\n      assessment_tab_competencies: claimsData.assessmentCompetencies,\n      assessment_tab_development_plan: claimsData.assessmentCompetencies,\n      assessment_tab_summary: claimsData.assessmentSummary,\n      route: \"appraisal/BB00002\",\n      review_from: moment(dateReview).format(\"YYYY-MM-DD\"),\n      appraisal_to: moment(dateAppraisal).format(\"YYYY-MM-DD\"),\n      appraisal_owner: claimsData.owner,\n    };\n    // console.log(\"addQueary=>\", addQuery);\n    add_apprisal(addQuery).then((response) => {\n      // console.log(\"response=>\", response.data);\n      if (response?.status === 200) {\n        setSuccessModal(true);\n        // history.push(\"/home\");\n      } else {\n        // console.log(\"failed==>\", failedModal);\n        setFailedModal(true);\n      }\n\n      // else {\n      //   console.log(\"then error msg btnClick==>\", response);\n      // }\n    });\n    // .catch((err) => {\n    //   console.log(\"Error in btnClick=>\", err);\n    // });\n  };\n\n  const renderForm = () => {\n    return (\n      <React.Fragment>\n        {/* <ColorPicker\n          color={color}\n          onChange={updateColor}\n          alphaType={alphaType}\n          showPreview={showPreview}\n          // styles={colorPickerStyles}\n        /> */}\n        <div className=\"form-container card\">\n          <div className=\"goal-details\">\n            <TextField\n              required\n              placeholder={t(\"placeholder.id\")}\n              value={claimsData.id}\n              errorMessage={errMsg}\n              name=\"id\"\n              label={t(\"form.ID\")}\n              onChange={onChangeInput}\n              className=\"flexGrowTextInput\"\n            />\n            <TextField\n              required\n              placeholder={t(\"placeholder.description\")}\n              label={t(\"form.Description\")}\n              value={claimsData.description}\n              errorMessage={errMsgDescription}\n              // styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"description\"\n              onChange={onChangeInput}\n            />\n          </div>\n          {/* <div className=\"input-form\"></div> */}\n          <div className=\"goal-details\">\n            <DatePicker\n              isRequired={true}\n              label={t(\"form.Review_From\")}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeek}\n              strings={DayPickerStrings}\n              value={dateReview}\n              onSelectDate={reviewFromDate}\n              placeholder={t(\"placeholder.select_a_date\")}\n              ariaLabel=\"Select a date\"\n              styles={datePickerStyle}\n            />\n            <DatePicker\n              isRequired={true}\n              label={t(\"form.Appraisal_To\")}\n              className={`${controlClass.control} flexGrow w33`}\n              firstDayOfWeek={firstDayOfWeekAppraisal}\n              strings={DayPickerStringsAppraisal}\n              onSelectDate={appraisalToDate}\n              styles={datePickerStyle}\n              value={dateAppraisal}\n              placeholder={t(\"placeholder.select_a_date\")}\n              ariaLabel=\"Select a date\"\n            />\n            <Dropdown\n              required\n              errorMessage={errMsgReviewFrequency}\n              label={t(\"form.Review_Frequency\")}\n              placeholder={t(\"placeholder.select\")}\n              className=\"flexGrow w33\"\n              onChange={onChangeReviewFrequency}\n              options={reviewFrequencyOptions}\n              // styles={dropdownStyles}\n            />\n          </div>\n\n          <div className=\"goal-details\">\n            <Dropdown\n              required\n              label={t(\"form.Type\")}\n              errorMessage={errMsgType}\n              placeholder={t(\"placeholder.select_type\")}\n              className=\"flexGrow w33\"\n              options={typeOptions}\n              onChange={onChangeType}\n              // styles={typeDropdownStyles}\n            />\n            <Dropdown\n              required\n              label={t(\"form.Format_Type\")}\n              errorMessage={errMsgFormatType}\n              className=\"flexGrow w33\"\n              onChange={onChangeFormateType}\n              placeholder={t(\"placeholder.select_format_type\")}\n              options={formateTypeOptions}\n              // styles={typeDropdownStyles}\n            />\n            <TextField\n              required\n              label={t(\"form.Owner\")}\n              placeholder={t(\"placeholder.owner\")}\n              pattern={\"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"}\n              // onGetErrorMessage={(v) =>\n              //   new RegExp(\n              //     \"^[a-zA-Z]+[.,-]{0,1}[ ]{0,1}[a-zA-Z]+[.]{0,1}$\"\n              //   ).test(v)\n              //     ? \"\"\n              //     : \"Please give currect pattern\"\n              // }\n              value={claimsData.owner}\n              className=\"flexGrow w33\"\n              // styles={textfelidStyle}\n              errorMessage={errMsgOwner}\n              name=\"owner\"\n              onChange={onChangeInput}\n            />\n          </div>\n          <Separator />\n          <div className=\"rowCheckBox\">\n            <div>\n              <Label>{t(\"form.KRA_Settings_Tabs\")} </Label>\n              <Checkbox\n                label={t(\"job_history\")}\n                title={\"Competencies\"}\n                checked={claimsData.kraSettingCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={t(\"goals\")}\n                title={\"Goals\"}\n                checked={claimsData.kraSettingGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={t(\"training_and_development\")}\n                title={\"Development Plans\"}\n                checked={claimsData.kraSettingDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingDevelopmentPlan\"\n                onChange={onChangeCheckbox}\n              />\n              {/* <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.kraSettingSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"kraSettingSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              {/* <Label>Assessment Tabs: </Label>\n              <Checkbox\n                label={\"Goals\"}\n                title={\"Goals\"}\n                checked={claimsData.assessmentGoal}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentGoal\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Competencies\"}\n                title={\"Competencies\"}\n                checked={claimsData.assessmentCompetencies}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentCompetencies\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Development Plans\"}\n                title={\"Development Plans\"}\n                checked={claimsData.assessmentDevelopmentPlan}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              />\n              <Checkbox\n                label={\"Summary\"}\n                title={\"Summary\"}\n                checked={claimsData.assessmentSummary}\n                className=\"flexGrowCheckBox\"\n                name=\"assessmentSummary\"\n                onChange={onChangeCheckbox}\n              /> */}\n            </div>\n            <div>\n              <Modal\n                titleAriaId={\"Title\"}\n                isOpen={successModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">\n                    {t(\"success_popup.heading\")}\n                  </div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setSuccessModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content-success\">\n                  {t(\"success_popup.appraisal_success\")}\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text={t(\"buttons.ok\")}\n                    allowDisabledFocus\n                    onClick={() => {\n                      history.push(\"/home\");\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n              <Modal\n                titleAriaId={\"Title failed\"}\n                isOpen={failedModal}\n                isBlocking={false}\n                styles={modalStyle}\n                // containerClassName={contentStyles.container}\n              >\n                <div className=\"modal-header-local\">\n                  <div className=\"modal-title\">{t(\"delete_popup.heading\")}</div>\n                  <IconButton\n                    styles={iconButtonStyles}\n                    iconProps={cancelIcon}\n                    ariaLabel=\"Close popup modal\"\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                  />\n                </div>\n                <div className=\"modal-content\">{t(\"delete_popup.message\")}</div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <PrimaryButton\n                    text={t(\"buttons.go_back\")}\n                    allowDisabledFocus\n                    onClick={() => {\n                      setFailedModal(false);\n                    }}\n                    disabled={false}\n                    checked={false}\n                  />\n                </div>\n              </Modal>\n            </div>\n          </div>\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\", marginBottom: \"1rem\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text={t(\"buttons.add\")}\n                allowDisabledFocus\n                style={{ backgroundColor: color.str }}\n                onClick={handleAddApprisal}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text={t(\"buttons.cancel\")}\n                allowDisabledFocus\n                disabled={false}\n                onClick={() => {\n                  history.push(\"/home\");\n                }}\n                checked={false}\n              />\n            </div>\n          </Stack>\n        </div>\n      </React.Fragment>\n    );\n  };\n  const dispatch = useDispatch()\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n      {/* <WelcomeHeader>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              padding: \"10px\",\n            }}\n          >\n            <Text style={{ marginRight: \"10px\" }}>\n              Welcome {userName} ({userId})\n            </Text>\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              Logged In:\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {dateNow} {timeNow}\n            </Text>\n          </div>\n        </div>\n      </WelcomeHeader> */}\n      <MainHeader>\n        <div onClick={handlemenuClick}>\n          <MenuIcon style={{ color: \"#FFF\" }} />\n        </div>\n      </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">{renderForm()}</div>\n        {/* <div className=\"right-container\"></div> */}\n      </div>\n    </div>\n  );\n}\nexport default connect((state) => ({\n  ...state,\n}))(AddAppraisal);\n","/home/pratik/Documents/mega-soft/src/Views/Appraisal/index.tsx",["415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436"],"/home/pratik/Documents/mega-soft/src/Views/GoalSetting/index.tsx",["437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452"],"/home/pratik/Documents/mega-soft/src/Views/EmployeeDetails/index.tsx",["453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477"],"import {\n  DetailsList,\n  getTheme,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IColumn,\n  IconButton,\n  IDetailsListStyles,\n  IIconProps,\n  IModalStyles,\n  ITextFieldStyles,\n  Label,\n  Link,\n  Modal,\n  Pivot,\n  PivotItem,\n  PivotLinkFormat,\n  PrimaryButton,\n  Spinner,\n  SpinnerSize,\n  Stack,\n  Text,\n  TextField,\n} from \"office-ui-fabric-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport WelcomeHeader from \"../../components/WelcomeHeader\";\nimport Header from \"../../Header\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  fetchJobHistory,\n  jobHistoryData,\n  update_JobHistory,\n} from \"../../redux/actions/jobHistory\";\nimport { RootState } from \"../../redux/reducers\";\nimport { fetchEmployeeDataByID } from \"../../redux/actions/employeeData\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport { Pagination } from \"@uifabric/experiments\";\nimport jobHistory from \"../../redux/reducers/jobHistory\";\nimport JobHistoryDetails from \"../JobHistoryDetails\";\nimport { setCollapedMenu } from \"../../redux/actions/roleType\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {\n  fetchGoalData,\n  fetchGoalDataName,\n  update_goals,\n} from \"../../redux/actions/goal\";\nimport {\n  fetchDevelopmentPlan,\n  handleDevelopmentDataChange,\n} from \"../../redux/actions/developmentPlan\";\nimport \"./style.css\";\nimport moment from \"moment\";\nimport MainHeader from \"../../SideNavigation/MainHeader\";\n\ninterface ParamTypes {\n  employeeId: string;\n  appraisalId: string;\n}\n\nfunction EmployeeDetails(props: any) {\n  const params = useParams<ParamTypes>();\n  const [doctype] = useState(\"EmployeeAppraisal\");\n  const [limit_start] = useState(0);\n  const [limit] = useState(10);\n  const [filtersById] = useState(params.employeeId);\n  const [filtersByApprisal] = useState(params.appraisalId);\n  const roleType = useSelector((state: RootState) => state.roleType.roleType);\n\n  const [employeeData, setEmployeeData]: any = useState({});\n  const history = useHistory();\n  const [employeeDetails, setEmployeeDetails]: any = useState({});\n\n  const [currentPage, setCurentPage] = useState(0);\n  const [currentPageGoal, setCurentPageGoal] = useState(0);\n  const [limitPageLength] = useState(5);\n  const [limitPageLengthGoal] = useState(5);\n  const [limitStart, setLimitSTart] = useState(0);\n  const [limitStartGoal, setLimitSTartGoal] = useState(0);\n\n  const [limitStartDevelopment, setLimitStartDevelopment] = useState(0);\n  const [orderByDevelopment, setOrderByDevelopment] = useState(\"serial_no asc\");\n  const [count, setCount] = useState(0);\n\n  const [totalCount, setTotalCount] = useState(0);\n  const [orderBy, setOrderBy] = useState(\"order_no asc\");\n  const [orderByJobHistory] = useState(\"from_date asc\");\n  const [limitPageLengthDevelopment] = useState(5);\n  const [developmentData, setDevelopmentData]: any = useState([]);\n\n  const [goalData, setGoalData]: any = useState({});\n  const [goalCount, setGoalCount] = useState(0);\n  const [employeeCount, setEmployeeCount] = useState(0);\n  const [goalTotalCount, setGoalTotalCount] = useState(0);\n  const [developmentCount, setDevelopmentCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch();\n  const jobHistoryDataLocal = useSelector(\n    (state: RootState) => state.jobHistory\n  );\n  const { jobHistory, isLoading, total_count }: any = jobHistoryDataLocal;\n  // console.log(\"jobHistoryDataLocal=>\", jobHistory);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    if (filtersByApprisal) {\n      filters.push([\"appraisal_id\", \"=\", filtersByApprisal]);\n    }\n    fetchEmployeeDataByID(\n      doctype,\n      limit_start,\n      limit,\n      roleType,\n      JSON.stringify(filters)\n    ).then((response) => {\n      setLoading(true);\n      // console.log(\"employee response ==>\", response);\n      setEmployeeCount(response.count);\n      setEmployeeData(response.data[0]);\n      setLoading(false);\n    });\n  }, [doctype, limit_start, limit, roleType]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    dispatch(\n      jobHistoryData(\n        roleType,\n        JSON.stringify(filters),\n        limitStart,\n        limitPageLength,\n        orderByJobHistory\n      )\n    );\n  }, [roleType, limitStart, limitPageLength, orderByJobHistory]);\n  const newJobHistoryData = jobHistory.map((element: any) => {\n    const a = {\n      ...element,\n      from_date: moment(element.from_date).format(\"DD-MM-YYYY\"),\n      to_date: moment(element.to_date).format(\"DD-MM-YYYY\"),\n    };\n    return a;\n  });\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchGoalData(\n      limitStartGoal,\n      limitPageLengthGoal,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Goal===>\", response);\n      setGoalData(response.data);\n      setGoalCount(response.count);\n      setGoalTotalCount(response.total_count);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n\n  useEffect((): void => {\n    const filters = [];\n    if (filtersById) {\n      filters.push([\"employee_id\", \"=\", filtersById]);\n    }\n    fetchDevelopmentPlan(\n      limitStartDevelopment,\n      limitPageLengthDevelopment,\n      orderByDevelopment,\n      JSON.stringify(filters)\n    ).then((response) => {\n      // console.log(\"response of Development===>\", response.data);\n      setDevelopmentCount(response.count);\n      let res = response.data;\n      for (let i = response.count; i < 5; i++) {\n        let emptyPlan = {\n          name: \"\",\n          appraisal_id: params.appraisalId,\n          employee_id: params.employeeId,\n          serial_no: i + 1,\n          development_plan: \"\",\n          reviewer_remarks: \"\",\n          frozen: 0,\n        };\n        res.push(emptyPlan);\n      }\n      setDevelopmentData(res);\n    });\n  }, [limitStartGoal, limitPageLengthGoal]);\n  const onBreadcrumbAppraisalClicked = () => {\n    history.push(\"/home\");\n  };\n  const onBreadcrumbGoalsettingClicked = () => {\n    history.push(\"/appraisal/goalsetting\");\n  };\n  const itemsWithHeading: IBreadcrumbItem[] = [\n    { text: \"Performance\", key: \"d1\" },\n    {\n      text: \"Appraisal\",\n      key: \"d2\",\n      as: \"h4\",\n      onClick: onBreadcrumbAppraisalClicked,\n    },\n    {\n      text: \"Goal Setting\",\n      key: \"d3\",\n      as: \"h4\",\n      onClick: onBreadcrumbGoalsettingClicked,\n    },\n    { text: \"Employee Details\", key: \"d4\", isCurrentItem: true, as: \"h4\" },\n  ];\n  const breadCrumStyle: Partial<IBreadcrumbStyles> = {\n    root: {\n      margin: \"0px\",\n      padding: \"0px\",\n      marginTop: \"-10px\",\n    },\n    itemLink: {\n      fontSize: \"20px\",\n    },\n  };\n\n  const textfelidStyle: Partial<ITextFieldStyles> = {\n    root: {\n      //   width: \"50px\",\n    },\n  };\n\n  const updateJobhistory = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/updateJobHistory/${item.name}`\n    );\n  };\n\n  const jobHistoryDetails = (item: any) => {\n    history.push(\n      `/appraisal/goalsetting/view/jobhistory/jobHistoryDetail/${item.name}`\n    );\n  };\n\n  const handleDevelopemntChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n              ...item,\n              development_plan: value || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const handleRemarkChange = (\n    index: number | undefined,\n    value: string | undefined\n  ) => {\n    setDevelopmentData(\n      developmentData.map((item: any, i: any) =>\n        index === i\n          ? {\n              ...item,\n              reviewer_remarks: value || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const columnsJobHistory: IColumn[] = [\n    // {\n    //   key: \"02\",\n    //   name: \"Appraisal ID\",\n    //   fieldName: \"appraisal_id\",\n    //   minWidth: 50,\n    //   maxWidth: 90,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    // },\n    // {\n    //   key: \"03\",\n    //   name: \"Employee ID\",\n    //   fieldName: \"employee_id\",\n    //   minWidth: 50,\n    //   maxWidth: 80,\n    //   isRowHeader: true,\n    //   sortDescendingAriaLabel: \"Sorted Z to A\",\n    //   isResizable: false,\n    // },\n    {\n      key: \"06\",\n      name: \"Position Held\",\n      fieldName: \"position_held\",\n      minWidth: 50,\n      maxWidth: 140,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"05\",\n      name: \"Place of Posting\",\n      fieldName: \"place_of_posting\",\n      minWidth: 50,\n      maxWidth: 110,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"From Date\",\n      fieldName: \"from_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"To Date\",\n      fieldName: \"to_date\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"Key Responsibilities\",\n      fieldName: \"key_responsibilities\",\n      minWidth: 60,\n      maxWidth: 350,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 100,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              jobHistoryDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateJobhistory(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons \"\n            onClick={() => {\n              deleteJobHistoryData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [jobHistoryUpdate, setJobHistoryUpdateData]: any = useState({});\n  const [showDeleteSuccessJob, setShowDeleteSuccessJob] = useState(false);\n  const [showDeleteJob, setShowDeleteJob] = useState(false);\n  const [deleteItemJobName, setDeleteItemJobName] = useState(null);\n\n  const deleteJobHistoryData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchJobHistory(roleType, JSON.stringify(filters)).then((response) => {\n      //   console.log(\"update response =>.>>>\", response.data);\n      setJobHistoryUpdateData(response.data[0]);\n    });\n    setShowDeleteJob(true);\n  };\n\n  // console.log(\"deleteItemId=>\", updateData)\n\n  const handleDeleteJobhistory = () => {\n    const deleteQuery = {\n      name: jobHistoryUpdate.name,\n      is_deleted: 1,\n    };\n    update_JobHistory(deleteQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      setShowDeleteJob(false);\n      setShowDeleteSuccessJob(true);\n      setDeleteItemJobName(null);\n      setJobHistoryUpdateData(null);\n    });\n  };\n\n  const columnsTraning: IColumn[] = [\n    // {\n    //   key: \"1\",\n    //   name: \"S.No.\",\n    //   fieldName: \"serial_no\",\n    //   minWidth: 20,\n    //   maxWidth: 40,\n    //   isSortedDescending: false,\n    //   isRowHeader: true,\n    //   isResizable: false,\n    //   // onRender: (item, index) => (index || 0) + 1,\n    // },\n    {\n      key: \"02\",\n      name: \"Development Plan/Training Needs\",\n      fieldName: \"development_plan\",\n      minWidth: 60,\n      maxWidth: 550,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            rows={3}\n            value={item.development_plan}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleDevelopemntChange(index, text)}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n    {\n      key: \"03\",\n      name: \"Remark by Appraiser\",\n      fieldName: \"reviewer_remarks\",\n      minWidth: 80,\n      maxWidth: 350,\n      isRowHeader: true,\n      onRender: (item, index) => (\n        <div>\n          <TextField\n            multiline\n            readOnly={roleType === \"Employee\" ? true : false}\n            rows={3}\n            onChange={(\n              ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n              text?: string\n            ) => handleRemarkChange(index, text)}\n            value={item.reviewer_remarks}\n            resizable={false}\n          />\n        </div>\n      ),\n    },\n  ];\n\n  const columnsGoal: IColumn[] = [\n    {\n      key: \"02\",\n      name: \"S.No.\",\n      fieldName: \"order_no\",\n      minWidth: 20,\n      maxWidth: 50,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"11\",\n      name: \"Goal ID\",\n      fieldName: \"name\",\n      minWidth: 40,\n      maxWidth: 60,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"03\",\n      name: \"KRA\",\n      fieldName: \"kra\",\n      minWidth: 50,\n      maxWidth: 120,\n      isRowHeader: true,\n      sortDescendingAriaLabel: \"Sorted Z to A\",\n      isResizable: false,\n    },\n    {\n      key: \"04\",\n      name: \"\",\n      fieldName: \"goal_type\",\n      minWidth: 10,\n      maxWidth: 30,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n      onRender: (item) => (\n        <div>\n          {item.goal_type == \"Goal\" ? (\n            <div\n              className=\"link-icons\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <ArrowDropDownIcon\n                style={{ color: \"#00597d\", fontSize: \"30px\" }}\n              />\n            </div>\n          ) : (\n            <div\n              className=\"link-icons\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                // console.log(\"item\", item);\n              }}\n            >\n              <RadioButtonUncheckedIcon\n                style={{\n                  color: \"#00597d\",\n                  fontSize: \"10px\",\n                  marginLeft: \"25px\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"05\",\n      name: \"Goal\",\n      fieldName: \"goal\",\n      minWidth: 50,\n      maxWidth: 280,\n      isMultiline: true,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"06\",\n      name: \"Measure\",\n      fieldName: \"measure\",\n      minWidth: 50,\n      maxWidth: 100,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"07\",\n      name: \"Weightage\",\n      fieldName: \"weightage\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"08\",\n      name: \"Target\",\n      fieldName: \"target\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"09\",\n      name: \"Threshold\",\n      fieldName: \"threshold\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"10\",\n      name: \"Stretch\",\n      fieldName: \"stretch\",\n      minWidth: 50,\n      maxWidth: 80,\n      isSortedDescending: false,\n      isRowHeader: true,\n      isResizable: false,\n    },\n    {\n      key: \"01\",\n      name: \"Action\",\n      fieldName: \"action\",\n      minWidth: 80,\n      maxWidth: 80,\n      isRowHeader: true,\n      onRender: (item) => (\n        <div>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              goalDetails(item);\n            }}\n          >\n            <VisibilityIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons mr-3\"\n            onClick={() => {\n              updateGoals(item);\n            }}\n          >\n            <CreateIcon style={{ color: \"#00597d\" }} />\n          </Link>\n          <Link\n            className=\"link-icons\"\n            onClick={() => {\n              deleteGoalData(item);\n            }}\n          >\n            <DeleteIcon style={{ color: \"#f04336\" }} />\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const [deleteItemId, setDeleteItemId] = useState(null);\n  const [updateData, setUpdateData]: any = useState({});\n  const [showDelete, setShowDelete] = useState(false);\n  const [showDeleteSuccess, setShowDeleteSuccess] = useState(false);\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n  const theme = getTheme();\n  const iconButtonStyles = {\n    root: {\n      color: \"#FFF\",\n      marginLeft: \"auto\",\n      marginTop: \"4px\",\n      marginRight: \"2px\",\n    },\n    rootHovered: {\n      color: theme.palette.neutralDark,\n    },\n  };\n  const modalStyle: Partial<IModalStyles> = {\n    root: {},\n    main: {\n      height: \"20%\",\n      width: \"20%\",\n      backgroundColor: \"#FFF\",\n      // padding: \"5px\",\n    },\n  };\n\n  const deleteGoalData = (item: any) => {\n    setDeleteItemId(item.name);\n    // console.log(\"item id\", item.name);\n    const filters = [];\n    if (item.name) {\n      filters.push([\"name\", \"=\", item.name]);\n    }\n    fetchGoalDataName(\n      limit_start,\n      limitPageLength,\n      orderBy,\n      JSON.stringify(filters)\n    ).then((response: any) => {\n      // console.log(response.data);\n      setUpdateData(response.data[0]);\n    });\n    setShowDelete(true);\n  };\n\n  // console.log(\"deleteItemId=>\", updateData)\n\n  const handleDeleteGoal = () => {\n    const deleteQuery = {\n      name: updateData.name,\n      is_deleted: 1,\n    };\n    update_goals(deleteQuery).then((response) => {\n      // console.log(\"response=>\", response);\n      setShowDelete(false);\n      setShowDeleteSuccess(true);\n      setDeleteItemId(null);\n      setUpdateData(null);\n    });\n  };\n\n  const operations = [\n    {\n      sno: \"01\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n    {\n      sno: \"02\",\n      action: \"action1\",\n      employeeID: \"145728\",\n      employeeName: \"PRIYA GUPTA\",\n      managerID: \"124590\",\n      managerName: \"PINKO KUMAR\",\n      status: \"Pending With Employee\",\n      apprisalType: \"Goal Sheet\",\n    },\n  ];\n\n  const [showDevelopment, setShowDevelopment] = useState(false);\n\n  const handleDevelpmentDatachange = () => {\n    // console.log(\"developmentData=> \", developmentData);\n    const devPlan = [...developmentData];\n    // console.log(\"devPlan=>\", devPlan);\n    const changedQuery = {\n      doctype: \"EmployeeDevelopmentPlan\",\n      data: {\n        dev_plans: devPlan,\n      },\n    };\n    handleDevelopmentDataChange(changedQuery).then((response: any) => {\n      // console.log(\"update successfully =>\", response);\n      setShowDevelopment(true);\n    });\n  };\n\n  const updateGoals = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goals/updategoal/${item.name}`);\n  };\n\n  const goalDetails = (item: any) => {\n    history.push(`/appraisal/goalsetting/view/goal/goaldetail/${item.name}`);\n  };\n\n  const listStyle: Partial<IDetailsListStyles> = {\n    headerWrapper: {\n      \".root-106\": {\n        backgroundColor: \"#344f84\",\n      },\n    },\n    root: {\n      marginTop: \"10px\",\n      backgroundColor: \"#344f84\",\n      paddingBottom: \"0px\",\n      \".ms-Viewport\": {\n        minWidth: \"200px\",\n      },\n    },\n    contentWrapper: {\n      \".ms-FocusZone css-61 ms-DetailsHeader root-104\": {\n        paddingTop: \"0px\",\n      },\n    },\n  };\n\n  const renderNoData = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          marginTop: \"20px\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Text\n          style={{\n            color: \"#aaa\",\n            textAlign: \"center\",\n            padding: 50,\n            fontSize: 30,\n          }}\n        >\n          No Data Found\n        </Text>\n      </div>\n    );\n  };\n\n  const stackTokens = { childrenGap: 10 };\n  const renderJobHistory = () => {\n    return (\n      <div>\n        {isLoading ? (\n          <Spinner\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: \"50px\",\n              color: \"#00597d\",\n            }}\n            size={SpinnerSize.large}\n          />\n        ) : jobHistory.length === 0 ? (\n          renderNoData()\n        ) : (\n          <div>\n            <DetailsList\n              styles={listStyle}\n              items={newJobHistoryData}\n              className=\"detail-list\"\n              columns={columnsJobHistory}\n              selectionMode={0}\n            />\n            <div className=\"pagination-style\">\n              <Pagination\n                format=\"buttons\"\n                // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                selectedPageIndex={currentPage}\n                pageCount={Math.ceil(totalCount / limitPageLength)}\n                itemsPerPage={limitPageLength}\n                totalItemCount={totalCount}\n                onPageChange={(page) => {\n                  setLimitSTart(page * limitPageLength);\n                  setCurentPage(page);\n                }}\n              />\n            </div>\n          </div>\n        )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addjobhistory/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteJob}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteJobhistory}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccessJob}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccessJob(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGoals = () => {\n    return (\n      <div className=\"form-conatiner\">\n        {goalCount === 0 ? (\n          renderNoData()\n        ) : (\n          <div>\n            <DetailsList\n              styles={listStyle}\n              items={goalData}\n              className=\"detail-list\"\n              columns={columnsGoal}\n              selectionMode={0}\n            />\n            <div className=\"pagination-style\">\n              <Pagination\n                format=\"buttons\"\n                // nextPageIconProps={{iconName: \"CaretRightSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                // previousPageIconProps={{iconName: \"CaretLeftSolid8\",style:{color:\"red\", fontSize:\"25px\"}}}\n                selectedPageIndex={currentPageGoal}\n                pageCount={Math.ceil(goalTotalCount / limitPageLengthGoal)}\n                itemsPerPage={limitPageLengthGoal}\n                totalItemCount={goalTotalCount}\n                onPageChange={(pageGoal) => {\n                  setLimitSTartGoal(pageGoal * limitPageLengthGoal);\n                  setCurentPageGoal(pageGoal);\n                }}\n              />\n            </div>\n          </div>\n        )}\n        <Stack\n          horizontal\n          tokens={stackTokens}\n          style={{ justifyContent: \"flex-end\" }}\n        >\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Add\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\n                  `/appraisal/goalsetting/view/addgoal/${params.employeeId}/${params.appraisalId}`\n                );\n              }}\n            />\n          </div>\n          <div\n            style={{\n              marginTop: \"15px\",\n            }}\n          >\n            <PrimaryButton\n              text=\"Cancel\"\n              allowDisabledFocus\n              onClick={() => {\n                history.push(\"/appraisal/goalsetting\");\n              }}\n            />\n          </div>\n        </Stack>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDelete}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Delete</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Are you sure you want to delete this item?\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Delete\"\n                allowDisabledFocus\n                onClick={handleDeleteGoal}\n                disabled={false}\n                checked={false}\n              />\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDelete(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDeleteSuccess}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Item successfully Deleted.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDeleteSuccess(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  const renderTrainingDevelopment = () => {\n    return (\n      <div className=\"form-conatiner\">\n        <div>\n          <DetailsList\n            styles={listStyle}\n            items={developmentData}\n            className=\"detail-list\"\n            columns={columnsTraning}\n            selectionMode={0}\n          />\n          <Stack\n            horizontal\n            tokens={stackTokens}\n            style={{ justifyContent: \"flex-end\" }}\n          >\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Save\"\n                allowDisabledFocus\n                onClick={() => {\n                  handleDevelpmentDatachange();\n                }}\n              />\n            </div>\n            <div\n              style={{\n                marginTop: \"15px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Cancel\"\n                allowDisabledFocus\n                onClick={() => {\n                  history.push(\"/appraisal/goalsetting\");\n                }}\n              />\n            </div>\n          </Stack>\n        </div>\n        <div>\n          <Modal\n            titleAriaId={\"Title\"}\n            isOpen={showDevelopment}\n            isBlocking={false}\n            styles={modalStyle}\n            // containerClassName={contentStyles.container}\n          >\n            <div className=\"modal-header\">\n              <div className=\"modal-title\">Success</div>\n              <IconButton\n                styles={iconButtonStyles}\n                iconProps={cancelIcon}\n                ariaLabel=\"Close popup modal\"\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n              />\n            </div>\n            <div className=\"modal-content-success\">\n              Development data saved successfully.\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"10px\",\n              }}\n            >\n              <PrimaryButton\n                text=\"Ok\"\n                allowDisabledFocus\n                onClick={() => {\n                  setShowDevelopment(false);\n                }}\n                style={{ marginLeft: \"10px\" }}\n                disabled={false}\n                checked={false}\n              />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    );\n  };\n\n  // const joiningDate = moment(employeeData.date_of_joining).format(\"DD-MM-YYYY\");\n\n  const renderEmployeeDetails = () => {\n    return (\n      <div>\n        <div className=\"card\">\n          <div className=\"emp-details-section\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <span>Employee Id</span> : {employeeData.employee_id}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Employee Name</span> : {employeeData.employee_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Designation</span> : {employeeData.designation}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Location</span> : {employeeData.location}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Department</span> : {employeeData.department}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Date of Joining</span> :{\" \"}\n                {moment(employeeData.date_of_joining).format(\"DD-MM-YYYY\")}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reporting Officer</span> : {employeeData.manager_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Reviewer</span> : {employeeData.reviewer_name}\n              </div>\n              <div className=\"col-md-4\">\n                <span>Counter signing</span> :{\" \"}\n                {employeeData.counter_signing_name}\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"row-jobHistory d-none\">\n            <TextField\n              readOnly={true}\n              value={employeeData.employee_id}\n              placeholder=\"Employee ID\"\n              label=\"Employee Id\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // value={jobHistory[0].employee_id}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.employee_name}\n              placeholder=\"Employee Name\"\n              label=\"Employee Name\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.designation}\n              placeholder=\"Designation\"\n              label=\"Designation\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n          </div>\n          <div className=\"row-jobHistory d-none\">\n            <TextField\n              readOnly={true}\n              value={employeeData.location}\n              placeholder=\"Location\"\n              label=\"Location\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.department}\n              placeholder=\"Department\"\n              label=\"Department\"\n              name=\"id\"\n              // onChange={onChangeInput}\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.date_of_joining}\n              placeholder=\"Date of Joining\"\n              label=\"Date of Joining\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n            />\n          </div>\n          <div className=\"row-jobHistory d-none\">\n            <TextField\n              readOnly={true}\n              // value={employeeData.date_of_joining}\n              placeholder=\"Reporting Officer\"\n              label=\"Reporting Officer\"\n              styles={textfelidStyle}\n              className=\"flexGrow\"\n              name=\"appraisal_description\"\n              // onChange={onChangeInput}\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.reviewer_name}\n              placeholder=\"Reviewer\"\n              label=\"Reviewer\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n            <TextField\n              readOnly={true}\n              value={employeeData.counter_signing_name}\n              placeholder=\"Counter signing\"\n              label=\"Counter signing\"\n              name=\"id\"\n              styles={textfelidStyle}\n              // onChange={onChangeInput}\n              className=\"flexGrow\"\n            />\n          </div> */}\n        </div>\n        <div\n          style={{ marginTop: \"10px\" }}\n          className=\"card employee-details-tabs\"\n        >\n          <Pivot linkFormat={PivotLinkFormat.tabs}>\n            <PivotItem\n              headerButtonProps={{\n                \"data-order\": 1,\n                \"data-title\": \"My Files Title\",\n              }}\n              headerText=\"Job History\"\n            >\n              {renderJobHistory()}\n            </PivotItem>\n            <PivotItem headerText=\"Goals\">{renderGoals()}</PivotItem>\n            <PivotItem headerText=\"Training/ Development Plan\">\n              {renderTrainingDevelopment()}\n            </PivotItem>\n          </Pivot>\n        </div>\n      </div>\n    );\n  };\n\n  const selectMenu = useSelector((state: RootState) => state.roleType.menuItem);\n  const handlemenuClick = () => {\n    if (selectMenu === false) {\n      dispatch(setCollapedMenu(true));\n    } else {\n      dispatch(setCollapedMenu(false));\n    }\n  };\n\n  return (\n    <div className={selectMenu == false ? `view` : `miniSideBar`}>\n    {/* <WelcomeHeader>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            padding: \"10px\",\n          }}\n        >\n          <Text style={{ marginRight: \"10px\" }}>\n            Welcome {userName} ({userId})\n          </Text>\n          <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n            Logged In:\n          </Text>\n          <Text style={{ marginRight: \"5px\" }}>\n            {dateNow} {timeNow}\n          </Text>\n        </div>\n      </div>\n    </WelcomeHeader> */}\n    <MainHeader>\n      <div onClick={handlemenuClick}>\n        <MenuIcon style={{ color: \"#FFF\" }} />\n      </div>\n    </MainHeader>\n      <Header item={itemsWithHeading} styles={breadCrumStyle} />\n      <div className=\"content\">\n        <div className=\"data-container\">\n          {loading ? (\n            <Spinner\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"80px\",\n                color: \"#00597d\",\n              }}\n              size={SpinnerSize.large}\n            />\n          ) : employeeCount === 0 ? (\n            renderNoData()\n          ) : (\n            renderEmployeeDetails()\n          )}\n        </div>\n        {/* <div className=\"right-container\">\n          <div className=\"stepper\">\n            <ul className=\"progress\">\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Provide your job history</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node green\"></div>\n                <p className=\"green\">\n                  <span>Perform goal setting</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider green\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Update training needs</span>\n                </p>\n              </li>\n              <li>\n                <div className=\"divider grey\"></div>\n              </li>\n              <li>\n                <div className=\"node grey\"></div>\n                <p className=\"grey\">\n                  <span>Create development plan</span>\n                </p>\n              </li>\n            </ul>\n          </div>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(EmployeeDetails);\n","/home/pratik/Documents/mega-soft/src/components/ChanageColor/index.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/index.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/index.tsx",["478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510"],"/home/pratik/Documents/mega-soft/src/Header.tsx",["511","512","513"],"import * as React from \"react\";\nimport {\n  Breadcrumb,\n  IBreadcrumbItem,\n  IBreadcrumbStyles,\n  IDividerAsProps,\n} from \"office-ui-fabric-react/lib/Breadcrumb\";\nimport { IContextualMenuProps } from \"office-ui-fabric-react\";\nimport { TooltipHost } from \"office-ui-fabric-react/lib/Tooltip\";\nimport { Icon } from \"office-ui-fabric-react/lib/Icon\";\nimport \"./Header.css\";\n\nconst menuProps: IContextualMenuProps = {\n  items: [\n    {\n      key: \"action01\",\n      text: \"Action 1\",\n      //   iconProps: { iconName: 'Mail' },\n    },\n    {\n      key: \"action02\",\n      text: \"Action 2\",\n      //   iconProps: { iconName: 'Calendar' },\n    },\n  ],\n};\nfunction _onBreadcrumbItemClicked(\n  ev?: React.MouseEvent<HTMLElement>,\n  item?: IBreadcrumbItem\n): void {\n  console.log(`Breadcrumb item with key \"${item?.key}\" has been clicked.`);\n}\nconst itemsWithHeading: IBreadcrumbItem[] = [\n  {\n    text: \"Performance\",\n    key: \"Files\",\n    onClick: _onBreadcrumbItemClicked,\n    href: \"\",\n  },\n  { text: \"Appraisal\", key: \"d1\", isCurrentItem: true },\n];\nfunction _getCustomOverflowIcon(): JSX.Element {\n  return <Icon iconName={\"ChevronDown\"} />;\n}\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\n  const tooltipText = dividerProps.item ? dividerProps.item.text : \"\";\n  return (\n    <TooltipHost\n      content={`Show ${tooltipText} contents`}\n      calloutProps={{ gapSpace: 0 }}\n    >\n      <span aria-hidden=\"true\" style={{ cursor: \"pointer\", padding: 5 }}>\n        /\n      </span>\n    </TooltipHost>\n  );\n}\n\nconst breadCrumStyle: Partial<IBreadcrumbStyles> = {\n  root: {\n    margin: \"0px\",\n    padding: \"0px\",\n    marginTop: \"-10px\",\n  },\n  itemLink: {\n    fontSize: \"22px\",\n  },\n};\n\nfunction Header(props: { item?: IBreadcrumbItem[]; styles: any }) {\n  // const _alertClicked = () => {\n  //   console.log(\"clicked==>\")\n  // }\n  // const horizontalStackProps: IStackProps = {\n  //     horizontal: true,\n  //     tokens: { childrenGap: 100, },\n  // };\n  // const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false);\n\n  return (\n    <div className=\"header\">\n      <Breadcrumb\n        // items={itemsWithHeading}\n        items={props.item || []}\n        styles={props.styles}\n        maxDisplayedItems={5}\n        ariaLabel=\"With custom rendered divider and overflow icon\"\n        dividerAs={_getCustomDivider}\n        onRenderOverflowIcon={_getCustomOverflowIcon}\n      />\n    </div>\n  );\n}\n\nexport default Header;\n","/home/pratik/Documents/mega-soft/src/redux/actions/goal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/apprisal.tsx",["514"],"import axios from \"axios\";\nimport accessToken from \"../../apiBase.json\";\n\nexport const addApprisal = (item: any) => {\n  return {\n    type: \"ADD_APPRISAL\",\n    payload: item,\n  };\n};\n\nexport const deleteAppraisalByID = (item: any) => {\n  return {\n    type: \"DELETE_APPRAISAL\",\n    payload: item,\n  };\n};\n\nexport const fetchAppraisalData = (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => async (dispatch: any): Promise<any> => {\n  const token = sessionStorage.getItem(\"access_token\");\n  if (token === null) {\n    return false;\n  }\n  const accessToken = \"bearer \" + token;\n  try {\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_START\",\n    });\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    const responseBody = response.data;\n    console.log(\"Appraisal api response =>\", responseBody);\n    dispatch({\n      type: \"FETCH_APPRAISAL_LIST_SUCCESS\",\n      payload: responseBody,\n    });\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const fetchAppraisalDataById = async (\n  limit_start = 0,\n  limit_page_length = 10,\n  order_by = \"id asc\",\n  filters: any\n) => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      params: {\n        limit_start,\n        limit_page_length,\n        order_by,\n        filters,\n        fields: JSON.stringify([\n          \"name\",\n          \"id\",\n          \"appraisal_description\",\n          \"review_from\",\n          \"appraisal_to\",\n          \"review_frequency\",\n          \"type\",\n          \"format_type\",\n          \"format_type\",\n          \"appraisal_owner\",\n          \"kra_settings_tab_goals\",\n          \"kra_settings_tab_competencies\",\n          \"kra_settings_tab_development_plan\",\n          \"kra_settings_tab_summary\",\n          \"assessment_tab_goals\",\n          \"assessment_tab_competencies\",\n          \"assessment_tab_development_plan\",\n          \"assessment_tab_summary\",\n          \"is_deleted\",\n        ]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    const responseBody = await response.data;\n    // console.log(\"api data by id\", responseBody)\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const add_apprisal = async (data: any) => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal`,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n      data: JSON.stringify(data),\n    });\n    return response;\n  } catch (error) {\n    console.log(\"error in catch block=>\", JSON.stringify(error));\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const edit_appraisal = async (data: any) => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data.id}`,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n      data: JSON.stringify(data),\n    });\n    // console.log(\"api response ==>\", response)\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const delete_appraisal = async (data: any) => {\n  try {\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Appraisal/${data}`,\n      method: \"DELETE\",\n      headers: {\n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, DELETE\",\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: \" token 5ccbc7af363c163:b6060f97664d556\",\n      },\n      data: JSON.stringify(data),\n    });\n    console.log(\"delete api response ==>\", response);\n    return await response;\n  } catch (error) {\n    return {\n      ...error,\n    };\n  }\n};\n\nexport const filterByEmployee = async (order_by = \"employee_name asc\") => {\n  try {\n    const token = sessionStorage.getItem(\"access_token\");\n    if (token === null) {\n      return false;\n    }\n    const accessToken = \"bearer \" + token;\n    const response = await axios({\n      url: `http://52.146.0.154/api/resource/Employee`,\n      params: {\n        order_by,\n        fields: JSON.stringify([\"employee_id\", \"employee_name\"]),\n      },\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: accessToken,\n      },\n    });\n    // console.log(\"Api filter by employee==>\", response);\n    const responseBody = response.data;\n    return responseBody;\n  } catch (error) {\n    // console.log(\"error in getting data\", error);\n    return {\n      ...error,\n    };\n  }\n};\n","/home/pratik/Documents/mega-soft/src/redux/actions/developmentPlan.tsx",[],"/home/pratik/Documents/mega-soft/src/SideNavigation/MainHeader.tsx",["515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539"],"import logo_text from \"../../src/assets/img/logo-text.png\";\nimport logo_icon from \"../../src/assets/img/logo-icon.png\";\nimport { initSideBar } from \"./sideBar\";\nimport { customSideBar } from \"./custom\";\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\nimport {\n  Dropdown,\n  IDropdownOption,\n  IDropdownStyles,\n  Link,\n  Text,\n} from \"office-ui-fabric-react\";\nimport { initializeIcons } from \"@uifabric/icons\";\nimport { logout } from \"../redux/actions/auth\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\n\nimport * as Utils from \"../Utils\";\n\nimport logo_ms from \"../assets/img/logo_ms.png\";\nimport logo_nuage from \"../assets/img/logo_nuage.png\";\nimport { useHistory } from \"react-router-dom\";\nimport { RootState } from \"../redux/reducers\";\nimport { setMenuType } from \"../redux/actions/roleType\";\nimport moment from \"moment\";\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { changeLanguge, onChangeLanguage } from \"../redux/actions/application\";\n\nimport i18n from \"../i18n\";\n\nfunction MainHeader(props: { children: any }) {\n  const { children } = props;\n  initializeIcons();\n  const languageOption: IDropdownOption[] = [\n    { key: \"en\", text: \"English\", data: { icon: \"AADLogo\" } },\n    { key: \"fr\", text: \"French\" },\n    // { key: \"hi\", text: \"Hungarian\" },\n  ];\n  // const { t, i18n } = useTranslation();\n  // useEffect(() => {\n  //   customSideBar();\n  //   initSideBar();\n  // }, []);\n\n  const dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: {\n      width: 170,\n      border: \"0px\",\n      // color: \"#FFF\",\n      backgroundColor: \"#FFF\",\n    },\n  };\n\n  const dispatch = useDispatch();\n  const selectedLanguage = useSelector(\n    (state: RootState) => state.application.language\n  );\n\n  const handleLogout = () => {\n    window.open(\"http://52.146.0.154/api/method/logout\", \"_self\");\n    dispatch(logout());\n  };\n\n  const handleCustomSidebar = () => {\n    initSideBar();\n    customSideBar();\n  };\n\n  const history = useHistory();\n\n  const menuType = useSelector((state: RootState) => state.menuType.menuType);\n  const userData = useSelector((state: RootState) => state.userData.UserData);\n\n  // console.log(\"userData\", userData);\n\n  const dateNow = new Date().toLocaleDateString();\n  const timeNow = new Date().toLocaleTimeString();\n  // const userName = props.userData.UserData[0].name;\n  // const userId = props.userData.UserData[0].id;\n\n  const renderMenuLogo = () => {\n    if (menuType == 0) {\n      return (\n        <span className=\"logo-text\">\n          <img src={logo_text} alt=\"homepage\" className=\"light-logo\" />\n        </span>\n      );\n    }\n  };\n\n  const handleLanguage = (\n    ev?: React.FormEvent<HTMLDivElement>,\n    item?: IDropdownOption\n  ): void => {\n    // setLanguage(\n    //   item || {\n    //     key: \"\",\n    //     text: \"\",\n    //   }\n    // );\n    let data: any = item?.key || \"\";\n    dispatch(onChangeLanguage(data));\n    i18n.changeLanguage(data);\n\n    // setTimeout(() => {\n    //   Utils.reloadLocale(oldLanguage, languageSelected);\n    //   // history.goBack();\n    // }, 500);\n  };\n\n  return (\n    <header className=\"topbar\" data-navbarbg=\"skin5\">\n      <nav className=\"navbar top-navbar navbar-expand-md navbar-dark\">\n        {/* <div className=\"navbar-header\" data-logobg=\"skin5\">\n          <a\n            className=\"nav-toggler waves-effect waves-light d-block d-md-none\"\n            href=\"#\"\n          >\n            <i className=\"ti-menu ti-close\"></i>\n          </a>\n          <a\n            className=\"navbar-brand\"\n            href=\"\"\n            onClick={() => {\n              dispatch(setMenuType(\"1\"));\n              history.push(\"/home\");\n            }}\n          >\n            <b className=\"logo-icon p-l-10\">\n              <img src={logo_icon} alt=\"homepage\" className=\"light-logo\" />\n            </b>\n            {renderMenuLogo()}\n          \n          </a>\n          <a\n            className=\"topbartoggler d-block d-md-none waves-effect waves-light\"\n            href=\"\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <i className=\"ti-more\"></i>\n          </a>\n        </div> */}\n        <div\n          className=\"navbar-collapse collapse\"\n          id=\"navbarSupportedContent\"\n          data-navbarbg=\"skin5\"\n        >\n          <ul className=\"navbar-nav float-left mr-auto\">\n            <li className=\"nav-item d-none d-md-block\">\n              <a\n                className=\"nav-link sidebartoggler waves-effect waves-light\"\n                href=\"#\"\n                data-sidebartype=\"mini-sidebar\"\n                // onClick={handleCustomSidebar}\n              >\n                {/* <i className=\"mdi mdi-chevron-left font-24\"></i> */}\n                {children}\n              </a>\n            </li>\n            <div className=\"main-logo\">\n              <img src={logo_nuage} />\n            </div>\n          </ul>\n\n          <div className=\"mx-auto text-white-50\">\n            <Text style={{ marginRight: \"10px\" }}>\n              {i18n.t(\"main_header.welcome\")} {userData[0].name} (\n              {userData[0].id})\n            </Text>\n\n            <Text style={{ marginRight: \"5px\", marginLeft: \"2rem\" }}>\n              {i18n.t(\"main_header.logged_in\")} :\n            </Text>\n            <Text style={{ marginRight: \"5px\" }}>\n              {moment(dateNow).format(\"DD-MM-YYYY\")} {timeNow}\n            </Text>\n          </div>\n          <ul className=\"navbar-nav float-right ml-auto\">\n            <div>\n              <Dropdown\n                options={languageOption}\n                onChange={handleLanguage}\n                placeholder=\"Select language\"\n                selectedKey={\n                  languageOption.find((item) => item.key === selectedLanguage)\n                    ?.key\n                }\n                className=\"rolesDropDown\"\n                styles={dropdownStyles}\n                style={{ marginLeft: \"2rem\", marginTop: \"15px\" }}\n              />\n            </div>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle waves-effect waves-dark\"\n                href=\"\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                {\" \"}\n                <i className=\"mdi mdi-bell font-24\"></i>\n              </a>\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  Action\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Another action\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  Something else here\n                </a>\n              </div>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle waves-effect waves-dark\"\n                href=\"\"\n                id=\"2\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                {\" \"}\n                <i className=\"font-24 mdi mdi-comment-processing\"></i>\n              </a>\n              <div\n                className=\"dropdown-menu dropdown-menu-right mailbox animated bounceInDown\"\n                aria-labelledby=\"2\"\n              >\n                <ul className=\"list-style-none\">\n                  <li>\n                    <div className=\"\">\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-success btn-circle\">\n                            <i className=\"ti-calendar\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Event today</h5>\n                            <span className=\"mail-desc\">\n                              Just a reminder that event\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-info btn-circle\">\n                            <i className=\"ti-settings\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Settings</h5>\n                            <span className=\"mail-desc\">\n                              You can customize this template\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-primary btn-circle\">\n                            <i className=\"ti-user\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Pavan kumar</h5>\n                            <span className=\"mail-desc\">\n                              Just see the my admin!\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      <a href=\"#\" className=\"link border-top\">\n                        <div className=\"d-flex no-block align-items-center p-10\">\n                          <span className=\"btn btn-danger btn-circle\">\n                            <i className=\"fa fa-link\"></i>\n                          </span>\n                          <div className=\"m-l-10\">\n                            <h5 className=\"m-b-0\">Luanch Admin</h5>\n                            <span className=\"mail-desc\">\n                              Just see the my new admin!\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                    </div>\n                  </li>\n                </ul>\n              </div>\n            </li>\n            <div\n              style={{ marginTop: \"13px\", cursor: \"pointer\" }}\n              className=\"link-icons px-2 nav-link\"\n              onClick={() => {\n                handleLogout();\n              }}\n            >\n              <PowerSettingsNewIcon />\n            </div>\n            <img src={logo_ms} className=\"ms-logo-center\" />\n            {/* <li className=\"nav-item dropdown\">\n              <a\n                className=\"nav-link dropdown-toggle text-muted waves-effect waves-dark pro-pic\"\n                href=\"\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n              >\n                <img\n                  src={user1}\n                  alt=\"user\"\n                  className=\"rounded-circle\"\n                  width=\"31\"\n                />\n              </a>\n              <div className=\"dropdown-menu dropdown-menu-right user-dd animated\">\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-user m-r-5 m-l-5\"></i> My Profile\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-wallet m-r-5 m-l-5\"></i> My Balance\n                </a>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-email m-r-5 m-l-5\"></i> Inbox\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"ti-settings m-r-5 m-l-5\"></i> Account Setting\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <a className=\"dropdown-item\" href=\"#\">\n                  <i className=\"fa fa-power-off m-r-5 m-l-5\"></i> Logout\n                </a>\n                <div className=\"dropdown-divider\"></div>\n                <div className=\"p-l-30 p-10\">\n                  <a href=\"#\" className=\"btn btn-sm btn-success btn-rounded\">\n                    View Profile\n                  </a>\n                </div>\n              </div>\n            </li> */}\n          </ul>\n        </div>\n      </nav>\n    </header>\n  );\n}\n\nexport default connect((state) => ({\n  ...state,\n}))(MainHeader);\n","/home/pratik/Documents/mega-soft/src/redux/actions/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/employeeData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/menuType.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/auth.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/jobHistory.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/navigationData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/userData.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/employeeList.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/tasks.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/apprisal.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/application.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/reducers/roleType.tsx",[],"/home/pratik/Documents/mega-soft/src/Utils/color.tsx",["540","541"],"import { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\n\n// const colorsList = useSelector((state: RootState) => state.application);\n\n// console.log(\"colorsList\", colorsList);\n\nexport const DefaultTheme = {\n  colors: {\n    primary: \"#00597d\",\n    primaryDark: \"006994 \",\n    white: \"#FFF\",\n  },\n};\n","/home/pratik/Documents/mega-soft/src/i18n.tsx",[],"/home/pratik/Documents/mega-soft/src/redux/actions/application.tsx",[],{"ruleId":"542","severity":1,"message":"543","line":8,"column":8,"nodeType":"544","messageId":"545","endLine":8,"endColumn":12},{"ruleId":"546","replacedBy":"547"},{"ruleId":"548","replacedBy":"549"},{"ruleId":"542","severity":1,"message":"550","line":1,"column":38,"nodeType":"544","messageId":"545","endLine":1,"endColumn":46},{"ruleId":"542","severity":1,"message":"551","line":27,"column":8,"nodeType":"544","messageId":"545","endLine":27,"endColumn":9},{"ruleId":"542","severity":1,"message":"552","line":34,"column":8,"nodeType":"544","messageId":"545","endLine":34,"endColumn":16},{"ruleId":"542","severity":1,"message":"553","line":72,"column":9,"nodeType":"544","messageId":"545","endLine":72,"endColumn":13},{"ruleId":"554","severity":1,"message":"555","line":94,"column":6,"nodeType":"556","endLine":94,"endColumn":8,"suggestions":"557"},{"ruleId":"554","severity":1,"message":"555","line":111,"column":6,"nodeType":"556","endLine":111,"endColumn":8,"suggestions":"558"},{"ruleId":"559","severity":1,"message":"560","line":120,"column":26,"nodeType":"561","messageId":"562","endLine":120,"endColumn":28},{"ruleId":"542","severity":1,"message":"563","line":3,"column":3,"nodeType":"544","messageId":"545","endLine":3,"endColumn":6},{"ruleId":"542","severity":1,"message":"564","line":12,"column":8,"nodeType":"544","messageId":"545","endLine":12,"endColumn":18},{"ruleId":"542","severity":1,"message":"565","line":14,"column":3,"nodeType":"544","messageId":"545","endLine":14,"endColumn":21},{"ruleId":"542","severity":1,"message":"566","line":15,"column":3,"nodeType":"544","messageId":"545","endLine":15,"endColumn":21},{"ruleId":"542","severity":1,"message":"567","line":17,"column":10,"nodeType":"544","messageId":"545","endLine":17,"endColumn":19},{"ruleId":"542","severity":1,"message":"568","line":21,"column":8,"nodeType":"544","messageId":"545","endLine":21,"endColumn":18},{"ruleId":"542","severity":1,"message":"569","line":150,"column":7,"nodeType":"544","messageId":"545","endLine":150,"endColumn":37},{"ruleId":"542","severity":1,"message":"570","line":193,"column":9,"nodeType":"544","messageId":"545","endLine":193,"endColumn":17},{"ruleId":"542","severity":1,"message":"571","line":194,"column":10,"nodeType":"544","messageId":"545","endLine":194,"endColumn":17},{"ruleId":"542","severity":1,"message":"572","line":194,"column":19,"nodeType":"544","messageId":"545","endLine":194,"endColumn":29},{"ruleId":"542","severity":1,"message":"573","line":195,"column":9,"nodeType":"544","messageId":"545","endLine":195,"endColumn":17},{"ruleId":"542","severity":1,"message":"574","line":196,"column":10,"nodeType":"544","messageId":"545","endLine":196,"endColumn":17},{"ruleId":"542","severity":1,"message":"575","line":196,"column":19,"nodeType":"544","messageId":"545","endLine":196,"endColumn":29},{"ruleId":"542","severity":1,"message":"576","line":200,"column":9,"nodeType":"544","messageId":"545","endLine":200,"endColumn":19},{"ruleId":"542","severity":1,"message":"577","line":217,"column":10,"nodeType":"544","messageId":"545","endLine":217,"endColumn":24},{"ruleId":"542","severity":1,"message":"578","line":218,"column":9,"nodeType":"544","messageId":"545","endLine":218,"endColumn":20},{"ruleId":"579","severity":1,"message":"580","line":222,"column":39,"nodeType":"581","messageId":"582","endLine":222,"endColumn":41},{"ruleId":"579","severity":1,"message":"580","line":224,"column":34,"nodeType":"581","messageId":"582","endLine":224,"endColumn":36},{"ruleId":"579","severity":1,"message":"583","line":232,"column":13,"nodeType":"584","messageId":"585","endLine":232,"endColumn":20},{"ruleId":"579","severity":1,"message":"583","line":243,"column":11,"nodeType":"584","messageId":"585","endLine":243,"endColumn":18},{"ruleId":"586","severity":1,"message":"587","line":262,"column":11,"nodeType":"588","endLine":262,"endColumn":34},{"ruleId":"542","severity":1,"message":"589","line":11,"column":10,"nodeType":"544","messageId":"545","endLine":11,"endColumn":21},{"ruleId":"542","severity":1,"message":"590","line":11,"column":23,"nodeType":"544","messageId":"545","endLine":11,"endColumn":34},{"ruleId":"542","severity":1,"message":"591","line":12,"column":10,"nodeType":"544","messageId":"545","endLine":12,"endColumn":19},{"ruleId":"592","severity":1,"message":"593","line":15,"column":3,"nodeType":"594","messageId":"595","endLine":15,"endColumn":18,"fix":"596"},{"ruleId":"542","severity":1,"message":"597","line":17,"column":7,"nodeType":"544","messageId":"545","endLine":17,"endColumn":11},{"ruleId":"592","severity":1,"message":"593","line":4,"column":3,"nodeType":"594","messageId":"595","endLine":4,"endColumn":18,"fix":"598"},{"ruleId":"542","severity":1,"message":"599","line":102,"column":7,"nodeType":"544","messageId":"545","endLine":102,"endColumn":21},{"ruleId":"542","severity":1,"message":"600","line":3,"column":3,"nodeType":"544","messageId":"545","endLine":3,"endColumn":13},{"ruleId":"542","severity":1,"message":"601","line":4,"column":3,"nodeType":"544","messageId":"545","endLine":4,"endColumn":11},{"ruleId":"542","severity":1,"message":"602","line":7,"column":3,"nodeType":"544","messageId":"545","endLine":7,"endColumn":20},{"ruleId":"542","severity":1,"message":"603","line":8,"column":3,"nodeType":"544","messageId":"545","endLine":8,"endColumn":18},{"ruleId":"542","severity":1,"message":"604","line":9,"column":3,"nodeType":"544","messageId":"545","endLine":9,"endColumn":18},{"ruleId":"542","severity":1,"message":"605","line":10,"column":3,"nodeType":"544","messageId":"545","endLine":10,"endColumn":19},{"ruleId":"542","severity":1,"message":"606","line":12,"column":3,"nodeType":"544","messageId":"545","endLine":12,"endColumn":17},{"ruleId":"542","severity":1,"message":"607","line":16,"column":3,"nodeType":"544","messageId":"545","endLine":16,"endColumn":12},{"ruleId":"542","severity":1,"message":"608","line":21,"column":8,"nodeType":"544","messageId":"545","endLine":21,"endColumn":21},{"ruleId":"542","severity":1,"message":"609","line":23,"column":10,"nodeType":"544","messageId":"545","endLine":23,"endColumn":14},{"ruleId":"542","severity":1,"message":"610","line":41,"column":11,"nodeType":"544","messageId":"545","endLine":41,"endColumn":12},{"ruleId":"554","severity":1,"message":"611","line":66,"column":6,"nodeType":"556","endLine":66,"endColumn":8,"suggestions":"612"},{"ruleId":"559","severity":1,"message":"560","line":214,"column":32,"nodeType":"561","messageId":"562","endLine":214,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"609","line":25,"column":3,"nodeType":"544","messageId":"545","endLine":25,"endColumn":7},{"ruleId":"542","severity":1,"message":"613","line":44,"column":10,"nodeType":"544","messageId":"545","endLine":44,"endColumn":25},{"ruleId":"554","severity":1,"message":"614","line":64,"column":6,"nodeType":"556","endLine":64,"endColumn":8,"suggestions":"615"},{"ruleId":"542","severity":1,"message":"616","line":163,"column":9,"nodeType":"544","messageId":"545","endLine":163,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":164,"column":9,"nodeType":"544","messageId":"545","endLine":164,"endColumn":15},{"ruleId":"542","severity":1,"message":"618","line":165,"column":9,"nodeType":"544","messageId":"545","endLine":165,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":166,"column":9,"nodeType":"544","messageId":"545","endLine":166,"endColumn":16},{"ruleId":"559","severity":1,"message":"560","line":391,"column":32,"nodeType":"561","messageId":"562","endLine":391,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"620","line":7,"column":3,"nodeType":"544","messageId":"545","endLine":7,"endColumn":17},{"ruleId":"542","severity":1,"message":"609","line":26,"column":3,"nodeType":"544","messageId":"545","endLine":26,"endColumn":7},{"ruleId":"542","severity":1,"message":"613","line":43,"column":10,"nodeType":"544","messageId":"545","endLine":43,"endColumn":25},{"ruleId":"542","severity":1,"message":"621","line":43,"column":27,"nodeType":"544","messageId":"545","endLine":43,"endColumn":45},{"ruleId":"542","severity":1,"message":"622","line":44,"column":10,"nodeType":"544","messageId":"545","endLine":44,"endColumn":24},{"ruleId":"542","severity":1,"message":"623","line":44,"column":26,"nodeType":"544","messageId":"545","endLine":44,"endColumn":43},{"ruleId":"542","severity":1,"message":"624","line":50,"column":10,"nodeType":"544","messageId":"545","endLine":50,"endColumn":16},{"ruleId":"542","severity":1,"message":"625","line":51,"column":10,"nodeType":"544","messageId":"545","endLine":51,"endColumn":18},{"ruleId":"554","severity":1,"message":"614","line":65,"column":6,"nodeType":"556","endLine":65,"endColumn":8,"suggestions":"626"},{"ruleId":"542","severity":1,"message":"627","line":122,"column":9,"nodeType":"544","messageId":"545","endLine":122,"endColumn":23},{"ruleId":"542","severity":1,"message":"628","line":126,"column":9,"nodeType":"544","messageId":"545","endLine":126,"endColumn":25},{"ruleId":"542","severity":1,"message":"616","line":168,"column":9,"nodeType":"544","messageId":"545","endLine":168,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":169,"column":9,"nodeType":"544","messageId":"545","endLine":169,"endColumn":15},{"ruleId":"542","severity":1,"message":"618","line":170,"column":9,"nodeType":"544","messageId":"545","endLine":170,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":171,"column":9,"nodeType":"544","messageId":"545","endLine":171,"endColumn":16},{"ruleId":"559","severity":1,"message":"560","line":401,"column":32,"nodeType":"561","messageId":"562","endLine":401,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"620","line":7,"column":3,"nodeType":"544","messageId":"545","endLine":7,"endColumn":17},{"ruleId":"542","severity":1,"message":"629","line":8,"column":3,"nodeType":"544","messageId":"545","endLine":8,"endColumn":18},{"ruleId":"542","severity":1,"message":"600","line":13,"column":3,"nodeType":"544","messageId":"545","endLine":13,"endColumn":13},{"ruleId":"542","severity":1,"message":"630","line":17,"column":3,"nodeType":"544","messageId":"545","endLine":17,"endColumn":13},{"ruleId":"542","severity":1,"message":"631","line":23,"column":3,"nodeType":"544","messageId":"545","endLine":23,"endColumn":8},{"ruleId":"542","severity":1,"message":"609","line":26,"column":3,"nodeType":"544","messageId":"545","endLine":26,"endColumn":7},{"ruleId":"542","severity":1,"message":"607","line":27,"column":3,"nodeType":"544","messageId":"545","endLine":27,"endColumn":12},{"ruleId":"542","severity":1,"message":"632","line":42,"column":10,"nodeType":"544","messageId":"545","endLine":42,"endColumn":21},{"ruleId":"542","severity":1,"message":"624","line":52,"column":10,"nodeType":"544","messageId":"545","endLine":52,"endColumn":16},{"ruleId":"542","severity":1,"message":"625","line":53,"column":10,"nodeType":"544","messageId":"545","endLine":53,"endColumn":18},{"ruleId":"554","severity":1,"message":"633","line":65,"column":6,"nodeType":"556","endLine":65,"endColumn":8,"suggestions":"634"},{"ruleId":"542","severity":1,"message":"635","line":68,"column":9,"nodeType":"544","messageId":"545","endLine":68,"endColumn":31},{"ruleId":"542","severity":1,"message":"636","line":69,"column":9,"nodeType":"544","messageId":"545","endLine":69,"endColumn":25},{"ruleId":"542","severity":1,"message":"637","line":80,"column":9,"nodeType":"544","messageId":"545","endLine":80,"endColumn":42},{"ruleId":"542","severity":1,"message":"638","line":90,"column":9,"nodeType":"544","messageId":"545","endLine":90,"endColumn":52},{"ruleId":"542","severity":1,"message":"639","line":98,"column":9,"nodeType":"544","messageId":"545","endLine":98,"endColumn":50},{"ruleId":"542","severity":1,"message":"640","line":104,"column":9,"nodeType":"544","messageId":"545","endLine":104,"endColumn":21},{"ruleId":"542","severity":1,"message":"641","line":111,"column":9,"nodeType":"544","messageId":"545","endLine":111,"endColumn":22},{"ruleId":"542","severity":1,"message":"627","line":122,"column":9,"nodeType":"544","messageId":"545","endLine":122,"endColumn":23},{"ruleId":"542","severity":1,"message":"628","line":126,"column":9,"nodeType":"544","messageId":"545","endLine":126,"endColumn":25},{"ruleId":"559","severity":1,"message":"560","line":230,"column":32,"nodeType":"561","messageId":"562","endLine":230,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"620","line":7,"column":3,"nodeType":"544","messageId":"545","endLine":7,"endColumn":17},{"ruleId":"542","severity":1,"message":"629","line":8,"column":3,"nodeType":"544","messageId":"545","endLine":8,"endColumn":18},{"ruleId":"542","severity":1,"message":"600","line":12,"column":3,"nodeType":"544","messageId":"545","endLine":12,"endColumn":13},{"ruleId":"542","severity":1,"message":"609","line":27,"column":3,"nodeType":"544","messageId":"545","endLine":27,"endColumn":7},{"ruleId":"542","severity":1,"message":"642","line":30,"column":8,"nodeType":"544","messageId":"545","endLine":30,"endColumn":14},{"ruleId":"542","severity":1,"message":"573","line":49,"column":9,"nodeType":"544","messageId":"545","endLine":49,"endColumn":17},{"ruleId":"542","severity":1,"message":"643","line":52,"column":19,"nodeType":"544","messageId":"545","endLine":52,"endColumn":29},{"ruleId":"542","severity":1,"message":"624","line":65,"column":10,"nodeType":"544","messageId":"545","endLine":65,"endColumn":16},{"ruleId":"542","severity":1,"message":"625","line":66,"column":10,"nodeType":"544","messageId":"545","endLine":66,"endColumn":18},{"ruleId":"542","severity":1,"message":"644","line":69,"column":10,"nodeType":"544","messageId":"545","endLine":69,"endColumn":18},{"ruleId":"554","severity":1,"message":"645","line":85,"column":6,"nodeType":"556","endLine":85,"endColumn":8,"suggestions":"646"},{"ruleId":"542","severity":1,"message":"638","line":110,"column":9,"nodeType":"544","messageId":"545","endLine":110,"endColumn":52},{"ruleId":"542","severity":1,"message":"640","line":124,"column":9,"nodeType":"544","messageId":"545","endLine":124,"endColumn":21},{"ruleId":"542","severity":1,"message":"627","line":142,"column":9,"nodeType":"544","messageId":"545","endLine":142,"endColumn":23},{"ruleId":"542","severity":1,"message":"628","line":146,"column":9,"nodeType":"544","messageId":"545","endLine":146,"endColumn":25},{"ruleId":"542","severity":1,"message":"616","line":184,"column":9,"nodeType":"544","messageId":"545","endLine":184,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":185,"column":9,"nodeType":"544","messageId":"545","endLine":185,"endColumn":15},{"ruleId":"542","severity":1,"message":"618","line":186,"column":9,"nodeType":"544","messageId":"545","endLine":186,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":187,"column":9,"nodeType":"544","messageId":"545","endLine":187,"endColumn":16},{"ruleId":"559","severity":1,"message":"560","line":494,"column":32,"nodeType":"561","messageId":"562","endLine":494,"endColumn":34},{"ruleId":"542","severity":1,"message":"607","line":4,"column":3,"nodeType":"544","messageId":"545","endLine":4,"endColumn":12},{"ruleId":"542","severity":1,"message":"567","line":6,"column":17,"nodeType":"544","messageId":"545","endLine":6,"endColumn":26},{"ruleId":"542","severity":1,"message":"550","line":6,"column":28,"nodeType":"544","messageId":"545","endLine":6,"endColumn":36},{"ruleId":"542","severity":1,"message":"647","line":8,"column":10,"nodeType":"544","messageId":"545","endLine":8,"endColumn":15},{"ruleId":"542","severity":1,"message":"648","line":10,"column":8,"nodeType":"544","messageId":"545","endLine":10,"endColumn":19},{"ruleId":"542","severity":1,"message":"570","line":14,"column":9,"nodeType":"544","messageId":"545","endLine":14,"endColumn":17},{"ruleId":"542","severity":1,"message":"639","line":15,"column":9,"nodeType":"544","messageId":"545","endLine":15,"endColumn":50},{"ruleId":"586","severity":1,"message":"587","line":53,"column":13,"nodeType":"588","endLine":53,"endColumn":60},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"609","line":22,"column":3,"nodeType":"544","messageId":"545","endLine":22,"endColumn":7},{"ruleId":"542","severity":1,"message":"649","line":26,"column":3,"nodeType":"544","messageId":"545","endLine":26,"endColumn":16},{"ruleId":"542","severity":1,"message":"632","line":47,"column":10,"nodeType":"544","messageId":"545","endLine":47,"endColumn":21},{"ruleId":"542","severity":1,"message":"573","line":48,"column":9,"nodeType":"544","messageId":"545","endLine":48,"endColumn":17},{"ruleId":"542","severity":1,"message":"643","line":51,"column":19,"nodeType":"544","messageId":"545","endLine":51,"endColumn":29},{"ruleId":"542","severity":1,"message":"644","line":56,"column":10,"nodeType":"544","messageId":"545","endLine":56,"endColumn":18},{"ruleId":"542","severity":1,"message":"650","line":56,"column":20,"nodeType":"544","messageId":"545","endLine":56,"endColumn":31},{"ruleId":"554","severity":1,"message":"651","line":73,"column":6,"nodeType":"556","endLine":73,"endColumn":8,"suggestions":"652"},{"ruleId":"542","severity":1,"message":"638","line":98,"column":9,"nodeType":"544","messageId":"545","endLine":98,"endColumn":52},{"ruleId":"542","severity":1,"message":"640","line":112,"column":9,"nodeType":"544","messageId":"545","endLine":112,"endColumn":21},{"ruleId":"542","severity":1,"message":"616","line":163,"column":9,"nodeType":"544","messageId":"545","endLine":163,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":164,"column":9,"nodeType":"544","messageId":"545","endLine":164,"endColumn":15},{"ruleId":"542","severity":1,"message":"618","line":165,"column":9,"nodeType":"544","messageId":"545","endLine":165,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":166,"column":9,"nodeType":"544","messageId":"545","endLine":166,"endColumn":16},{"ruleId":"542","severity":1,"message":"653","line":168,"column":23,"nodeType":"544","messageId":"545","endLine":168,"endColumn":37},{"ruleId":"542","severity":1,"message":"654","line":169,"column":22,"nodeType":"544","messageId":"545","endLine":169,"endColumn":35},{"ruleId":"542","severity":1,"message":"655","line":170,"column":26,"nodeType":"544","messageId":"545","endLine":170,"endColumn":43},{"ruleId":"542","severity":1,"message":"656","line":171,"column":25,"nodeType":"544","messageId":"545","endLine":171,"endColumn":41},{"ruleId":"542","severity":1,"message":"657","line":172,"column":27,"nodeType":"544","messageId":"545","endLine":172,"endColumn":45},{"ruleId":"542","severity":1,"message":"658","line":173,"column":21,"nodeType":"544","messageId":"545","endLine":173,"endColumn":33},{"ruleId":"542","severity":1,"message":"659","line":175,"column":10,"nodeType":"544","messageId":"545","endLine":175,"endColumn":18},{"ruleId":"542","severity":1,"message":"660","line":180,"column":9,"nodeType":"544","messageId":"545","endLine":180,"endColumn":25},{"ruleId":"559","severity":1,"message":"560","line":475,"column":32,"nodeType":"561","messageId":"562","endLine":475,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"601","line":8,"column":3,"nodeType":"544","messageId":"545","endLine":8,"endColumn":11},{"ruleId":"542","severity":1,"message":"661","line":9,"column":3,"nodeType":"544","messageId":"545","endLine":9,"endColumn":11},{"ruleId":"542","severity":1,"message":"630","line":12,"column":3,"nodeType":"544","messageId":"545","endLine":12,"endColumn":13},{"ruleId":"542","severity":1,"message":"602","line":13,"column":3,"nodeType":"544","messageId":"545","endLine":13,"endColumn":20},{"ruleId":"542","severity":1,"message":"662","line":15,"column":3,"nodeType":"544","messageId":"545","endLine":15,"endColumn":13},{"ruleId":"542","severity":1,"message":"663","line":16,"column":3,"nodeType":"544","messageId":"545","endLine":16,"endColumn":15},{"ruleId":"542","severity":1,"message":"606","line":18,"column":3,"nodeType":"544","messageId":"545","endLine":18,"endColumn":17},{"ruleId":"542","severity":1,"message":"631","line":19,"column":3,"nodeType":"544","messageId":"545","endLine":19,"endColumn":8},{"ruleId":"542","severity":1,"message":"609","line":22,"column":3,"nodeType":"544","messageId":"545","endLine":22,"endColumn":7},{"ruleId":"542","severity":1,"message":"607","line":23,"column":3,"nodeType":"544","messageId":"545","endLine":23,"endColumn":12},{"ruleId":"542","severity":1,"message":"649","line":25,"column":10,"nodeType":"544","messageId":"545","endLine":25,"endColumn":23},{"ruleId":"542","severity":1,"message":"664","line":35,"column":7,"nodeType":"544","messageId":"545","endLine":35,"endColumn":37},{"ruleId":"542","severity":1,"message":"632","line":42,"column":10,"nodeType":"544","messageId":"545","endLine":42,"endColumn":21},{"ruleId":"542","severity":1,"message":"643","line":47,"column":19,"nodeType":"544","messageId":"545","endLine":47,"endColumn":29},{"ruleId":"554","severity":1,"message":"651","line":65,"column":6,"nodeType":"556","endLine":65,"endColumn":8,"suggestions":"665"},{"ruleId":"542","severity":1,"message":"639","line":67,"column":9,"nodeType":"544","messageId":"545","endLine":67,"endColumn":50},{"ruleId":"542","severity":1,"message":"641","line":73,"column":9,"nodeType":"544","messageId":"545","endLine":73,"endColumn":22},{"ruleId":"542","severity":1,"message":"616","line":117,"column":9,"nodeType":"544","messageId":"545","endLine":117,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":118,"column":9,"nodeType":"544","messageId":"545","endLine":118,"endColumn":15},{"ruleId":"542","severity":1,"message":"618","line":119,"column":9,"nodeType":"544","messageId":"545","endLine":119,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":120,"column":9,"nodeType":"544","messageId":"545","endLine":120,"endColumn":16},{"ruleId":"542","severity":1,"message":"666","line":122,"column":10,"nodeType":"544","messageId":"545","endLine":122,"endColumn":21},{"ruleId":"542","severity":1,"message":"653","line":122,"column":23,"nodeType":"544","messageId":"545","endLine":122,"endColumn":37},{"ruleId":"542","severity":1,"message":"667","line":123,"column":10,"nodeType":"544","messageId":"545","endLine":123,"endColumn":20},{"ruleId":"542","severity":1,"message":"654","line":123,"column":22,"nodeType":"544","messageId":"545","endLine":123,"endColumn":35},{"ruleId":"542","severity":1,"message":"668","line":124,"column":10,"nodeType":"544","messageId":"545","endLine":124,"endColumn":24},{"ruleId":"542","severity":1,"message":"655","line":124,"column":26,"nodeType":"544","messageId":"545","endLine":124,"endColumn":43},{"ruleId":"542","severity":1,"message":"669","line":125,"column":10,"nodeType":"544","messageId":"545","endLine":125,"endColumn":23},{"ruleId":"542","severity":1,"message":"656","line":125,"column":25,"nodeType":"544","messageId":"545","endLine":125,"endColumn":41},{"ruleId":"542","severity":1,"message":"670","line":126,"column":10,"nodeType":"544","messageId":"545","endLine":126,"endColumn":25},{"ruleId":"542","severity":1,"message":"657","line":126,"column":27,"nodeType":"544","messageId":"545","endLine":126,"endColumn":45},{"ruleId":"542","severity":1,"message":"671","line":127,"column":10,"nodeType":"544","messageId":"545","endLine":127,"endColumn":19},{"ruleId":"542","severity":1,"message":"658","line":127,"column":21,"nodeType":"544","messageId":"545","endLine":127,"endColumn":33},{"ruleId":"559","severity":1,"message":"560","line":207,"column":32,"nodeType":"561","messageId":"562","endLine":207,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":30,"column":8,"nodeType":"544","messageId":"545","endLine":30,"endColumn":21},{"ruleId":"542","severity":1,"message":"609","line":31,"column":10,"nodeType":"544","messageId":"545","endLine":31,"endColumn":14},{"ruleId":"542","severity":1,"message":"672","line":61,"column":7,"nodeType":"544","messageId":"545","endLine":61,"endColumn":47},{"ruleId":"554","severity":1,"message":"611","line":97,"column":6,"nodeType":"556","endLine":97,"endColumn":8,"suggestions":"673"},{"ruleId":"542","severity":1,"message":"674","line":176,"column":26,"nodeType":"544","messageId":"545","endLine":176,"endColumn":43},{"ruleId":"542","severity":1,"message":"675","line":187,"column":10,"nodeType":"544","messageId":"545","endLine":187,"endColumn":21},{"ruleId":"542","severity":1,"message":"676","line":214,"column":9,"nodeType":"544","messageId":"545","endLine":214,"endColumn":28},{"ruleId":"542","severity":1,"message":"618","line":259,"column":9,"nodeType":"544","messageId":"545","endLine":259,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":260,"column":9,"nodeType":"544","messageId":"545","endLine":260,"endColumn":16},{"ruleId":"542","severity":1,"message":"616","line":261,"column":9,"nodeType":"544","messageId":"545","endLine":261,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":262,"column":9,"nodeType":"544","messageId":"545","endLine":262,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":657,"column":32,"nodeType":"561","messageId":"562","endLine":657,"endColumn":34},{"ruleId":"542","severity":1,"message":"605","line":4,"column":3,"nodeType":"544","messageId":"545","endLine":4,"endColumn":19},{"ruleId":"542","severity":1,"message":"677","line":29,"column":3,"nodeType":"544","messageId":"545","endLine":29,"endColumn":14},{"ruleId":"542","severity":1,"message":"608","line":33,"column":8,"nodeType":"544","messageId":"545","endLine":33,"endColumn":21},{"ruleId":"542","severity":1,"message":"609","line":34,"column":10,"nodeType":"544","messageId":"545","endLine":34,"endColumn":14},{"ruleId":"542","severity":1,"message":"672","line":64,"column":7,"nodeType":"544","messageId":"545","endLine":64,"endColumn":47},{"ruleId":"542","severity":1,"message":"678","line":89,"column":9,"nodeType":"544","messageId":"545","endLine":89,"endColumn":20},{"ruleId":"542","severity":1,"message":"679","line":93,"column":10,"nodeType":"544","messageId":"545","endLine":93,"endColumn":21},{"ruleId":"542","severity":1,"message":"680","line":93,"column":23,"nodeType":"544","messageId":"545","endLine":93,"endColumn":37},{"ruleId":"542","severity":1,"message":"681","line":94,"column":10,"nodeType":"544","messageId":"545","endLine":94,"endColumn":19},{"ruleId":"542","severity":1,"message":"682","line":94,"column":21,"nodeType":"544","messageId":"545","endLine":94,"endColumn":33},{"ruleId":"542","severity":1,"message":"683","line":375,"column":10,"nodeType":"544","messageId":"545","endLine":375,"endColumn":26},{"ruleId":"542","severity":1,"message":"684","line":376,"column":10,"nodeType":"544","messageId":"545","endLine":376,"endColumn":29},{"ruleId":"542","severity":1,"message":"685","line":376,"column":31,"nodeType":"544","messageId":"545","endLine":376,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":772,"column":32,"nodeType":"561","messageId":"562","endLine":772,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":32,"column":8,"nodeType":"544","messageId":"545","endLine":32,"endColumn":21},{"ruleId":"542","severity":1,"message":"686","line":40,"column":8,"nodeType":"544","messageId":"545","endLine":40,"endColumn":18},{"ruleId":"542","severity":1,"message":"687","line":45,"column":3,"nodeType":"544","messageId":"545","endLine":45,"endColumn":22},{"ruleId":"542","severity":1,"message":"688","line":51,"column":10,"nodeType":"544","messageId":"545","endLine":51,"endColumn":26},{"ruleId":"542","severity":1,"message":"689","line":67,"column":27,"nodeType":"544","messageId":"545","endLine":67,"endColumn":45},{"ruleId":"542","severity":1,"message":"690","line":77,"column":37,"nodeType":"544","messageId":"545","endLine":77,"endColumn":42},{"ruleId":"542","severity":1,"message":"691","line":78,"column":10,"nodeType":"544","messageId":"545","endLine":78,"endColumn":20},{"ruleId":"542","severity":1,"message":"692","line":78,"column":22,"nodeType":"544","messageId":"545","endLine":78,"endColumn":35},{"ruleId":"542","severity":1,"message":"693","line":80,"column":9,"nodeType":"544","messageId":"545","endLine":80,"endColumn":15},{"ruleId":"554","severity":1,"message":"694","line":119,"column":6,"nodeType":"556","endLine":128,"endColumn":4,"suggestions":"695"},{"ruleId":"542","severity":1,"message":"696","line":286,"column":10,"nodeType":"544","messageId":"545","endLine":286,"endColumn":20},{"ruleId":"542","severity":1,"message":"618","line":548,"column":9,"nodeType":"544","messageId":"545","endLine":548,"endColumn":16},{"ruleId":"542","severity":1,"message":"619","line":549,"column":9,"nodeType":"544","messageId":"545","endLine":549,"endColumn":16},{"ruleId":"542","severity":1,"message":"616","line":551,"column":9,"nodeType":"544","messageId":"545","endLine":551,"endColumn":17},{"ruleId":"542","severity":1,"message":"617","line":552,"column":9,"nodeType":"544","messageId":"545","endLine":552,"endColumn":15},{"ruleId":"559","severity":1,"message":"560","line":556,"column":23,"nodeType":"561","messageId":"562","endLine":556,"endColumn":25},{"ruleId":"559","severity":1,"message":"560","line":559,"column":23,"nodeType":"561","messageId":"562","endLine":559,"endColumn":25},{"ruleId":"542","severity":1,"message":"697","line":574,"column":9,"nodeType":"544","messageId":"545","endLine":574,"endColumn":52},{"ruleId":"559","severity":1,"message":"560","line":690,"column":29,"nodeType":"561","messageId":"562","endLine":690,"endColumn":31},{"ruleId":"542","severity":1,"message":"698","line":863,"column":10,"nodeType":"544","messageId":"545","endLine":863,"endColumn":23},{"ruleId":"542","severity":1,"message":"699","line":863,"column":25,"nodeType":"544","messageId":"545","endLine":863,"endColumn":41},{"ruleId":"559","severity":1,"message":"560","line":875,"column":32,"nodeType":"561","messageId":"562","endLine":875,"endColumn":34},{"ruleId":"542","severity":1,"message":"608","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":21},{"ruleId":"542","severity":1,"message":"700","line":17,"column":3,"nodeType":"544","messageId":"545","endLine":17,"endColumn":7},{"ruleId":"542","severity":1,"message":"701","line":18,"column":3,"nodeType":"544","messageId":"545","endLine":18,"endColumn":8},{"ruleId":"542","severity":1,"message":"702","line":22,"column":3,"nodeType":"544","messageId":"545","endLine":22,"endColumn":12},{"ruleId":"542","severity":1,"message":"610","line":37,"column":11,"nodeType":"544","messageId":"545","endLine":37,"endColumn":12},{"ruleId":"542","severity":1,"message":"572","line":38,"column":19,"nodeType":"544","messageId":"545","endLine":38,"endColumn":29},{"ruleId":"542","severity":1,"message":"703","line":39,"column":23,"nodeType":"544","messageId":"545","endLine":39,"endColumn":36},{"ruleId":"542","severity":1,"message":"704","line":40,"column":17,"nodeType":"544","messageId":"545","endLine":40,"endColumn":25},{"ruleId":"542","severity":1,"message":"705","line":41,"column":10,"nodeType":"544","messageId":"545","endLine":41,"endColumn":14},{"ruleId":"542","severity":1,"message":"706","line":41,"column":16,"nodeType":"544","messageId":"545","endLine":41,"endColumn":23},{"ruleId":"542","severity":1,"message":"689","line":43,"column":27,"nodeType":"544","messageId":"545","endLine":43,"endColumn":45},{"ruleId":"542","severity":1,"message":"707","line":44,"column":10,"nodeType":"544","messageId":"545","endLine":44,"endColumn":20},{"ruleId":"542","severity":1,"message":"690","line":52,"column":49,"nodeType":"544","messageId":"545","endLine":52,"endColumn":54},{"ruleId":"554","severity":1,"message":"708","line":61,"column":6,"nodeType":"556","endLine":61,"endColumn":8,"suggestions":"709"},{"ruleId":"554","severity":1,"message":"555","line":99,"column":6,"nodeType":"556","endLine":99,"endColumn":75,"suggestions":"710"},{"ruleId":"559","severity":1,"message":"560","line":336,"column":32,"nodeType":"561","messageId":"562","endLine":336,"endColumn":34},{"ruleId":"542","severity":1,"message":"701","line":12,"column":3,"nodeType":"544","messageId":"545","endLine":12,"endColumn":8},{"ruleId":"542","severity":1,"message":"608","line":27,"column":8,"nodeType":"544","messageId":"545","endLine":27,"endColumn":21},{"ruleId":"542","severity":1,"message":"711","line":40,"column":8,"nodeType":"544","messageId":"545","endLine":40,"endColumn":22},{"ruleId":"542","severity":1,"message":"712","line":44,"column":8,"nodeType":"544","messageId":"545","endLine":44,"endColumn":18},{"ruleId":"542","severity":1,"message":"713","line":45,"column":8,"nodeType":"544","messageId":"545","endLine":45,"endColumn":25},{"ruleId":"542","severity":1,"message":"613","line":77,"column":10,"nodeType":"544","messageId":"545","endLine":77,"endColumn":25},{"ruleId":"542","severity":1,"message":"621","line":77,"column":27,"nodeType":"544","messageId":"545","endLine":77,"endColumn":45},{"ruleId":"542","severity":1,"message":"714","line":86,"column":33,"nodeType":"544","messageId":"545","endLine":86,"endColumn":57},{"ruleId":"542","severity":1,"message":"715","line":87,"column":30,"nodeType":"544","messageId":"545","endLine":87,"endColumn":51},{"ruleId":"542","severity":1,"message":"690","line":88,"column":10,"nodeType":"544","messageId":"545","endLine":88,"endColumn":15},{"ruleId":"542","severity":1,"message":"716","line":88,"column":17,"nodeType":"544","messageId":"545","endLine":88,"endColumn":25},{"ruleId":"542","severity":1,"message":"717","line":90,"column":22,"nodeType":"544","messageId":"545","endLine":90,"endColumn":35},{"ruleId":"542","severity":1,"message":"643","line":91,"column":19,"nodeType":"544","messageId":"545","endLine":91,"endColumn":29},{"ruleId":"542","severity":1,"message":"718","line":100,"column":10,"nodeType":"544","messageId":"545","endLine":100,"endColumn":26},{"ruleId":"542","severity":1,"message":"719","line":106,"column":34,"nodeType":"544","messageId":"545","endLine":106,"endColumn":45},{"ruleId":"554","severity":1,"message":"720","line":130,"column":6,"nodeType":"556","endLine":130,"endColumn":45,"suggestions":"721"},{"ruleId":"554","severity":1,"message":"722","line":146,"column":6,"nodeType":"556","endLine":146,"endColumn":64,"suggestions":"723"},{"ruleId":"554","severity":1,"message":"724","line":172,"column":6,"nodeType":"556","endLine":172,"endColumn":43,"suggestions":"725"},{"ruleId":"554","severity":1,"message":"726","line":202,"column":6,"nodeType":"556","endLine":202,"endColumn":43,"suggestions":"727"},{"ruleId":"542","severity":1,"message":"639","line":236,"column":9,"nodeType":"544","messageId":"545","endLine":236,"endColumn":50},{"ruleId":"542","severity":1,"message":"728","line":398,"column":10,"nodeType":"544","messageId":"545","endLine":398,"endColumn":27},{"ruleId":"559","severity":1,"message":"560","line":533,"column":27,"nodeType":"561","messageId":"562","endLine":533,"endColumn":29},{"ruleId":"542","severity":1,"message":"729","line":664,"column":10,"nodeType":"544","messageId":"545","endLine":664,"endColumn":22},{"ruleId":"542","severity":1,"message":"730","line":726,"column":9,"nodeType":"544","messageId":"545","endLine":726,"endColumn":19},{"ruleId":"559","severity":1,"message":"560","line":1406,"column":32,"nodeType":"561","messageId":"562","endLine":1406,"endColumn":34},{"ruleId":"542","severity":1,"message":"567","line":1,"column":17,"nodeType":"544","messageId":"545","endLine":1,"endColumn":26},{"ruleId":"542","severity":1,"message":"551","line":3,"column":8,"nodeType":"544","messageId":"545","endLine":3,"endColumn":9},{"ruleId":"542","severity":1,"message":"731","line":5,"column":10,"nodeType":"544","messageId":"545","endLine":5,"endColumn":23},{"ruleId":"542","severity":1,"message":"566","line":7,"column":10,"nodeType":"544","messageId":"545","endLine":7,"endColumn":28},{"ruleId":"542","severity":1,"message":"732","line":11,"column":3,"nodeType":"544","messageId":"545","endLine":11,"endColumn":18},{"ruleId":"542","severity":1,"message":"733","line":21,"column":3,"nodeType":"544","messageId":"545","endLine":21,"endColumn":17},{"ruleId":"542","severity":1,"message":"734","line":22,"column":3,"nodeType":"544","messageId":"545","endLine":22,"endColumn":16},{"ruleId":"542","severity":1,"message":"735","line":29,"column":8,"nodeType":"544","messageId":"545","endLine":29,"endColumn":16},{"ruleId":"542","severity":1,"message":"736","line":34,"column":8,"nodeType":"544","messageId":"545","endLine":34,"endColumn":32},{"ruleId":"542","severity":1,"message":"737","line":35,"column":8,"nodeType":"544","messageId":"545","endLine":35,"endColumn":20},{"ruleId":"542","severity":1,"message":"738","line":36,"column":8,"nodeType":"544","messageId":"545","endLine":36,"endColumn":16},{"ruleId":"542","severity":1,"message":"739","line":37,"column":8,"nodeType":"544","messageId":"545","endLine":37,"endColumn":16},{"ruleId":"542","severity":1,"message":"568","line":38,"column":8,"nodeType":"544","messageId":"545","endLine":38,"endColumn":18},{"ruleId":"542","severity":1,"message":"740","line":42,"column":7,"nodeType":"544","messageId":"545","endLine":42,"endColumn":20},{"ruleId":"542","severity":1,"message":"575","line":47,"column":19,"nodeType":"544","messageId":"545","endLine":47,"endColumn":29},{"ruleId":"542","severity":1,"message":"610","line":48,"column":11,"nodeType":"544","messageId":"545","endLine":48,"endColumn":12},{"ruleId":"542","severity":1,"message":"741","line":49,"column":9,"nodeType":"544","messageId":"545","endLine":49,"endColumn":17},{"ruleId":"542","severity":1,"message":"742","line":73,"column":9,"nodeType":"544","messageId":"545","endLine":73,"endColumn":22},{"ruleId":"743","severity":1,"message":"744","line":89,"column":17,"nodeType":"588","endLine":96,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":100,"column":17,"nodeType":"588","endLine":103,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":117,"column":17,"nodeType":"588","endLine":120,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":134,"column":17,"nodeType":"588","endLine":137,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":151,"column":17,"nodeType":"588","endLine":154,"endColumn":18},{"ruleId":"743","severity":1,"message":"744","line":157,"column":17,"nodeType":"588","endLine":164,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":168,"column":17,"nodeType":"588","endLine":171,"endColumn":18},{"ruleId":"743","severity":1,"message":"744","line":175,"column":17,"nodeType":"588","endLine":182,"endColumn":18},{"ruleId":"745","severity":1,"message":"746","line":186,"column":17,"nodeType":"588","endLine":189,"endColumn":18},{"ruleId":"542","severity":1,"message":"747","line":317,"column":9,"nodeType":"544","messageId":"545","endLine":317,"endColumn":22},{"ruleId":"542","severity":1,"message":"748","line":322,"column":9,"nodeType":"544","messageId":"545","endLine":322,"endColumn":16},{"ruleId":"542","severity":1,"message":"749","line":334,"column":9,"nodeType":"544","messageId":"545","endLine":334,"endColumn":28},{"ruleId":"542","severity":1,"message":"750","line":454,"column":9,"nodeType":"544","messageId":"545","endLine":454,"endColumn":24},{"ruleId":"559","severity":1,"message":"560","line":455,"column":23,"nodeType":"561","messageId":"562","endLine":455,"endColumn":25},{"ruleId":"559","severity":1,"message":"560","line":458,"column":23,"nodeType":"561","messageId":"562","endLine":458,"endColumn":25},{"ruleId":"542","severity":1,"message":"751","line":13,"column":7,"nodeType":"544","messageId":"545","endLine":13,"endColumn":38},{"ruleId":"542","severity":1,"message":"752","line":33,"column":7,"nodeType":"544","messageId":"545","endLine":33,"endColumn":42},{"ruleId":"542","severity":1,"message":"753","line":59,"column":7,"nodeType":"544","messageId":"545","endLine":59,"endColumn":49},{"ruleId":"542","severity":1,"message":"754","line":2,"column":8,"nodeType":"544","messageId":"545","endLine":2,"endColumn":19},{"ruleId":"542","severity":1,"message":"755","line":2,"column":8,"nodeType":"544","messageId":"545","endLine":2,"endColumn":17},{"ruleId":"542","severity":1,"message":"756","line":10,"column":3,"nodeType":"544","messageId":"545","endLine":10,"endColumn":7},{"ruleId":"542","severity":1,"message":"757","line":17,"column":13,"nodeType":"544","messageId":"545","endLine":17,"endColumn":18},{"ruleId":"542","severity":1,"message":"758","line":23,"column":10,"nodeType":"544","messageId":"545","endLine":23,"endColumn":21},{"ruleId":"542","severity":1,"message":"550","line":25,"column":17,"nodeType":"544","messageId":"545","endLine":25,"endColumn":25},{"ruleId":"542","severity":1,"message":"759","line":26,"column":10,"nodeType":"544","messageId":"545","endLine":26,"endColumn":24},{"ruleId":"542","severity":1,"message":"760","line":27,"column":10,"nodeType":"544","messageId":"545","endLine":27,"endColumn":23},{"ruleId":"542","severity":1,"message":"761","line":64,"column":9,"nodeType":"544","messageId":"545","endLine":64,"endColumn":28},{"ruleId":"542","severity":1,"message":"748","line":69,"column":9,"nodeType":"544","messageId":"545","endLine":69,"endColumn":16},{"ruleId":"542","severity":1,"message":"762","line":81,"column":9,"nodeType":"544","messageId":"545","endLine":81,"endColumn":23},{"ruleId":"559","severity":1,"message":"560","line":82,"column":18,"nodeType":"561","messageId":"562","endLine":82,"endColumn":20},{"ruleId":"743","severity":1,"message":"744","line":154,"column":15,"nodeType":"588","endLine":159,"endColumn":16},{"ruleId":"586","severity":1,"message":"587","line":165,"column":15,"nodeType":"588","endLine":165,"endColumn":39},{"ruleId":"743","severity":1,"message":"744","line":198,"column":15,"nodeType":"588","endLine":204,"endColumn":16},{"ruleId":"745","severity":1,"message":"763","line":198,"column":15,"nodeType":"588","endLine":204,"endColumn":16},{"ruleId":"743","severity":1,"message":"744","line":209,"column":17,"nodeType":"588","endLine":209,"endColumn":55},{"ruleId":"743","severity":1,"message":"744","line":212,"column":17,"nodeType":"588","endLine":212,"endColumn":55},{"ruleId":"743","severity":1,"message":"744","line":216,"column":17,"nodeType":"588","endLine":216,"endColumn":55},{"ruleId":"743","severity":1,"message":"744","line":222,"column":15,"nodeType":"588","endLine":229,"endColumn":16},{"ruleId":"745","severity":1,"message":"763","line":222,"column":15,"nodeType":"588","endLine":229,"endColumn":16},{"ruleId":"743","severity":1,"message":"744","line":240,"column":23,"nodeType":"588","endLine":240,"endColumn":63},{"ruleId":"743","severity":1,"message":"744","line":253,"column":23,"nodeType":"588","endLine":253,"endColumn":63},{"ruleId":"743","severity":1,"message":"744","line":266,"column":23,"nodeType":"588","endLine":266,"endColumn":63},{"ruleId":"743","severity":1,"message":"744","line":279,"column":23,"nodeType":"588","endLine":279,"endColumn":63},{"ruleId":"586","severity":1,"message":"587","line":306,"column":13,"nodeType":"588","endLine":306,"endColumn":61},{"ruleId":"542","severity":1,"message":"590","line":1,"column":10,"nodeType":"544","messageId":"545","endLine":1,"endColumn":21},{"ruleId":"542","severity":1,"message":"591","line":2,"column":10,"nodeType":"544","messageId":"545","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","no-native-reassign",["764"],"no-negated-in-lhs",["765"],"'useState' is defined but never used.","'$' is defined but never used.","'roleType' is defined but never used.","'hist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["766"],["767"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Nav' is defined but never used.","'logo_nuage' is defined but never used.","'fetchNavigationBar' is defined but never used.","'sideNavigationData' is defined but never used.","'useEffect' is defined but never used.","'MainHeader' is defined but never used.","'navStyles' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'doctype' is assigned a value but never used.","'setDoctype' is assigned a value but never used.","'roleType' is assigned a value but never used.","'navData' is assigned a value but never used.","'setNavData' is assigned a value but never used.","'navigation' is assigned a value but never used.","'selectedNavKey' is assigned a value but never used.","'onLinkClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"768","text":"769"},"'path' is assigned a value but never used.",{"range":"770","text":"769"},"'setsidebartype' is assigned a value but never used.","'DatePicker' is defined but never used.","'Dropdown' is defined but never used.","'IDatePickerStyles' is defined but never used.","'IDropdownOption' is defined but never used.","'IDropdownStyles' is defined but never used.","'ITextFieldStyles' is defined but never used.","'mergeStyleSets' is defined but never used.","'TextField' is defined but never used.","'WelcomeHeader' is defined but never used.","'Text' is defined but never used.","'t' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limitStart', 'orderBy', and 'orderByField'. Either include them or remove the dependency array.",["771"],"'employeeDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById' and 'roleType'. Either include them or remove the dependency array.",["772"],"'userName' is assigned a value but never used.","'userId' is assigned a value but never used.","'dateNow' is assigned a value but never used.","'timeNow' is assigned a value but never used.","'add_JobHistory' is defined but never used.","'setEmployeeDetails' is assigned a value but never used.","'jobHistoryData' is assigned a value but never used.","'setJobHistoryData' is assigned a value but never used.","'toDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.",["773"],"'onchangeToDate' is assigned a value but never used.","'onchangeFromDate' is assigned a value but never used.","'fetchJobHistory' is defined but never used.","'IconButton' is defined but never used.","'Modal' is defined but never used.","'filtersById' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName' and 'roleType'. Either include them or remove the dependency array.",["774"],"'cancelIcon' is assigned a value but never used.","'iconButtonStyles' is assigned a value but never used.","'modalStyle' is assigned a value but never used.","'datePickerStyle' is assigned a value but never used.","'textfelidStyle' is assigned a value but never used.","'controlClass' is assigned a value but never used.","'onChangeInput' is assigned a value but never used.","'moment' is defined but never used.","'setOrderBy' is assigned a value but never used.","'goalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["775"],"'login' is defined but never used.","'banner_main' is defined but never used.","'fetchGoalData' is defined but never used.","'setGoalData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByName', 'limitPageLength', 'limit_start', and 'orderBy'. Either include them or remove the dependency array.",["776"],"'setErrMsgOrder' is assigned a value but never used.","'setErrMsgGoal' is assigned a value but never used.","'setErrMsgGoalType' is assigned a value but never used.","'setErrMsgMeasure' is assigned a value but never used.","'setErrMsgWeightage' is assigned a value but never used.","'setErrMsgKra' is assigned a value but never used.","'goalType' is assigned a value but never used.","'onChangeGoalType' is assigned a value but never used.","'getTheme' is defined but never used.","'IIconProps' is defined but never used.","'IModalStyles' is defined but never used.","'goalOptions' is assigned a value but never used.",["777"],"'errMsgOrder' is assigned a value but never used.","'errMsgGoal' is assigned a value but never used.","'errMsgGoalType' is assigned a value but never used.","'errMsgMeasure' is assigned a value but never used.","'errMsgWeightage' is assigned a value but never used.","'errMsgKra' is assigned a value but never used.","'dropdownStyles' is assigned a value but never used.",["778"],"'setFirstDayOfWeek' is assigned a value but never used.","'formateType' is assigned a value but never used.","'onChangeFormateType' is assigned a value but never used.","'ColorPicker' is defined but never used.","'updateColor' is assigned a value but never used.","'showPreview' is assigned a value but never used.","'setShowPreview' is assigned a value but never used.","'alphaType' is assigned a value but never used.","'setAlphaType' is assigned a value but never used.","'errMsgReviewDate' is assigned a value but never used.","'errMsgAppraisalDate' is assigned a value but never used.","'setErrMsgAppraisalDate' is assigned a value but never used.","'ZoomInIcon' is defined but never used.","'deleteAppraisalByID' is defined but never used.","'delete_appraisal' is defined but never used.","'setLimitPageLength' is assigned a value but never used.","'count' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'setFormatDate' is assigned a value but never used.","'params' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'orderByField'. Either include them or remove the dependency array.",["779"],"'updateData' is assigned a value but never used.","'renderRow' is assigned a value but never used.","'collapsedMenu' is assigned a value but never used.","'setCollapsedMenu' is assigned a value but never used.","'ITag' is defined but never used.","'Label' is defined but never used.","'TagPicker' is defined but never used.","'setLimitStart' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'limitStart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'order_by'. Either include it or remove the dependency array.",["780"],["781"],"'ArrowRightIcon' is defined but never used.","'jobHistory' is defined but never used.","'JobHistoryDetails' is defined but never used.","'setLimitStartDevelopment' is assigned a value but never used.","'setOrderByDevelopment' is assigned a value but never used.","'setCount' is assigned a value but never used.","'setTotalCount' is assigned a value but never used.","'developmentCount' is assigned a value but never used.","'total_count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtersByApprisal' and 'filtersById'. Either include them or remove the dependency array.",["782"],"React Hook useEffect has missing dependencies: 'dispatch' and 'filtersById'. Either include them or remove the dependency array.",["783"],"React Hook useEffect has missing dependencies: 'filtersById' and 'orderBy'. Either include them or remove the dependency array.",["784"],"React Hook useEffect has missing dependencies: 'filtersById', 'limitPageLengthDevelopment', 'limitStartDevelopment', 'orderByDevelopment', 'params.appraisalId', and 'params.employeeId'. Either include them or remove the dependency array.",["785"],"'deleteItemJobName' is assigned a value but never used.","'deleteItemId' is assigned a value but never used.","'operations' is assigned a value but never used.","'customSideBar' is defined but never used.","'setCollapedMenu' is defined but never used.","'SidebarContent' is defined but never used.","'SidebarFooter' is defined but never used.","'WorkIcon' is defined but never used.","'RadioButtonUncheckedIcon' is defined but never used.","'MenuOpenIcon' is defined but never used.","'MenuIcon' is defined but never used.","'menuData' is defined but never used.","'handleSideBar' is assigned a value but never used.","'menuType' is assigned a value but never used.","'sideMenuLocal' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/role-supports-aria-props","The attribute aria-expanded is not supported by the role list. This role is implicit on the element ul.","'renderNavData' is assigned a value but never used.","'history' is assigned a value but never used.","'checkMenuPermission' is assigned a value but never used.","'handlemenuClick' is assigned a value but never used.","'menuProps' is assigned a value but never used.","'itemsWithHeading' is assigned a value but never used.","'breadCrumStyle' is assigned a value but never used.","'accessToken' is defined but never used.","'logo_icon' is defined but never used.","'Link' is defined but never used.","'Utils' is defined but never used.","'setMenuType' is defined but never used.","'useTranslation' is defined but never used.","'changeLanguge' is defined but never used.","'handleCustomSidebar' is assigned a value but never used.","'renderMenuLogo' is assigned a value but never used.","The attribute aria-haspopup is not supported by the role link. This role is implicit on the element a.","no-global-assign","no-unsafe-negation",{"desc":"786","fix":"787"},{"desc":"786","fix":"788"},[394,409],"",[70,85],{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"791","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"798","fix":"800"},{"desc":"789","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},"Update the dependencies array to be: [dispatch]",{"range":"816","text":"817"},{"range":"818","text":"817"},"Update the dependencies array to be: [filtersById, limitPageLength, limitStart, orderBy, orderByField]",{"range":"819","text":"820"},"Update the dependencies array to be: [filtersById, roleType]",{"range":"821","text":"822"},{"range":"823","text":"822"},"Update the dependencies array to be: [filtersByName, roleType]",{"range":"824","text":"825"},"Update the dependencies array to be: [filtersById, limitPageLength, limit_start, orderBy]",{"range":"826","text":"827"},"Update the dependencies array to be: [filtersByName, limitPageLength, limit_start, orderBy]",{"range":"828","text":"829"},{"range":"830","text":"829"},{"range":"831","text":"820"},"Update the dependencies array to be: [limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",{"range":"832","text":"833"},"Update the dependencies array to be: [order_by]",{"range":"834","text":"835"},"Update the dependencies array to be: [doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",{"range":"836","text":"837"},"Update the dependencies array to be: [doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",{"range":"838","text":"839"},"Update the dependencies array to be: [roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",{"range":"840","text":"841"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",{"range":"842","text":"843"},"Update the dependencies array to be: [limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]",{"range":"844","text":"845"},[2739,2741],"[dispatch]",[3295,3297],[1840,1842],"[filtersById, limitPageLength, limitStart, orderBy, orderByField]",[1929,1931],"[filtersById, roleType]",[2007,2009],[1852,1854],"[filtersByName, roleType]",[2406,2408],"[filtersById, limitPageLength, limit_start, orderBy]",[2070,2072],"[filtersByName, limitPageLength, limit_start, orderBy]",[1822,1824],[2666,2668],[3888,4056],"[limitStart, limitPageLength, orderBy, filtersById, filtersByDescription, filtersByReviewFreq, filtersByAppraisal, filtersByFormat, dispatch, orderByField]",[2240,2242],"[order_by]",[3111,3180],"[doctype, limit_start, limit, filterByStatus, roleType, filterByName, dispatch]",[4392,4431],"[doctype, limit_start, limit, roleType, filtersById, filtersByApprisal]",[4747,4805],"[roleType, limitStart, limitPageLength, orderByJobHistory, filtersById, dispatch]",[5519,5556],"[limitStartGoal, limitPageLengthGoal, filtersById, orderBy]",[6394,6431],"[limitStartGoal, limitPageLengthGoal, filtersById, limitStartDevelopment, limitPageLengthDevelopment, orderByDevelopment, params.appraisalId, params.employeeId]"]